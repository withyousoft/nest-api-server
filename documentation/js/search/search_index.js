var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/entities/Address.html",[0,1.757,1,2.805]],["body/entities/Address.html",[0,2.464,1,4.462,2,2.331,3,0.106,4,0.093,5,0.093,6,3.729,7,0.342,8,1.37,9,3.842,10,6.553,11,6.553,12,2.125,13,6.553,14,2.887,15,0.505,16,0.012,17,1.741,18,2.164,19,4.681,20,0.706,21,4.264,22,4.264,23,1.758,24,2.903,25,2.559,26,4.264,27,4.264,28,3.729,29,5.778,30,4.264,31,0.255,32,5.053,33,3.494,34,1.818,35,4.264,36,0.097,37,2.903,38,0.133,39,0.866,40,0.008,41,0.008]],["title/modules/AppModule.html",[42,1.336,43,3.008]],["body/modules/AppModule.html",[3,0.074,4,0.065,5,0.065,15,0.204,16,0.012,20,0.284,31,0.346,36,0.068,38,0.092,40,0.006,41,0.006,42,1.733,43,5.805,44,1.31,45,1.479,46,1.617,47,1.617,48,1.479,49,2.322,50,1.479,51,2.587,52,2.587,53,4.559,54,4.559,55,4.559,56,4.559,57,4.559,58,4.049,59,2.432,60,1.617,61,1.545,62,2.959,63,2.671,64,0.639,65,2.959,66,4.448,67,5.945,68,2.959,69,0.582,70,0.479,71,0.546,72,2.959,73,0.62,74,1.789,75,0.362,76,2.959,77,2.553,78,2.444,79,1.059,80,2.959,81,2.587,82,2.959,83,2.959,84,2.959,85,4.448,86,2.343,87,3.248,88,2.959,89,2.959,90,2.959,91,2.343,92,2.587,93,2.015,94,2.16,95,2.959,96,2.959,97,2.959,98,2.959,99,2.015,100,0.845,101,2.343,102,1.893,103,2.587,104,3.248,105,2.959,106,2.015,107,2.959,108,2.959,109,2.959,110,2.959,111,2.959,112,2.959,113,8.332,114,2.959,115,5.345,116,2.959,117,2.959,118,2.959,119,2.959,120,2.343,121,2.959,122,2.587,123,2.959,124,2.587,125,2.587,126,2.959,127,2.959,128,2.959,129,2.959,130,2.959,131,2.959,132,2.959,133,2.959,134,2.959,135,2.959,136,2.959,137,2.959,138,2.959,139,2.959,140,2.959,141,2.959,142,2.959,143,2.959,144,1.133,145,2.959,146,2.959,147,2.959]],["title/controllers/AuthenticationController.html",[148,1.524,149,3.008]],["body/controllers/AuthenticationController.html",[3,0.069,4,0.061,5,0.061,7,0.223,14,2.34,15,0.427,16,0.012,18,1.829,20,0.597,31,0.324,36,0.064,38,0.087,40,0.006,41,0.006,61,2.218,64,0.918,69,1.221,70,1.005,71,1.146,73,1.3,75,0.34,100,2.16,144,1.067,148,1.031,149,3.102,150,2.435,151,1.522,152,1.782,153,3.102,154,4.249,155,4.249,156,2.893,157,3.365,158,2.435,159,4.184,160,2.785,161,2.785,162,3.445,163,2.785,164,2.785,165,2.785,166,1.93,167,2.785,168,4.114,169,2.785,170,2.785,171,2.785,172,2.785,173,2.785,174,2.785,175,3.925,176,4.249,177,2.785,178,4.249,179,1.522,180,2.205,181,1.105,182,1.782,183,3.102,184,1.782,185,2.816,186,1.782,187,2.033,188,2.785,189,2.719,190,1.782,191,2.435,192,1.282,193,1.522,194,3.716,195,1.812,196,1.522,197,2.033,198,2.785,199,3.115,200,1.684,201,2.205,202,2.785,203,0.771,204,1.518,205,1.567,206,2.205,207,2.785,208,1.99,209,2.062,210,2.785,211,2.785,212,2.785,213,1.756,214,2.205,215,2.785,216,4.249,217,2.785,218,4.505,219,4.209,220,2.435,221,2.205,222,2.435,223,2.785,224,2.785,225,2.205,226,3.365,227,3.296,228,2.785,229,2.435,230,2.719,231,2.785,232,2.785,233,2.785,234,2.785,235,2.785,236,2.785,237,2.785,238,2.785,239,2.785,240,2.785,241,2.785]],["title/modules/AuthenticationModule.html",[42,1.336,53,2.805]],["body/modules/AuthenticationModule.html",[3,0.091,4,0.079,5,0.079,16,0.012,31,0.353,36,0.083,38,0.113,40,0.007,41,0.007,42,1.951,44,1.608,45,1.815,46,1.985,47,1.985,48,1.815,49,3.141,50,1.815,53,5.588,58,4.353,59,2.825,60,1.985,61,1.896,63,3.007,75,0.444,77,3.454,78,2.695,79,1.299,99,2.473,100,1.037,106,2.473,120,2.876,144,1.979,149,4.393,185,3.935,186,3.307,242,3.176,243,3.176,244,3.176,245,4.606,246,4.902,247,4.902,248,4.606,249,3.632,250,4.393,251,3.176,252,5.168,253,1.896,254,5.168,255,3.632,256,3.632,257,2.473,258,3.632,259,3.307,260,3.125,261,3.176,262,3.632,263,2.473,264,2.876,265,3.632,266,2.876,267,3.632,268,2.876]],["title/injectables/AuthenticationService.html",[185,2.252,269,0.522]],["body/injectables/AuthenticationService.html",[3,0.056,4,0.049,5,0.049,7,0.179,9,3.436,14,1.601,15,0.411,16,0.012,17,1.696,20,0.602,23,1.816,31,0.288,36,0.051,38,0.07,39,0.727,40,0.005,41,0.005,64,0.774,69,1.174,70,0.967,71,1.102,73,1.25,75,0.273,78,2.577,79,0.8,100,1.918,120,1.771,122,3.13,152,1.431,156,1.523,157,2.835,166,1.199,175,3.483,185,1.957,191,1.956,195,2.545,196,1.223,203,0.991,204,1.759,205,1.361,208,2.043,209,2.002,213,1.502,227,2.864,257,1.523,263,1.523,266,1.771,268,1.771,269,0.454,270,0.659,271,1.956,272,3.58,273,5.115,274,4.475,275,4.475,276,4.475,277,1.956,278,4.963,279,2.237,280,3.58,281,5.969,282,2.237,283,1.585,284,2.237,285,2.237,286,5.695,287,2.237,288,2.29,289,4.064,290,4.051,291,2.237,292,2.237,293,2.682,294,3.58,295,2.237,296,3.58,297,2.237,298,5.969,299,2.237,300,4.893,301,1.956,302,2.835,303,1.956,304,1.956,305,2.569,306,2.237,307,2.706,308,1.523,309,2.237,310,1.956,311,2.29,312,3.58,313,2.237,314,1.353,315,2.055,316,2.237,317,2.237,318,2.671,319,1.959,320,1.956,321,2.237,322,4.475,323,2.237,324,2.237,325,4.475,326,2.237,327,1.771,328,2.237,329,2.237,330,2.835,331,3.58,332,3.58,333,1.956,334,2.437,335,3.13,336,2.237,337,5.115,338,4.051,339,5.115,340,3.58,341,2.237,342,1.956,343,2.237,344,3.58]],["title/injectables/CategoriesService.html",[269,0.522,345,3.262]],["body/injectables/CategoriesService.html",[3,0.078,4,0.068,5,0.068,7,0.249,12,2.11,15,0.448,16,0.012,20,0.655,23,2.254,31,0.321,34,1.325,36,0.071,38,0.097,40,0.006,41,0.006,64,0.997,69,1.28,70,1.054,71,1.201,73,1.363,75,0.38,100,2.274,166,2.04,181,1.233,203,1.278,204,0.916,208,1.853,209,2.526,213,1.635,269,0.585,270,0.916,318,2.874,319,2.108,345,3.654,346,2.718,347,2.79,348,4.824,349,3.654,350,3.369,351,3.369,352,3.107,353,3.684,354,3.107,355,4.614,356,4.614,357,4.431,358,3.107,359,3.107,360,3.654,361,3.107,362,3.654,363,3.107,364,3.654,365,5.295,366,3.107,367,2.269,368,1.988,369,1.489,370,4.147,371,3.107,372,2.269,373,3.107,374,2.461,375,2.461,376,4.035,377,2.116,378,2.718,379,4.614,380,3.107,381,3.107,382,3.107,383,4.019,384,3.748,385,4.614,386,5.504,387,3.107,388,5.504,389,2.718,390,3.107,391,2.718]],["title/entities/Category.html",[0,1.757,370,2.805]],["body/entities/Category.html",[0,2.636,2,2.579,3,0.118,4,0.103,5,0.103,7,0.378,8,1.466,9,3.75,12,2.235,15,0.474,16,0.012,17,1.421,18,2.032,19,4.168,20,0.662,23,1.88,24,3.212,25,2.737,31,0.273,33,3.737,34,2.012,36,0.108,37,3.212,38,0.147,39,0.958,40,0.009,41,0.009,70,1.117,181,3.149,370,4.693,384,4.693,392,4.125,393,4.717,394,4.717,395,4.125,396,6.18,397,4.717,398,5.405,399,4.717]],["title/classes/CategoryNotFoundException.html",[36,0.094,372,3.008]],["body/classes/CategoryNotFoundException.html",[3,0.138,4,0.121,5,0.121,12,1.798,15,0.382,16,0.012,20,0.533,23,2.261,31,0.245,36,0.127,38,0.173,39,1.126,40,0.01,41,0.01,69,1.091,70,0.898,71,1.024,75,0.678,203,1.536,372,5.428,400,1.857,401,5.991,402,4.05,403,2.624,404,4.757,405,6.851,406,4.392,407,6.851,408,5.546,409,4.392]],["title/classes/CreateCategoryDto.html",[36,0.094,357,2.805]],["body/classes/CreateCategoryDto.html",[3,0.148,4,0.129,5,0.129,7,0.474,8,1.69,15,0.407,16,0.011,17,1.639,20,0.569,36,0.135,38,0.222,39,1.201,40,0.01,41,0.01,70,1.239,357,5.207,400,1.981,410,5.643,411,4.684,412,5.915]],["title/classes/CreateLogDto.html",[36,0.094,413,3.008]],["body/classes/CreateLogDto.html",[3,0.126,4,0.11,5,0.11,7,0.403,8,1.529,15,0.489,16,0.012,17,1.823,18,2.096,20,0.683,31,0.223,36,0.147,38,0.201,39,1.022,40,0.009,41,0.009,400,1.686,413,5.192,414,6.557,415,4.403,416,4.55,417,5.192,418,4.55,419,4.842,420,5.035,421,5.035,422,5.035,423,4.534,424,4.798,425,2.629]],["title/classes/CreatePostDto.html",[36,0.094,426,2.636]],["body/classes/CreatePostDto.html",[3,0.124,4,0.109,5,0.109,7,0.398,8,1.515,15,0.486,16,0.012,17,1.816,18,2.082,20,0.679,25,2.198,31,0.22,36,0.146,38,0.199,39,1.008,40,0.009,41,0.009,400,1.663,410,5.906,419,4.35,423,4.51,424,4.772,425,2.592,426,4.52,427,3.931,428,4.52,429,6.178,430,5.158,431,4.964,432,4.964,433,4.964,434,4.964,435,4.964,436,4.964]],["title/classes/CreateUserDto.html",[36,0.094,437,2.805]],["body/classes/CreateUserDto.html",[3,0.138,4,0.121,5,0.121,7,0.443,8,1.621,15,0.511,16,0.012,17,1.867,20,0.713,36,0.126,38,0.172,40,0.01,41,0.01,70,1.202,283,3.286,314,4.488,400,1.85,437,4.653,438,6.781,439,4.375,440,5.524,441,5.524,442,5.524]],["title/injectables/CustomLogger.html",[269,0.522,443,2.805]],["body/injectables/CustomLogger.html",[3,0.068,4,0.06,5,0.06,7,0.218,8,0.99,15,0.464,16,0.012,17,1.937,20,0.649,31,0.272,36,0.062,38,0.085,39,0.552,40,0.006,41,0.006,64,0.902,69,1.275,70,1.05,71,1.196,73,1.287,74,3.714,75,0.333,78,2.774,79,0.973,203,1.156,204,1.497,205,1.545,208,0.828,269,0.529,270,0.802,305,3.72,403,1.599,416,5.284,417,4.485,418,4.972,443,3.457,444,6.089,445,2.155,446,5.078,447,4.873,448,4.174,449,3.269,450,4.174,451,3.65,452,2.721,453,4.98,454,5.694,455,4.174,456,4.174,457,2.721,458,4.733,459,4.174,460,5.694,461,2.721,462,4.174,463,2.721,464,4.174,465,2.721,466,4.174,467,2.379,468,2.721,469,2.721,470,2.379,471,2.155,472,2.155,473,2.721,474,2.721,475,2.721,476,2.721,477,2.721,478,2.721,479,2.379,480,2.721,481,2.721,482,6.142,483,2.721,484,2.721,485,4.174]],["title/classes/DatabaseLogger.html",[36,0.094,486,3.008]],["body/classes/DatabaseLogger.html",[3,0.147,4,0.054,5,0.054,7,0.199,8,0.921,15,0.449,16,0.012,17,1.832,20,0.649,23,1.456,31,0.172,34,1.057,36,0.057,38,0.077,39,0.788,40,0.005,41,0.005,64,0.839,69,1.575,70,1.057,71,1.204,73,1.366,74,3.557,75,0.303,166,1.815,204,1.839,205,1.456,213,1.863,288,1.586,305,2.748,311,1.586,315,1.423,319,1.487,400,0.83,417,4.295,418,3.764,445,1.963,449,3.744,451,4.738,458,4.93,467,2.168,486,3.495,487,6.071,488,2.644,489,4.787,490,4.295,491,3.883,492,3.883,493,4.787,494,4.787,495,3.883,496,3.883,497,3.883,498,2.479,499,2.479,500,6.422,501,2.479,502,3.883,503,3.883,504,2.479,505,5.624,506,2.479,507,2.479,508,2.479,509,2.479,510,4.738,511,3.883,512,2.479,513,3.883,514,2.479,515,2.479,516,5.417,517,2.479,518,2.479,519,2.479,520,3.883,521,2.479,522,4.186,523,2.479,524,2.168,525,2.479]],["title/modules/DatabaseModule.html",[42,1.336,54,2.805]],["body/modules/DatabaseModule.html",[2,2.772,3,0.126,4,0.111,5,0.111,15,0.349,16,0.012,25,2.246,31,0.332,36,0.116,38,0.158,40,0.009,41,0.009,42,2.1,44,2.246,54,4.409,63,3.236,75,0.62,77,3.717,78,3.09,79,1.814,99,3.453,102,3.245,104,3.703,106,3.453,314,3.066,319,1.942,369,2.43,486,4.729,490,4.729,526,5.071,527,3.453,528,6.476,529,5.071,530,5.071,531,5.071,532,5.071,533,4.435,534,5.071,535,5.071,536,5.071,537,5.071,538,5.071,539,5.071]],["title/injectables/ElasticsearchHealthIndicator.html",[269,0.522,540,2.636]],["body/injectables/ElasticsearchHealthIndicator.html",[3,0.112,4,0.098,5,0.098,7,0.359,15,0.411,16,0.012,17,1.545,20,0.574,25,1.984,31,0.297,36,0.102,38,0.14,40,0.008,41,0.008,64,1.291,69,1.175,70,0.967,71,1.102,73,0.938,75,0.547,100,1.919,203,1.24,205,1.363,209,1.603,213,1.202,269,0.758,270,1.32,290,3.547,305,2.571,311,2.866,315,2.571,318,2.339,319,1.716,403,2.287,540,4.299,541,5.876,542,4.906,543,3.917,544,6.719,545,5.972,546,3.917,547,6.715,548,4.479,549,5.972,550,4.479,551,2.866,552,4.067,553,4.479,554,5.972,555,3.271,556,3.271,557,2.866,558,3.05,559,4.479,560,5.972,561,4.479]],["title/controllers/EmailConfirmationController.html",[148,1.524,562,3.262]],["body/controllers/EmailConfirmationController.html",[3,0.104,4,0.091,5,0.091,7,0.334,15,0.391,16,0.012,18,1.676,20,0.546,31,0.322,36,0.095,38,0.13,40,0.008,41,0.008,64,1.229,69,1.118,70,0.921,71,1.049,73,1.191,75,0.509,100,2.147,144,1.595,148,1.541,151,2.276,159,3.803,162,2.725,179,2.276,181,1.652,182,2.665,184,2.665,189,2.665,190,2.665,193,2.276,199,3.915,200,3.915,201,3.298,203,1.153,204,1.227,205,1.267,208,1.267,209,2.316,230,2.665,283,2.867,562,4.502,563,3.642,564,6.083,565,4.972,566,4.972,567,4.164,568,5.079,569,5.685,570,4.164,571,5.685,572,4.164,573,5.685,574,4.164,575,4.164,576,3.298,577,2.665,578,3.298,579,4.164,580,2.518,581,2.665,582,3.642,583,3.298,584,4.164,585,4.164,586,4.164,587,4.164,588,4.164,589,4.164,590,4.164]],["title/classes/EmailConfirmationDto.html",[36,0.094,568,3.008]],["body/classes/EmailConfirmationDto.html",[3,0.141,4,0.123,5,0.123,7,0.451,8,1.641,15,0.388,16,0.012,17,1.591,18,1.661,20,0.541,31,0.249,36,0.158,38,0.216,39,1.144,40,0.01,41,0.01,293,3.588,400,1.887,419,3.836,423,4.183,424,4.426,425,2.941,568,5.466,591,5.478,592,4.927,593,5.634]],["title/guards/EmailConfirmationGuard.html",[594,3.262,595,3.262]],["body/guards/EmailConfirmationGuard.html",[3,0.127,4,0.112,5,0.112,7,0.409,15,0.351,16,0.012,20,0.491,25,2.262,31,0.288,36,0.117,38,0.159,40,0.009,41,0.009,64,1.406,69,1.005,70,0.827,71,0.943,73,1.07,75,0.624,159,3.556,162,2.448,190,3.268,200,3.934,208,1.554,213,1.371,269,0.825,283,2.262,318,2.667,319,1.956,416,3.268,488,3.478,581,3.268,595,5.152,596,5.107,597,4.466,598,7.537,599,6.505,600,6.592,601,5.107,602,3.729,603,3.729,604,5.107,605,5.107,606,5.107,607,5.107]],["title/injectables/EmailConfirmationService.html",[199,2.491,269,0.522]],["body/injectables/EmailConfirmationService.html",[1,1.849,3,0.068,4,0.059,5,0.059,7,0.218,9,3.461,14,1.491,15,0.422,16,0.012,17,1.641,20,0.59,23,1.543,31,0.286,36,0.062,38,0.085,40,0.006,41,0.006,64,0.901,69,1.207,70,0.994,71,1.133,73,1.192,75,0.332,78,2.772,79,0.972,100,2.038,124,2.375,125,2.375,166,0.91,195,2.876,196,1.484,199,2.52,200,3.917,203,1.154,204,1.677,205,1.73,208,2.051,209,2.196,213,1.119,257,1.849,263,2.838,266,2.15,268,2.15,269,0.529,270,0.8,278,5.129,283,2.986,289,1.849,293,2.941,305,1.559,308,1.849,311,1.738,315,1.559,318,3.204,319,2.35,320,3.645,327,2.15,334,3.873,335,2.375,342,3.645,564,4.435,565,2.375,566,3.645,608,2.375,609,4.168,610,4.168,611,4.168,612,2.715,613,3.871,614,2.715,615,4.168,616,2.715,617,4.168,618,2.715,619,4.168,620,2.715,621,4.168,622,2.715,623,4.168,624,2.15,625,3.043,626,2.715,627,4.168,628,3.043,629,2.715,630,3.043,631,2.715,632,2.715,633,2.715,634,2.375,635,2.15,636,1.983,637,4.168,638,5.072,639,4.168,640,2.715,641,2.715,642,2.715,643,2.715,644,2.715,645,2.715,646,2.715,647,2.715,648,2.715,649,2.715,650,2.715]],["title/modules/EmailModule.html",[42,1.336,245,2.636]],["body/modules/EmailModule.html",[3,0.111,4,0.097,5,0.097,16,0.012,31,0.339,36,0.101,38,0.138,40,0.008,41,0.008,42,2.168,44,1.965,45,2.218,46,2.426,47,2.426,48,2.218,49,3.491,50,3.342,58,4.631,59,3.244,60,2.426,61,2.317,63,2.966,75,0.542,77,3.407,79,1.588,144,1.699,199,4.993,201,3.514,245,5.284,251,3.881,257,3.021,278,4.7,283,1.965,613,4.74,624,3.514,651,3.881,652,4.437,653,3.881,654,3.881,655,4.437]],["title/classes/EmailScheduleDto.html",[36,0.094,656,2.805]],["body/classes/EmailScheduleDto.html",[3,0.119,4,0.105,5,0.105,7,0.383,8,1.479,15,0.506,16,0.012,17,1.857,18,2.167,20,0.707,31,0.211,36,0.142,38,0.195,39,0.971,40,0.009,41,0.009,400,1.601,419,4.245,423,4.195,424,4.439,425,2.496,428,4.439,591,6.039,636,5.066,656,4.724,657,4.181,658,5.494,659,6.937,660,4.781,661,6.937,662,4.781,663,6.067,664,4.781,665,4.781]],["title/controllers/EmailSchedulingController.html",[148,1.524,666,3.262]],["body/controllers/EmailSchedulingController.html",[3,0.122,4,0.107,5,0.107,7,0.392,15,0.337,16,0.012,18,1.443,20,0.471,31,0.328,36,0.112,38,0.153,39,0.994,40,0.009,41,0.009,64,1.368,69,0.963,70,0.793,71,0.904,73,1.026,75,0.598,100,2.005,144,1.875,148,1.812,151,2.677,179,2.677,181,1.942,184,3.133,189,3.133,193,2.677,200,3.829,203,1.356,204,1.443,205,1.489,230,3.133,283,2.804,578,3.877,582,4.282,656,5.052,666,5.014,667,4.282,668,6.332,669,5.537,670,4.282,671,4.896,672,4.896,673,5.537,674,4.896,675,5.124,676,4.896,677,4.282,678,4.896,679,4.896,680,4.896]],["title/injectables/EmailSchedulingService.html",[269,0.522,675,3.008]],["body/injectables/EmailSchedulingService.html",[3,0.103,4,0.09,5,0.09,7,0.331,15,0.389,16,0.012,20,0.619,31,0.321,36,0.094,38,0.129,39,0.838,40,0.008,41,0.008,64,1.221,69,1.112,70,0.916,71,1.043,73,1.184,74,3.418,75,0.504,91,3.269,200,4.191,203,1.565,204,1.666,205,1.719,208,1.719,269,0.717,270,1.217,319,2.165,578,3.269,613,4.303,624,3.269,630,3.014,635,3.269,636,3.014,656,4.719,658,3.269,669,4.942,670,4.942,673,3.61,675,4.127,677,3.61,681,3.61,682,6.931,683,4.128,684,7.675,685,4.128,686,4.128,687,4.128,688,4.128,689,4.128,690,4.128,691,4.127,692,4.128,693,4.128,694,5.651,695,4.128,696,4.128,697,4.128,698,4.128,699,4.128,700,4.128]],["title/injectables/EmailService.html",[269,0.522,613,2.364]],["body/injectables/EmailService.html",[3,0.112,4,0.099,5,0.099,7,0.361,8,1.422,14,1.613,15,0.464,16,0.012,20,0.648,31,0.318,36,0.103,38,0.141,39,0.915,40,0.008,41,0.008,64,1.296,69,1.18,70,0.972,71,1.107,73,0.944,75,0.551,78,3.162,79,1.613,102,2.884,104,3.291,203,1.248,204,1.987,205,1.371,213,1.21,269,0.761,270,1.329,453,3.942,557,2.884,613,3.443,701,3.942,702,6.74,703,5.997,704,3.291,705,5.997,706,5.997,707,6.74,708,4.508,709,6.74,710,5.997,711,3.942,712,4.508,713,4.508,714,4.508,715,4.508,716,3.57,717,4.508,718,4.508,719,4.508,720,4.508]],["title/classes/ExceptionsLoggerFilter.html",[36,0.094,87,3.008]],["body/classes/ExceptionsLoggerFilter.html",[3,0.13,4,0.114,5,0.114,7,0.417,15,0.358,16,0.012,20,0.5,31,0.291,36,0.119,38,0.162,40,0.009,41,0.009,64,1.422,69,1.023,70,0.842,71,0.96,73,1.089,74,3.145,75,0.636,86,4.118,87,4.805,102,4.855,166,1.742,315,4.355,400,1.742,403,2.521,721,5.755,722,4.548,723,7.219,724,5.755,725,6.636,726,5.201,727,5.755,728,5.201,729,5.201,730,5.201]],["title/injectables/ExcludeNullInterceptor.html",[269,0.522,731,3.262]],["body/injectables/ExcludeNullInterceptor.html",[3,0.123,4,0.108,5,0.108,7,0.395,15,0.339,16,0.012,20,0.474,31,0.329,36,0.113,38,0.154,40,0.009,41,0.009,64,1.375,69,0.97,70,0.799,71,0.91,73,1.033,75,0.603,213,1.323,269,0.807,270,1.453,416,3.155,488,3.357,600,6.505,731,5.036,732,5.562,733,4.311,734,6.36,735,6.36,736,6.505,737,7.439,738,4.93,739,7.041,740,6.36,741,4.311,742,4.93,743,4.93,744,3.904,745,4.93,746,3.904,747,3.6,748,4.93,749,4.93,750,4.93,751,4.311]],["title/modules/FileModule.html",[42,1.336,752,2.805]],["body/modules/FileModule.html",[3,0.112,4,0.098,5,0.098,9,2.062,16,0.012,31,0.347,36,0.102,38,0.14,40,0.008,41,0.008,42,2.179,44,1.984,45,2.239,46,2.449,47,2.449,48,2.239,49,3.508,50,3.358,59,3.265,60,2.449,61,2.339,63,2.239,75,0.547,77,3.428,79,1.603,144,1.716,204,1.32,369,2.147,527,3.05,752,5.545,753,3.917,754,3.917,755,3.917,756,5.291,757,5.291,758,4.479,759,5.223,760,2.866,761,3.917,762,4.361,763,3.822,764,3.917,765,4.479]],["title/classes/FindOneParams.html",[36,0.094,766,3.008]],["body/classes/FindOneParams.html",[3,0.141,4,0.124,5,0.124,7,0.453,8,1.645,12,2.432,15,0.389,16,0.012,17,1.595,18,1.667,20,0.544,31,0.25,36,0.158,38,0.176,39,1.148,40,0.01,41,0.01,400,1.894,425,2.953,766,5.476,767,5.491,768,5.491,769,4.479,770,7.499,771,5.656]],["title/controllers/GoogleAuthenticationController.html",[148,1.524,772,3.262]],["body/controllers/GoogleAuthenticationController.html",[3,0.111,4,0.097,5,0.097,7,0.356,14,2.123,15,0.305,16,0.012,18,1.308,20,0.426,31,0.316,36,0.101,38,0.138,40,0.008,41,0.008,64,1.283,69,0.873,70,0.719,71,0.819,73,0.93,75,0.542,100,1.91,144,1.699,148,1.642,151,2.426,152,3.798,153,4.883,162,3.748,166,1.486,179,3.244,181,2.652,182,3.798,186,2.839,192,2.043,203,1.229,204,1.308,205,1.35,208,1.35,209,1.588,213,1.191,219,4.334,221,4.7,226,3.514,227,2.839,576,3.514,577,2.839,583,3.514,772,4.7,773,4.7,774,3.514,775,5.19,776,4.437,777,5.213,778,4.437,779,5.935,780,4.437,781,4.437,782,4.883,783,4.437,784,4.437]],["title/injectables/GoogleAuthenticationService.html",[269,0.522,782,3.008]],["body/injectables/GoogleAuthenticationService.html",[3,0.064,4,0.056,5,0.056,7,0.205,8,0.944,14,2.652,15,0.454,16,0.012,17,1.705,20,0.634,31,0.28,36,0.058,38,0.08,40,0.006,41,0.006,64,0.86,69,1.244,70,1.106,71,1.167,73,1.251,75,0.313,78,2.713,79,0.916,100,2.193,153,2.907,166,2,185,3.608,186,1.637,195,2.696,196,1.399,203,1.102,204,1.44,205,1.486,208,2.285,209,2.362,213,1.697,219,4.025,220,2.238,221,4.365,222,2.238,225,2.026,227,1.637,269,0.505,270,0.754,277,2.238,283,2.644,293,2.862,305,2.285,311,1.637,315,1.469,318,2.078,319,1.525,327,2.026,603,2.907,716,3.152,773,5.405,775,2.238,782,2.907,785,2.026,786,4.886,787,3.981,788,3.981,789,3.981,790,3.981,791,3.481,792,3.981,793,2.559,794,3.981,795,2.559,796,3.981,797,2.559,798,3.981,799,2.559,800,3.981,801,2.559,802,3.981,803,2.238,804,1.547,805,2.559,806,2.559,807,3.981,808,2.559,809,3.981,810,2.559,811,2.559,812,2.559,813,2.559,814,3.981,815,2.559,816,2.559,817,2.559,818,2.559,819,2.559,820,2.559,821,2.559,822,2.559,823,2.559,824,2.559,825,2.559,826,2.559,827,2.559,828,2.559,829,2.026,830,2.559,831,2.559,832,2.559]],["title/controllers/HealthController.html",[148,1.524,833,3.008]],["body/controllers/HealthController.html",[3,0.101,4,0.089,5,0.089,7,0.325,16,0.012,18,1.196,20,0.39,31,0.282,36,0.093,38,0.127,39,0.824,40,0.008,41,0.008,64,1.207,73,0.85,75,0.496,144,1.554,148,1.501,151,2.218,203,1.123,204,2.198,213,1.089,338,3.213,540,4.087,542,5.024,555,2.962,833,4.663,834,3.548,835,6.88,836,4.057,837,4.057,838,5.585,839,5.585,840,6.386,841,6.386,842,6.386,843,6.386,844,3.548,845,3.548,846,4.057,847,4.057,848,4.057,849,4.057,850,4.057,851,4.884,852,3.548,853,4.884,854,5.585,855,5.585,856,4.057,857,4.057,858,5.585,859,6.88,860,5.585,861,4.057,862,4.057,863,4.057,864,4.057,865,4.057,866,4.057,867,4.057,868,3.548,869,4.057,870,4.057,871,4.057,872,4.057,873,4.057]],["title/modules/HealthModule.html",[42,1.336,55,2.805]],["body/modules/HealthModule.html",[3,0.119,4,0.105,5,0.105,16,0.012,31,0.346,36,0.109,38,0.149,39,0.971,40,0.009,41,0.009,42,2.25,44,2.117,45,2.389,46,2.614,47,2.614,48,2.389,49,3.622,50,2.389,55,5.499,59,3.408,60,2.614,61,2.496,63,3.116,75,0.584,144,2.388,540,5.003,542,3.491,555,3.491,833,5.066,844,4.181,845,4.181,874,4.181,875,4.181,876,4.181,877,5.003,878,4.781,879,4.781,880,6.234,881,6.234,882,4.181,883,4.181]],["title/classes/HttpExceptionFilter.html",[36,0.094,884,3.262]],["body/classes/HttpExceptionFilter.html",[3,0.118,4,0.103,5,0.103,7,0.378,15,0.325,16,0.012,20,0.453,31,0.273,36,0.108,38,0.147,40,0.009,41,0.009,64,1.336,69,0.928,70,0.764,71,0.871,73,0.988,74,2.853,75,0.577,102,4.41,162,2.962,168,3.737,192,2.172,208,2.31,315,3.956,319,1.807,400,1.58,404,4.68,416,3.018,418,3.955,488,4.208,510,4.125,724,5.405,725,6.397,727,4.125,884,4.894,885,5.405,886,4.125,887,6.893,888,4.717,889,4.717,890,4.717,891,4.717,892,4.717,893,6.18,894,4.717,895,4.717,896,4.717,897,4.125,898,4.717]],["title/classes/ImageProcessor.html",[36,0.094,899,2.805]],["body/classes/ImageProcessor.html",[3,0.109,4,0.095,5,0.095,7,0.47,15,0.3,16,0.012,18,1.284,20,0.419,31,0.327,36,0.099,38,0.136,40,0.008,41,0.008,64,1.267,69,0.857,70,0.706,71,0.804,73,0.912,93,2.966,100,1.892,166,1.459,208,2.317,209,1.558,213,1.573,319,1.668,400,1.459,552,2.966,691,5.4,851,3.809,899,3.991,900,3.809,901,5.861,902,5.861,903,5.861,904,4.356,905,4.356,906,5.861,907,3.809,908,5.126,909,3.449,910,5.794,911,5.861,912,3.809,913,4.356,914,3.18,915,3.449,916,4.356,917,4.356,918,4.356,919,4.356,920,4.356,921,4.356,922,4.356,923,4.356,924,4.356,925,4.356,926,4.356,927,4.356,928,4.356,929,4.356,930,4.356,931,4.356,932,3.809,933,4.356]],["title/injectables/JwtAuthenticationGuard.html",[193,2.252,269,0.522]],["body/injectables/JwtAuthenticationGuard.html",[3,0.149,4,0.131,5,0.131,16,0.012,31,0.317,36,0.137,38,0.187,39,1.216,40,0.01,41,0.01,75,0.732,193,3.925,253,3.127,269,0.911,270,1.766,403,2.294,580,3.622,934,4.744,935,4.374,936,4.744]],["title/injectables/JwtRefreshGuard.html",[197,3.008,269,0.522]],["body/injectables/JwtRefreshGuard.html",[3,0.148,4,0.13,5,0.13,16,0.012,31,0.316,36,0.136,38,0.185,39,1.206,40,0.01,41,0.01,75,0.726,156,4.045,197,5.216,253,3.101,269,0.906,270,1.751,293,2.847,403,2.275,580,3.592,935,4.337,936,4.704,937,5.195]],["title/injectables/JwtRefreshTokenStrategy.html",[269,0.522,938,3.262]],["body/injectables/JwtRefreshTokenStrategy.html",[3,0.099,4,0.087,5,0.087,7,0.318,15,0.378,16,0.012,20,0.528,25,1.756,31,0.336,36,0.091,38,0.124,40,0.008,41,0.008,64,1.188,69,1.082,70,0.891,71,1.015,73,0.831,75,0.485,78,3.044,79,1.419,100,1.803,156,4.64,162,3.639,166,1.329,192,1.826,195,3.238,196,2.168,203,1.522,204,1.621,205,1.673,208,1.207,213,1.476,253,2.071,269,0.697,270,1.169,293,2.635,307,4.121,308,2.701,334,4.297,403,1.519,558,2.701,704,2.896,829,4.354,938,4.354,939,4.998,940,3.469,941,4.015,942,3.966,943,5.498,944,3.966,945,3.141,946,4.015,947,2.701,948,4.015,949,4.015,950,3.141,951,3.141,952,3.966,953,3.141,954,3.966,955,3.966,956,3.966,957,3.966,958,3.966]],["title/injectables/JwtStrategy.html",[246,2.805,269,0.522]],["body/injectables/JwtStrategy.html",[3,0.107,4,0.094,5,0.094,7,0.343,15,0.398,16,0.012,20,0.556,31,0.343,36,0.098,38,0.133,40,0.008,41,0.008,64,1.251,69,1.139,70,0.938,71,1.069,73,0.896,75,0.523,78,3.115,79,1.53,100,1.875,162,3.146,166,1.432,192,1.969,195,3.304,196,2.338,203,1.603,204,1.707,205,1.761,213,1.554,246,3.942,253,2.233,264,3.387,269,0.734,270,1.261,293,2.05,307,4.253,308,2.912,334,2.912,403,1.638,558,2.912,704,3.123,941,4.228,945,3.387,946,3.123,947,2.912,948,3.123,949,3.123,950,3.387,951,3.387,953,3.387,959,3.74,960,4.277,961,5.063,962,4.277,963,3.74,964,3.74,965,3.74]],["title/injectables/JwtTwoFactorGuard.html",[269,0.522,966,3.008]],["body/injectables/JwtTwoFactorGuard.html",[3,0.148,4,0.129,5,0.129,16,0.012,31,0.315,36,0.135,38,0.185,39,1.201,40,0.01,41,0.01,75,0.723,253,3.088,259,4.559,260,3.577,269,0.904,270,1.744,403,2.266,580,3.577,935,4.319,936,4.684,966,5.203,967,5.173]],["title/injectables/JwtTwoFactorStrategy.html",[269,0.522,968,3.262]],["body/injectables/JwtTwoFactorStrategy.html",[3,0.1,4,0.087,5,0.087,7,0.32,14,2.265,15,0.38,16,0.012,20,0.531,31,0.336,36,0.091,38,0.124,40,0.008,41,0.008,64,1.193,69,1.086,70,0.894,71,1.019,73,0.836,75,0.487,78,3.05,79,1.427,100,1.808,162,3.034,166,1.336,192,1.836,195,3.243,196,2.181,203,1.528,204,1.627,205,1.679,208,1.213,209,1.427,213,1.699,229,3.488,253,2.083,259,4.371,260,2.412,264,3.159,269,0.7,270,1.176,293,1.912,307,4.131,308,2.716,334,2.716,403,1.528,558,2.716,704,2.913,939,5.012,941,4.03,945,3.159,946,4.03,947,2.716,948,4.03,949,4.03,950,3.159,951,3.159,953,3.159,961,4.827,964,3.488,965,3.488,968,4.371,969,3.488,970,3.989,971,3.989,972,3.989]],["title/injectables/LocalAuthenticationGuard.html",[187,3.008,269,0.522]],["body/injectables/LocalAuthenticationGuard.html",[3,0.15,4,0.132,5,0.132,16,0.012,31,0.318,36,0.137,38,0.188,40,0.01,41,0.01,75,0.735,187,5.256,253,3.141,269,0.913,270,1.773,403,2.304,934,4.764,935,4.392,973,5.261,974,6.015]],["title/injectables/LocalStrategy.html",[247,2.805,269,0.522]],["body/injectables/LocalStrategy.html",[3,0.115,4,0.101,5,0.101,7,0.371,14,1.655,15,0.42,16,0.012,17,1.782,20,0.586,31,0.334,36,0.106,38,0.144,40,0.009,41,0.009,64,1.318,69,1.2,70,0.988,71,1.126,73,0.969,75,0.565,100,1.95,185,4.236,186,2.959,203,1.281,213,1.241,247,4.154,253,2.415,269,0.774,270,1.363,283,2.702,314,4.389,403,1.771,552,4.154,557,2.959,558,3.149,804,2.797,941,4.454,946,3.377,947,3.149,949,3.377,963,4.045,975,4.045,976,4.625,977,4.625,978,6.1,979,4.625,980,4.045,981,4.625,982,4.625]],["title/entities/Log.html",[0,1.757,449,2.364]],["body/entities/Log.html",[0,2.542,2,2.441,3,0.111,4,0.098,5,0.098,7,0.358,8,1.414,9,3.805,12,2.175,15,0.513,16,0.012,17,1.764,18,2.198,19,4.639,20,0.717,23,1.813,25,2.639,31,0.197,33,4.057,34,1.904,36,0.102,38,0.139,39,0.907,40,0.008,41,0.008,416,4.292,417,4.898,418,4.292,449,3.85,658,4.72,983,3.905,984,6.708,985,3.905,986,4.465,987,6.708,988,4.465,989,4.465,990,4.465,991,4.465,992,3.905]],["title/modules/LoggerModule.html",[42,1.336,56,2.805]],["body/modules/LoggerModule.html",[3,0.12,4,0.105,5,0.105,16,0.012,31,0.346,36,0.11,38,0.15,40,0.009,41,0.009,42,2.253,44,2.124,45,2.397,46,2.622,47,2.622,48,2.397,49,3.628,50,3.473,56,5.563,59,3.416,60,2.622,61,2.504,63,2.397,75,0.586,77,3.586,79,1.716,369,2.299,443,5.688,447,5.008,449,2.753,470,4.195,490,3.503,527,3.266,993,4.195,994,4.195,995,4.195,996,4.797,997,4.797,998,4.195,999,4.797]],["title/injectables/LogsMiddleware.html",[94,3.008,269,0.522]],["body/injectables/LogsMiddleware.html",[3,0.104,4,0.091,5,0.091,7,0.334,8,1.348,15,0.286,16,0.012,20,0.546,31,0.251,36,0.095,38,0.13,39,1.154,40,0.008,41,0.008,64,1.229,69,0.819,70,0.675,71,0.769,73,0.872,74,2.518,75,0.509,94,4.727,162,3.602,168,4.736,192,1.917,204,1.908,205,1.969,208,1.969,213,1.738,269,0.721,270,1.227,288,2.665,319,2.178,418,2.665,488,2.835,490,5.079,522,3.642,524,3.642,736,6.083,852,4.972,897,6.083,1000,3.642,1001,5.685,1002,6.956,1003,4.164,1004,5.685,1005,4.164,1006,5.685,1007,4.164,1008,5.685,1009,5.685,1010,5.685,1011,4.164,1012,4.164,1013,4.164]],["title/injectables/LogsService.html",[269,0.522,447,2.636]],["body/injectables/LogsService.html",[3,0.115,4,0.101,5,0.101,7,0.369,15,0.419,16,0.012,20,0.585,25,2.041,31,0.333,34,1.966,36,0.105,38,0.144,39,0.936,40,0.009,41,0.009,64,1.316,69,1.198,70,0.986,71,1.124,73,0.966,75,0.563,100,1.947,166,1.544,203,1.685,204,1.359,208,1.402,209,2.178,213,1.237,269,0.772,270,1.359,353,4.384,368,2.95,369,2.21,377,3.139,413,5.293,447,3.895,449,3.494,998,4.032,1014,4.032,1015,6.087,1016,4.61,1017,4.61,1018,6.087,1019,6.087,1020,4.61,1021,4.61,1022,4.61,1023,6.087,1024,4.61,1025,4.61,1026,4.61,1027,4.61]],["title/controllers/OptimizeController.html",[148,1.524,1028,3.008]],["body/controllers/OptimizeController.html",[3,0.094,4,0.082,5,0.082,7,0.302,12,1.99,15,0.365,16,0.012,17,1.412,18,1.563,20,0.51,31,0.322,36,0.086,38,0.118,40,0.007,41,0.007,64,1.146,69,1.043,70,0.859,71,0.979,73,1.111,75,0.46,93,2.565,100,2.081,144,1.443,148,1.394,151,2.059,166,1.776,168,4.405,181,1.494,183,2.75,192,2.442,204,1.11,205,1.146,208,2.136,209,2.196,213,1.648,577,2.41,691,4.482,909,2.983,914,4.482,915,4.861,1028,3.872,1029,3.294,1030,3.294,1031,5.303,1032,5.303,1033,3.767,1034,5.303,1035,3.767,1036,3.767,1037,3.767,1038,3.767,1039,3.767,1040,2.983,1041,3.767,1042,3.767,1043,2.983,1044,5.303,1045,3.767,1046,4.2,1047,3.767,1048,3.767,1049,3.767,1050,3.767,1051,3.767,1052,3.767,1053,3.767,1054,3.767,1055,3.767,1056,3.767,1057,3.767,1058,3.767,1059,3.767,1060,5.303,1061,3.767,1062,3.767,1063,3.294,1064,3.767,1065,3.767,1066,3.767]],["title/modules/OptimizeModule.html",[42,1.336,1067,3.262]],["body/modules/OptimizeModule.html",[3,0.129,4,0.113,5,0.113,16,0.012,31,0.346,36,0.118,38,0.162,40,0.009,41,0.009,42,2.129,44,2.295,49,2.705,50,2.59,63,2.59,70,1.064,75,0.633,92,4.532,93,3.528,144,2.515,338,5.199,899,4.471,932,4.532,1028,5.263,1030,4.532,1067,5.199,1068,5.182,1069,5.182,1070,5.182,1071,4.532,1072,5.182,1073,5.182,1074,5.182,1075,5.182]],["title/classes/PaginationParams.html",[36,0.094,1076,3.008]],["body/classes/PaginationParams.html",[3,0.125,4,0.11,5,0.11,7,0.402,8,1.526,15,0.533,16,0.012,18,1.896,20,0.618,23,2.41,31,0.284,36,0.162,38,0.157,40,0.009,41,0.009,71,1.382,400,1.68,425,2.619,769,3.973,1076,4.696,1077,5.622,1078,5.184,1079,5.184,1080,5.017,1081,5.017,1082,5.017,1083,5.017,1084,7.099,1085,5.017,1086,7.099,1087,3.973,1088,5.017,1089,5.017]],["title/entities/Post.html",[0,1.757,181,1.634]],["body/entities/Post.html",[0,2.266,2,2.065,3,0.094,4,0.083,5,0.083,7,0.493,8,1.26,9,3.832,12,1.993,14,2.515,15,0.502,16,0.012,17,1.677,18,2.149,19,4.251,20,0.701,23,1.616,24,2.572,25,3.113,31,0.272,33,3.213,34,1.611,36,0.086,37,2.572,38,0.118,39,0.767,40,0.007,41,0.007,181,2.438,370,5.1,395,3.303,398,4.647,428,3.933,429,5.376,430,4.488,804,2.284,1090,3.303,1091,5.133,1092,6.147,1093,3.777,1094,5.313,1095,3.777,1096,5.313,1097,4.647,1098,4.647,1099,3.777,1100,3.777,1101,3.777,1102,3.777,1103,5.313,1104,3.777,1105,3.777,1106,5.313,1107,4.647,1108,3.777]],["title/controllers/PostController.html",[148,1.524,1109,3.008]],["body/controllers/PostController.html",[3,0.077,4,0.068,5,0.068,7,0.247,12,2.206,15,0.446,16,0.012,17,1.778,18,1.913,20,0.624,31,0.327,36,0.07,38,0.096,40,0.006,41,0.006,64,0.992,69,1.277,70,1.051,71,1.198,73,1.36,75,0.377,144,1.182,148,1.143,151,1.688,159,3.319,179,2.51,180,2.445,181,2.175,182,4.153,184,1.975,189,1.975,190,1.975,193,1.688,205,0.939,213,1.826,214,2.445,230,1.975,259,1.975,347,2.777,348,4.342,349,3.636,350,3.353,351,3.353,360,2.445,362,2.445,364,2.445,375,2.445,377,2.102,426,4.353,505,3.636,557,1.975,577,1.975,580,2.777,581,1.975,966,2.254,1040,2.445,1076,4.433,1077,2.445,1078,4.003,1079,3.353,1109,3.353,1110,2.7,1111,2.7,1112,3.087,1113,3.087,1114,3.087,1115,2.445,1116,3.087,1117,3.087,1118,3.733,1119,3.087,1120,3.087,1121,4.592,1122,3.087,1123,4.928,1124,4.592,1125,3.087,1126,3.087,1127,3.087,1128,3.508,1129,2.7,1130,3.636,1131,2.7,1132,3.087,1133,2.445,1134,2.445,1135,3.087,1136,3.087,1137,3.087,1138,3.087,1139,3.087,1140,4.592,1141,3.087,1142,3.087,1143,3.087,1144,3.087,1145,3.087,1146,3.087,1147,3.087,1148,3.087,1149,3.087,1150,3.087]],["title/modules/PostModule.html",[42,1.336,57,2.805]],["body/modules/PostModule.html",[3,0.099,4,0.087,5,0.087,16,0.012,31,0.355,36,0.09,38,0.123,40,0.008,41,0.008,42,2.043,44,1.752,45,1.977,46,2.162,47,2.162,48,1.977,49,3.29,50,1.977,57,5.518,59,3,60,2.162,61,2.065,63,3.149,75,0.483,77,3.15,78,2.798,79,1.415,99,2.693,101,3.132,102,2.531,103,3.459,104,2.888,106,2.693,144,2.102,181,1.569,245,4.734,261,3.459,367,2.888,369,1.896,527,2.693,877,4.734,883,3.459,1109,4.601,1128,4.734,1129,3.459,1133,3.132,1134,4.346,1151,3.459,1152,3.955,1153,3.459,1154,4.734,1155,3.955,1156,3.955,1157,3.955,1158,3.459,1159,3.955,1160,5.488,1161,3.459,1162,4.799,1163,3.955,1164,3.955,1165,3.955,1166,3.955,1167,3.955]],["title/classes/PostNotFoundException.html",[36,0.094,1168,3.008]],["body/classes/PostNotFoundException.html",[3,0.138,4,0.121,5,0.121,12,1.798,15,0.382,16,0.012,20,0.533,23,2.261,31,0.245,36,0.127,38,0.173,39,1.126,40,0.01,41,0.01,69,1.091,70,0.898,71,1.024,75,0.678,203,1.536,400,1.857,402,4.05,403,2.624,404,4.757,406,4.392,409,4.392,1168,5.428,1169,5.991,1170,6.851,1171,5.991,1172,5.546]],["title/interfaces/PostSearchBody.html",[1173,2.059,1174,3.008]],["body/interfaces/PostSearchBody.html",[3,0.135,4,0.118,5,0.118,7,0.433,8,1.598,12,2.494,15,0.529,16,0.012,17,1.856,23,2.455,40,0.009,41,0.009,428,4.921,430,5.615,1118,3.676,1173,2.698,1174,4.919,1175,3.454,1176,4.275,1177,4.721,1178,6.726]],["title/interfaces/PostSearchResult.html",[1173,2.059,1179,3.262]],["body/interfaces/PostSearchResult.html",[3,0.146,4,0.128,5,0.128,7,0.468,8,1.677,15,0.523,16,0.012,23,1.777,40,0.01,41,0.01,1118,3.978,1173,2.92,1175,3.738,1176,4.627,1179,5.601,1180,5.109,1181,7.079,1182,7.072,1183,5.842,1184,5.842]],["title/injectables/PostsSearchService.html",[269,0.522,1154,2.636]],["body/injectables/PostsSearchService.html",[3,0.069,4,0.061,5,0.061,7,0.561,8,1.005,12,2.009,15,0.449,16,0.012,17,1.323,20,0.628,23,2.184,31,0.227,36,0.063,38,0.087,39,0.86,40,0.008,41,0.006,64,0.915,69,1.219,70,1.004,71,1.144,73,1.205,75,0.339,100,2.158,166,1.721,179,3.145,181,2.848,203,0.768,205,0.844,208,1.885,209,0.992,213,1.544,269,0.537,270,0.818,288,2.711,350,3.093,351,3.093,367,2.025,384,2.884,428,3.288,430,3.752,458,3.093,505,4.555,546,2.426,547,5.712,551,1.775,556,2.025,557,1.775,630,3.093,1063,2.426,1078,4.2,1079,4.2,1118,2.884,1154,2.711,1171,3.705,1174,2.025,1178,3.705,1181,2.426,1185,5.942,1186,2.426,1187,4.236,1188,4.236,1189,4.236,1190,2.774,1191,4.236,1192,2.774,1193,4.236,1194,2.774,1195,4.236,1196,2.774,1197,2.774,1198,5.752,1199,5.139,1200,4.236,1201,4.236,1202,4.236,1203,2.774,1204,2.774,1205,2.774,1206,2.774,1207,2.774,1208,2.426,1209,2.426,1210,3.705,1211,2.774,1212,2.774,1213,2.774,1214,2.774,1215,4.236,1216,2.774,1217,5.139,1218,2.774,1219,2.774,1220,2.774]],["title/injectables/PostsService.html",[269,0.522,1128,2.636]],["body/injectables/PostsService.html",[3,0.058,4,0.051,5,0.051,7,0.187,12,2.066,14,2.365,15,0.438,16,0.012,17,1.058,20,0.612,23,2.4,31,0.308,34,0.995,36,0.053,38,0.073,40,0.006,41,0.005,64,0.8,69,1.253,70,1.032,71,1.176,73,1.274,75,0.285,100,2.21,166,1.913,181,2.078,203,1.025,204,1.356,208,1.938,209,2.592,213,1.632,269,0.469,270,0.687,283,1.639,318,2.402,319,1.762,347,2.238,348,2.931,349,2.931,350,2.702,351,2.702,353,3.167,360,2.931,362,2.931,364,2.931,367,1.703,368,1.492,369,1.118,374,1.847,375,1.847,377,1.588,378,2.04,383,3.359,384,1.588,389,2.04,391,2.04,426,3.89,428,1.492,458,4.171,613,3.657,630,2.702,635,1.847,636,1.703,804,1.41,1078,4.827,1079,4.439,1091,3.825,1111,3.236,1123,4.501,1128,2.368,1130,2.931,1154,4.077,1158,2.04,1168,1.703,1208,2.04,1209,2.04,1210,3.236,1221,2.04,1222,3.701,1223,2.332,1224,2.332,1225,3.701,1226,2.332,1227,3.701,1228,2.332,1229,2.332,1230,2.332,1231,3.701,1232,2.332,1233,2.332,1234,2.332,1235,2.332,1236,3.701,1237,2.332,1238,2.332,1239,2.332,1240,2.332,1241,2.332,1242,3.236,1243,2.04,1244,2.04,1245,3.701,1246,3.701,1247,2.332,1248,2.332,1249,3.701,1250,4.601,1251,2.332,1252,4.601,1253,2.332,1254,2.332,1255,2.332,1256,2.332,1257,2.332,1258,2.332,1259,2.332,1260,2.332,1261,2.332]],["title/entities/PrivateFile.html",[0,1.757,763,2.636]],["body/entities/PrivateFile.html",[0,2.636,2,2.579,3,0.118,4,0.103,5,0.103,7,0.378,8,1.466,9,3.75,12,2.235,14,2.717,15,0.474,16,0.012,17,1.421,18,2.032,19,4.168,20,0.662,23,1.88,31,0.273,33,4.168,34,2.012,36,0.108,38,0.147,39,0.958,40,0.009,41,0.009,551,4.41,763,4.41,804,2.853,1107,5.405,1262,5.792,1263,3.736,1264,6.64,1265,4.717,1266,4.717,1267,4.717,1268,6.18,1269,4.717]],["title/injectables/PrivateFileService.html",[269,0.522,756,2.636]],["body/injectables/PrivateFileService.html",[3,0.104,4,0.06,5,0.06,7,0.219,9,3.291,12,1.357,15,0.393,16,0.012,17,1.493,20,0.548,23,1.975,31,0.299,34,1.165,36,0.062,38,0.085,40,0.006,41,0.006,64,0.905,69,1.122,70,0.924,71,1.053,73,1.066,75,0.334,78,2.778,79,0.977,100,2.042,166,1.705,179,1.493,203,1.159,204,1.234,205,0.831,208,2.056,209,2.042,213,1.366,269,0.531,270,0.805,318,1.426,319,2.185,330,4.031,353,3.451,368,1.748,369,1.309,383,1.994,404,2.679,551,4.154,552,1.86,756,2.679,762,1.994,763,1.748,764,2.388,1046,3.315,1264,3.661,1270,4.872,1271,2.163,1272,4.186,1273,3.315,1274,5.09,1275,2.731,1276,2.388,1277,4.186,1278,4.186,1279,2.731,1280,4.186,1281,2.731,1282,3.315,1283,2.731,1284,4.031,1285,5.706,1286,4.518,1287,2.388,1288,4.451,1289,4.99,1290,4.031,1291,6.251,1292,2.163,1293,2.163,1294,2.731,1295,4.451,1296,4.451,1297,4.451,1298,4.451,1299,4.451,1300,4.451,1301,4.451,1302,4.451,1303,4.451,1304,2.388,1305,2.388,1306,4.451,1307,5.09,1308,4.186,1309,2.731,1310,2.388,1311,2.731,1312,5.09,1313,2.731,1314,2.731,1315,2.731,1316,2.731,1317,2.731]],["title/entities/PublicFile.html",[0,1.757,760,2.636]],["body/entities/PublicFile.html",[0,2.688,2,2.658,3,0.121,4,0.106,5,0.106,7,0.39,8,1.495,9,3.771,12,2.268,15,0.481,16,0.012,17,1.702,18,2.062,19,4.636,20,0.672,23,1.917,24,3.311,25,2.791,31,0.215,33,3.812,34,2.074,36,0.111,37,3.311,38,0.152,39,0.987,40,0.009,41,0.009,551,4.476,628,5.107,760,4.476,1263,3.851,1318,5.86,1319,4.862,1320,4.862,1321,4.862]],["title/injectables/PublicFileService.html",[269,0.522,757,2.636]],["body/injectables/PublicFileService.html",[3,0.074,4,0.065,5,0.117,7,0.237,9,1.359,12,1.44,15,0.409,16,0.012,17,1.228,20,0.571,23,2.035,31,0.307,34,1.259,36,0.067,38,0.092,40,0.006,41,0.006,64,0.96,69,1.168,70,0.962,71,1.096,73,1.118,75,0.361,78,2.854,79,1.056,100,2.087,166,0.989,179,1.614,203,1.23,204,1.309,205,0.898,208,2.111,209,2.555,213,0.792,269,0.563,270,0.87,319,2.045,330,2.338,353,3.591,368,1.889,369,1.415,500,5.497,551,3.8,552,3.635,628,2.156,757,2.842,760,1.889,761,2.582,762,2.156,1271,2.338,1276,2.582,1282,5.298,1284,4.228,1286,4.703,1287,2.582,1288,3.884,1289,3.884,1290,4.228,1291,6.51,1292,2.338,1293,2.338,1295,2.582,1296,2.582,1297,2.582,1298,2.582,1299,2.582,1300,2.582,1301,2.582,1302,2.582,1303,2.582,1304,2.582,1305,2.582,1306,4.669,1310,2.582,1322,5.043,1323,4.441,1324,5.338,1325,4.441,1326,2.952,1327,4.441,1328,4.441,1329,2.952,1330,2.952,1331,2.952,1332,4.441,1333,2.952,1334,4.441,1335,2.952,1336,2.582,1337,4.441,1338,2.952,1339,2.952,1340,2.952,1341,2.952,1342,4.441,1343,3.884,1344,2.952,1345,2.952,1346,2.952,1347,2.952]],["title/classes/RegisterDto.html",[36,0.094,175,2.805]],["body/classes/RegisterDto.html",[3,0.127,4,0.111,5,0.111,7,0.408,8,1.539,15,0.492,16,0.012,17,1.828,18,2.107,20,0.687,31,0.225,36,0.148,38,0.203,39,1.033,40,0.009,41,0.009,70,1.158,175,4.866,283,3.165,314,4.322,400,1.704,423,4.552,424,4.153,425,2.657,663,6.25,1348,4.45,1349,5.089,1350,5.089,1351,5.089,1352,5.089,1353,5.089,1354,5.089]],["title/interfaces/RequestWithUser.html",[159,2.252,1173,2.059]],["body/interfaces/RequestWithUser.html",[3,0.142,4,0.124,5,0.124,7,0.455,8,1.649,14,2.989,15,0.391,16,0.012,31,0.307,38,0.177,39,1.153,40,0.01,41,0.01,159,4.107,162,3.6,192,2.614,403,2.662,581,3.634,804,3.434,1173,2.838,1175,3.634,1355,4.966]],["title/modules/SearchModule.html",[42,1.336,877,2.636]],["body/modules/SearchModule.html",[3,0.132,4,0.116,5,0.116,16,0.012,31,0.322,36,0.121,38,0.165,40,0.009,41,0.009,42,2.159,44,2.346,50,2.648,63,3.327,75,0.647,77,4.179,78,3.14,79,1.895,99,3.607,100,1.513,106,3.607,314,3.204,533,4.633,556,3.868,716,4.195,877,4.26,1356,5.298,1357,6.658,1358,5.298,1359,5.298,1360,5.298,1361,5.298,1362,5.298]],["title/interfaces/TokenPayload.html",[307,2.491,1173,2.059]],["body/interfaces/TokenPayload.html",[3,0.143,4,0.126,5,0.126,7,0.461,8,1.661,15,0.482,16,0.011,23,2.297,38,0.179,39,1.167,40,0.01,41,0.01,286,6.874,289,5.352,307,4.567,602,5.514,1173,2.873,1175,3.678,1363,5.027,1364,4.552]],["title/classes/TokenVerificationDto.html",[36,0.094,777,3.008]],["body/classes/TokenVerificationDto.html",[3,0.141,4,0.123,5,0.123,7,0.451,8,1.641,15,0.388,16,0.012,17,1.591,18,1.661,20,0.541,31,0.249,36,0.158,38,0.216,39,1.144,40,0.01,41,0.01,293,3.588,400,1.887,419,3.836,423,4.183,424,4.426,425,2.941,777,5.466,1365,6.049,1366,4.927,1367,5.634]],["title/classes/TwoFactorAuthenticationCodeDto.html",[36,0.094,1368,3.008]],["body/classes/TwoFactorAuthenticationCodeDto.html",[3,0.139,4,0.122,5,0.122,7,0.448,8,1.633,15,0.385,16,0.012,17,1.583,18,1.648,20,0.537,31,0.247,36,0.157,38,0.215,39,1.135,40,0.01,41,0.01,152,4.405,260,4.163,400,1.872,423,4.511,425,2.918,1368,5.447,1369,6.02,1370,4.888,1371,5.907,1372,5.589]],["title/controllers/TwoFactorAuthenticationController.html",[148,1.524,250,3.008]],["body/controllers/TwoFactorAuthenticationController.html",[3,0.074,4,0.065,5,0.065,7,0.238,15,0.369,16,0.012,18,1.579,20,0.515,25,1.316,31,0.316,36,0.068,38,0.093,40,0.006,41,0.006,64,0.964,69,1.054,70,0.868,71,0.989,73,1.123,75,0.363,100,2.091,144,1.138,148,1.1,151,1.624,152,3.429,153,3.913,157,3.534,158,2.598,159,4.076,162,3.43,166,1.495,168,4.206,179,2.929,180,2.353,181,1.178,182,3.812,183,2.169,184,1.901,185,2.929,186,2.855,189,1.901,190,1.901,192,1.368,193,1.624,194,2.598,195,1.903,196,1.624,203,0.823,204,1.579,205,1.63,206,2.353,208,1.812,209,1.597,213,1.198,214,3.534,218,5.21,219,3.258,226,2.353,227,1.901,230,3.429,248,3.429,250,3.258,259,1.901,260,4.055,318,2.33,319,1.709,576,2.353,577,1.901,583,2.353,603,2.169,774,2.353,1115,3.534,1368,5.079,1371,4.717,1373,4.717,1374,2.971,1375,4.686,1376,2.971,1377,2.971,1378,2.971,1379,2.971,1380,2.971,1381,2.971,1382,4.462,1383,2.971,1384,2.971,1385,2.971,1386,2.971,1387,2.971,1388,2.971,1389,2.971,1390,3.902,1391,2.971,1392,2.971,1393,5.957,1394,4.462,1395,4.462,1396,4.462,1397,2.971,1398,2.971,1399,2.971,1400,2.598]],["title/injectables/TwoFactorAuthenticationService.html",[248,2.636,269,0.522]],["body/injectables/TwoFactorAuthenticationService.html",[3,0.085,4,0.075,5,0.075,7,0.274,9,3.496,14,2.794,15,0.439,16,0.012,17,1.623,20,0.613,31,0.322,36,0.078,38,0.107,40,0.007,41,0.007,64,1.07,69,1.255,70,1.033,71,1.177,73,1.219,75,0.418,78,2.991,79,1.224,100,2.015,166,1.659,168,3.857,192,1.575,195,2.72,196,1.871,203,1.371,204,1.46,205,1.506,206,3.922,208,1.506,209,1.224,213,1.562,225,2.71,248,3.169,260,4.093,263,4.343,269,0.628,270,1.009,293,1.64,785,2.71,791,2.993,804,2.069,1046,2.71,1371,4.609,1373,5.36,1390,6.17,1401,4.952,1402,5.82,1403,4.952,1404,3.422,1405,4.952,1406,3.422,1407,3.422,1408,3.422,1409,4.952,1410,3.422,1411,3.422,1412,2.993,1413,3.422,1414,2.993,1415,3.422,1416,3.422,1417,3.422,1418,3.422,1419,3.422,1420,3.422,1421,3.422,1422,3.422]],["title/classes/UpdateCategoryDto.html",[36,0.094,365,3.008]],["body/classes/UpdateCategoryDto.html",[3,0.141,4,0.123,5,0.123,7,0.451,8,1.641,12,2.427,15,0.388,16,0.012,20,0.541,23,2.104,31,0.306,36,0.129,38,0.216,39,1.144,40,0.01,41,0.01,347,3.407,357,3.836,365,5.466,376,4.927,400,1.887,403,2.158,411,4.461,1423,5.478,1424,5.634,1425,4.461,1426,4.114,1427,4.114,1428,5.634]],["title/classes/UpdatePostDto.html",[36,0.094,1123,2.805]],["body/classes/UpdatePostDto.html",[3,0.139,4,0.122,5,0.122,7,0.448,8,1.633,12,2.419,15,0.385,16,0.012,20,0.537,23,2.094,31,0.304,36,0.128,38,0.215,39,1.135,40,0.01,41,0.01,347,3.38,400,1.872,403,2.141,426,3.577,427,4.426,1123,5.079,1130,4.426,1423,5.451,1425,4.426,1426,4.081,1427,4.081,1429,5.589,1430,5.589]],["title/classes/UpdateUserDto.html",[36,0.094,1431,3.262]],["body/classes/UpdateUserDto.html",[3,0.149,4,0.131,5,0.131,16,0.012,31,0.317,36,0.137,38,0.187,40,0.01,41,0.01,347,3.622,400,2.006,403,2.294,437,4.079,439,4.744,1425,4.744,1426,4.374,1427,4.374,1431,5.686,1432,5.239,1433,5.239,1434,5.99]],["title/entities/User.html",[0,1.757,14,1.474]],["body/entities/User.html",[0,1.712,1,4.512,2,1.414,3,0.065,4,0.057,5,0.108,7,0.207,8,0.952,9,3.879,12,1.595,14,1.76,15,0.518,16,0.012,17,1.653,18,2.22,19,4.347,20,0.724,23,1.221,24,1.761,25,3.374,28,2.262,31,0.281,32,4.302,33,2.428,34,1.103,36,0.092,37,1.761,38,0.081,39,1.126,40,0.006,41,0.006,70,0.797,71,1.264,181,2.628,283,2.179,290,5.03,314,2.975,384,3.35,602,4.638,760,3.548,762,2.931,763,3.84,914,3.592,985,3.511,992,4.849,1087,2.049,1097,4.849,1098,3.511,1262,2.049,1318,2.049,1435,2.262,1436,4.302,1437,4.302,1438,4.302,1439,4.302,1440,4.302,1441,4.302,1442,2.587,1443,2.587,1444,2.587,1445,2.587,1446,2.587,1447,2.587,1448,2.587,1449,2.587,1450,4.014,1451,4.014,1452,2.587,1453,2.587,1454,4.919,1455,2.587,1456,2.587,1457,2.587,1458,2.587,1459,2.587,1460,2.587,1461,4.014,1462,2.587,1463,2.587,1464,4.919,1465,4.919,1466,4.919,1467,2.587,1468,2.587,1469,2.587]],["title/controllers/UserController.html",[148,1.524,1470,3.008]],["body/controllers/UserController.html",[3,0.079,4,0.069,5,0.159,7,0.252,12,1.021,14,1.127,15,0.422,16,0.012,18,1.807,20,0.589,31,0.313,36,0.072,38,0.098,40,0.007,41,0.007,64,1.007,69,1.206,70,0.993,71,1.132,73,1.284,75,0.385,100,2.218,144,1.206,148,1.165,151,1.721,159,4.289,162,3.489,166,1.858,168,3.707,181,1.249,182,3.923,183,4.778,184,2.015,189,2.015,190,2.015,192,2.554,193,1.721,195,2.366,205,0.958,208,0.958,209,1.127,213,1.489,230,3.923,557,2.015,577,2.015,580,1.904,581,2.015,766,4.476,767,2.494,768,2.494,915,5.426,1040,3.69,1043,2.494,1115,2.494,1131,2.754,1273,4.393,1400,4.851,1470,3.402,1471,2.754,1472,4.851,1473,4.851,1474,4.075,1475,3.149,1476,3.149,1477,3.149,1478,3.149,1479,3.149,1480,3.149,1481,3.149,1482,3.149,1483,3.149,1484,3.149,1485,3.149,1486,3.149,1487,5.547,1488,2.754,1489,3.149,1490,3.149,1491,3.149,1492,4.66,1493,3.149,1494,4.66,1495,4.66,1496,3.149,1497,3.149,1498,3.149,1499,3.149,1500,3.149,1501,3.149,1502,3.149,1503,3.149,1504,3.149]],["title/modules/UserModule.html",[42,1.336,58,2.491]],["body/modules/UserModule.html",[3,0.117,4,0.102,5,0.102,14,1.671,16,0.012,31,0.344,36,0.107,38,0.146,40,0.009,41,0.009,42,2.224,44,2.068,45,2.334,46,2.553,47,2.553,48,2.334,49,3.581,50,3.428,58,4.916,59,3.357,60,2.553,61,2.439,63,3.069,75,0.571,144,2.352,195,3.549,369,2.239,527,3.18,752,5.29,1470,5.009,1488,4.085,1505,4.085,1506,4.085,1507,4.671,1508,4.085,1509,4.671,1510,4.671,1511,4.085,1512,4.671,1513,4.671]],["title/classes/UserNotFoundException.html",[36,0.094,1514,3.008]],["body/classes/UserNotFoundException.html",[3,0.138,4,0.121,5,0.121,12,1.798,15,0.382,16,0.012,20,0.533,23,2.261,31,0.245,36,0.127,38,0.173,39,1.126,40,0.01,41,0.01,69,1.091,70,0.898,71,1.024,75,0.678,203,1.536,289,4.665,400,1.857,402,4.05,403,2.624,404,4.757,406,4.392,409,4.392,1514,5.428,1515,5.991,1516,6.851,1517,5.546]],["title/injectables/UserService.html",[195,1.757,269,0.522]],["body/injectables/UserService.html",[3,0.037,4,0.032,5,0.097,7,0.118,12,1.277,14,2.35,15,0.467,16,0.012,17,1.733,20,0.653,23,2.387,25,1.469,31,0.253,34,0.626,36,0.034,38,0.046,40,0.004,41,0.004,64,0.545,69,1.336,70,1.156,71,1.254,73,1.401,75,0.18,100,2.298,166,2.155,195,1.076,203,0.699,204,1.161,205,0.768,208,2.034,209,2.644,213,1.763,263,1.719,269,0.32,270,0.433,283,2.295,289,4.861,300,2.207,301,1.285,302,1.999,305,0.843,310,1.285,311,0.94,315,0.843,318,2.316,319,1.699,333,1.285,347,1.526,353,2.382,368,0.94,369,0.704,374,1.163,377,1,383,1.073,404,0.94,437,3.02,500,1.999,603,1.843,628,1.843,747,1.843,756,3.316,757,3.316,759,2.207,829,2.628,914,1.073,1270,1.163,1273,1.999,1282,2.628,1284,3.835,1286,4.333,1322,1.163,1343,1.285,1375,2.207,1433,1.285,1436,3.444,1437,2.902,1438,1.285,1439,1.285,1440,1.285,1441,1.285,1472,2.207,1473,2.207,1474,2.207,1511,1.285,1514,1.073,1518,1.285,1519,2.524,1520,2.524,1521,2.524,1522,2.524,1523,2.524,1524,2.524,1525,2.524,1526,2.524,1527,2.524,1528,1.469,1529,4.843,1530,3.318,1531,1.469,1532,2.524,1533,5.471,1534,1.469,1535,2.524,1536,1.469,1537,2.524,1538,1.469,1539,2.524,1540,1.469,1541,2.524,1542,1.469,1543,2.524,1544,1.469,1545,2.524,1546,1.469,1547,2.524,1548,1.469,1549,2.524,1550,1.469,1551,2.524,1552,1.469,1553,2.524,1554,1.469,1555,2.524,1556,1.469,1557,2.524,1558,1.469,1559,2.524,1560,1.469,1561,2.524,1562,1.469,1563,2.524,1564,1.469,1565,1.469,1566,3.318,1567,2.524,1568,1.469,1569,3.938,1570,1.469,1571,2.524,1572,1.469,1573,1.469,1574,1.469,1575,3.318,1576,4.435,1577,1.469,1578,3.318,1579,1.469,1580,1.469,1581,1.469,1582,1.469,1583,1.469,1584,1.469,1585,1.469,1586,1.469,1587,1.469,1588,1.469,1589,1.469,1590,1.469,1591,2.524,1592,1.469,1593,1.469,1594,1.469,1595,1.469,1596,1.469,1597,2.524,1598,1.469,1599,1.469]],["title/interfaces/VerificationTokenPayload.html",[625,3.008,1173,2.059]],["body/interfaces/VerificationTokenPayload.html",[3,0.148,4,0.13,5,0.13,7,0.476,8,1.694,15,0.409,16,0.011,17,1.762,38,0.185,39,1.206,40,0.01,41,0.01,283,3.52,293,2.847,625,5.594,1173,2.969,1175,3.801,1364,4.704,1600,5.195]],["title/coverage.html",[1601,4.469]],["body/coverage.html",[0,2.531,1,1.336,5,0.043,6,1.716,14,0.702,15,0.135,16,0.012,36,0.175,40,0.005,41,0.005,48,0.98,87,1.432,94,1.432,148,2.374,149,1.432,150,1.716,152,1.255,156,1.336,159,1.072,175,1.336,181,0.778,185,1.072,187,1.432,193,1.072,195,0.837,197,1.432,199,1.186,200,3.162,246,1.336,247,1.336,248,1.255,250,1.432,259,2.06,260,2.475,269,0.994,271,1.716,293,0.94,307,1.186,319,0.751,345,1.554,346,1.716,357,1.336,365,1.432,370,1.336,372,1.432,392,1.716,401,1.716,402,2.988,410,2.549,411,2.549,413,1.432,414,1.716,415,1.716,426,1.255,427,2.549,437,1.336,438,1.716,439,2.549,443,1.336,444,1.716,445,2.549,447,1.255,449,1.847,471,1.554,472,1.554,486,1.432,487,1.716,540,1.255,541,1.716,542,1.432,543,1.716,562,1.554,563,1.716,568,1.432,580,2.475,581,1.255,591,2.549,592,1.716,594,1.554,595,1.554,597,1.716,608,1.716,613,1.126,625,1.432,656,1.336,657,1.716,666,1.554,667,1.716,675,1.432,681,1.716,701,1.716,721,1.716,722,1.716,731,1.554,732,1.716,733,1.716,744,1.554,746,1.554,747,1.432,756,1.255,757,1.255,760,1.255,763,1.255,766,1.432,767,1.554,768,1.554,769,2.549,772,1.554,773,2.549,774,2.549,777,1.432,782,1.432,785,2.549,833,1.432,834,1.716,884,1.554,885,1.716,886,1.716,899,2.192,900,1.716,934,2.549,937,1.716,938,1.554,939,2.549,940,1.716,959,1.716,966,1.432,967,1.716,968,1.554,969,1.716,973,1.716,975,1.716,983,1.716,1000,1.716,1014,1.716,1028,1.432,1029,1.716,1076,1.432,1077,1.554,1090,1.716,1109,1.432,1110,1.716,1118,2.192,1123,1.336,1128,1.255,1154,1.255,1168,1.432,1169,1.716,1173,2.613,1174,1.432,1176,2.549,1177,1.716,1179,1.554,1180,1.716,1185,1.716,1186,1.716,1221,1.716,1262,1.554,1263,2.549,1270,1.554,1271,2.549,1318,1.554,1322,1.554,1348,1.716,1355,1.716,1363,1.716,1364,2.549,1365,1.716,1366,1.716,1368,1.432,1369,1.716,1370,1.716,1373,2.549,1423,2.549,1431,1.554,1432,1.716,1435,1.716,1470,1.432,1471,1.716,1514,1.432,1515,1.716,1518,1.716,1600,1.716,1601,1.554,1602,1.962,1603,1.962,1604,1.962,1605,8.541,1606,4.093,1607,4.736,1608,5.935,1609,7.658,1610,7.405,1611,6.765,1612,5.618,1613,1.962,1614,1.716,1615,5.229,1616,1.716,1617,3.219,1618,1.716,1619,1.716,1620,1.716,1621,1.962,1622,1.716,1623,1.716,1624,1.716,1625,1.962,1626,1.962]],["title/dependencies.html",[45,2.479,1627,2.999]],["body/dependencies.html",[16,0.012,34,1.615,36,0.122,40,0.007,41,0.007,45,1.892,75,0.463,79,1.355,81,3.312,86,2.999,91,2.999,93,2.578,101,2.999,192,1.743,227,2.423,253,1.977,257,2.578,302,2.999,369,1.815,425,1.977,555,2.765,556,2.765,711,3.312,741,3.312,803,3.312,882,3.312,907,3.312,908,4.655,909,2.999,910,4.655,912,3.312,947,4.192,948,2.765,980,3.312,1043,2.999,1087,2.999,1133,2.999,1134,4.875,1161,4.655,1162,3.312,1290,2.999,1292,2.999,1293,4.216,1412,3.312,1414,3.312,1426,2.765,1427,2.765,1628,3.787,1629,3.787,1630,3.787,1631,3.787,1632,3.787,1633,3.787,1634,3.787,1635,5.323,1636,6.678,1637,3.787,1638,5.323,1639,3.787,1640,3.787,1641,5.323,1642,3.787,1643,3.787,1644,3.787,1645,3.787,1646,3.787,1647,3.787,1648,3.787,1649,3.787,1650,3.787,1651,5.323,1652,3.787,1653,3.787,1654,3.787,1655,3.787,1656,3.787,1657,5.323,1658,3.787,1659,3.787,1660,3.787,1661,3.787,1662,3.787,1663,3.787,1664,3.787,1665,3.787,1666,3.787,1667,3.787,1668,3.787,1669,3.787,1670,3.787,1671,3.787,1672,3.787,1673,3.787,1674,3.787,1675,3.787,1676,3.787,1677,3.787,1678,3.787,1679,3.787,1680,3.787]],["title/miscellaneous/enumerations.html",[1681,2.504,1682,4.338]],["body/miscellaneous/enumerations.html",[7,0.501,16,0.011,40,0.01,41,0.01,288,4.002,303,6.442,304,5.469,305,4.228,1681,4.567,1682,5.469,1683,6.254,1684,7.366,1685,6.254,1686,6.254]],["title/miscellaneous/functions.html",[1681,2.504,1687,4.338]],["body/miscellaneous/functions.html",[7,0.399,15,0.441,16,0.011,40,0.009,41,0.009,48,3.732,69,1.469,70,1.21,71,1.379,73,1.044,288,3.188,449,3.675,471,5.071,472,3.945,602,4.675,691,5.167,744,5.071,746,5.071,747,4.675,751,4.357,899,4.36,1614,4.357,1616,4.357,1618,4.357,1619,5.6,1620,5.6,1622,5.6,1623,4.357,1624,5.6,1681,3.638,1687,4.357,1688,4.982,1689,4.982,1690,4.982,1691,4.982,1692,4.982,1693,4.982,1694,4.982,1695,4.982,1696,4.982,1697,7.468,1698,4.982]],["title/index.html",[7,0.275,1699,3.429,1700,3.429]],["body/index.html",[4,0.102,16,0.012,40,0.009,41,0.009,353,2.825,479,4.085,634,4.085,853,4.085,1071,4.085,1091,3.41,1242,5.37,1243,5.999,1244,4.085,1336,4.085,1601,3.699,1701,4.671,1702,4.671,1703,6.14,1704,4.671,1705,4.671,1706,4.671,1707,4.671,1708,4.671,1709,4.671,1710,4.085,1711,4.671,1712,4.671,1713,4.671,1714,7.92,1715,4.671,1716,4.671,1717,7.769,1718,4.671,1719,4.671,1720,6.14,1721,4.671,1722,4.671,1723,4.671,1724,6.14,1725,4.671,1726,4.671,1727,4.671,1728,6.14,1729,6.14,1730,4.671,1731,4.671,1732,4.671,1733,4.671,1734,4.671,1735,4.085,1736,4.671,1737,4.671,1738,4.671,1739,4.671,1740,4.671,1741,4.671,1742,4.671,1743,4.671,1744,4.671,1745,4.671,1746,4.671,1747,4.671,1748,4.085]],["title/modules.html",[44,2.499]],["body/modules.html",[16,0.009,40,0.009,41,0.009,43,3.912,44,2.373,53,3.648,54,3.648,55,3.648,56,3.648,57,3.648,58,3.24,245,3.428,752,3.648,868,6.4,877,3.428,1067,4.243,1735,7.227,1749,8.264,1750,8.264,1751,8.442,1752,7.319]],["title/overview.html",[1753,4.935]],["body/overview.html",[2,1.718,16,0.012,40,0.007,41,0.007,42,1.019,43,5.777,44,1.391,45,1.57,46,1.718,47,1.718,48,1.57,49,1.64,50,1.57,51,2.748,52,2.748,53,5.43,54,3.772,55,4.824,56,4.953,57,5.221,58,4.571,59,2.543,60,1.718,61,1.64,144,1.203,185,3.028,195,3.021,199,4.284,242,2.748,243,2.748,244,2.748,245,4.966,246,3.772,247,3.772,248,3.545,270,0.926,400,1.052,443,4.824,447,3.545,540,3.545,594,2.488,613,4.067,651,2.748,653,2.748,654,2.748,752,5.059,753,2.748,754,2.748,755,2.748,756,4.533,757,4.533,874,2.748,875,2.748,876,2.748,877,3.919,993,2.748,994,2.748,995,2.748,1128,3.545,1151,2.748,1153,2.748,1154,3.545,1175,2.01,1505,2.748,1506,2.748,1508,2.748,1753,2.748,1754,3.142,1755,3.142,1756,3.142,1757,3.142,1758,3.142,1759,3.142,1760,3.142]],["title/properties.html",[8,1.176,1627,2.999]],["body/properties.html",[8,1.51,16,0.012,40,0.01,41,0.01,1091,4.648,1710,5.567,1748,5.567,1761,6.366,1762,6.366,1763,6.366]]],"invertedIndex":[["",{"_index":16,"title":{},"body":{"entities/Address.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"classes/EmailConfirmationDto.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"modules/FileModule.html":{},"classes/FindOneParams.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/HttpExceptionFilter.html":{},"classes/ImageProcessor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"entities/Log.html":{},"modules/LoggerModule.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"classes/PaginationParams.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"classes/PostNotFoundException.html":{},"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"injectables/PrivateFileService.html":{},"entities/PublicFile.html":{},"injectables/PublicFileService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"modules/SearchModule.html":{},"interfaces/TokenPayload.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":1605,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":1762,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":1678,"title":{},"body":{"dependencies.html":{}}}],["0.14.0",{"_index":1664,"title":{},"body":{"dependencies.html":{}}}],["0.3.16",{"_index":1680,"title":{},"body":{"dependencies.html":{}}}],["0.5",{"_index":872,"title":{},"body":{"controllers/HealthController.html":{}}}],["0.5.0",{"_index":1644,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1663,"title":{},"body":{"dependencies.html":{}}}],["0.5.10",{"_index":1658,"title":{},"body":{"dependencies.html":{}}}],["0.6",{"_index":924,"title":{},"body":{"classes/ImageProcessor.html":{}}}],["0.6.0",{"_index":1672,"title":{},"body":{"dependencies.html":{}}}],["0.8",{"_index":925,"title":{},"body":{"classes/ImageProcessor.html":{}}}],["0/1",{"_index":1610,"title":{},"body":{"coverage.html":{}}}],["0/17",{"_index":1621,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1609,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1611,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1608,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1612,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1606,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1617,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1607,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1613,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":1759,"title":{},"body":{"overview.html":{}}}],["1.0.0",{"_index":1674,"title":{},"body":{"dependencies.html":{}}}],["1.1.21",{"_index":1629,"title":{},"body":{"dependencies.html":{}}}],["1.4.6",{"_index":1666,"title":{},"body":{"dependencies.html":{}}}],["1.4.7",{"_index":1653,"title":{},"body":{"dependencies.html":{}}}],["1.5.3",{"_index":1675,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":310,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UserService.html":{}}}],["10.0.0",{"_index":1634,"title":{},"body":{"dependencies.html":{}}}],["10.0.1",{"_index":1638,"title":{},"body":{"dependencies.html":{}}}],["10.0.3",{"_index":1639,"title":{},"body":{"dependencies.html":{}}}],["1024",{"_index":859,"title":{},"body":{"controllers/HealthController.html":{}}}],["11",{"_index":1754,"title":{},"body":{"overview.html":{}}}],["12.0.1",{"_index":1671,"title":{},"body":{"dependencies.html":{}}}],["120",{"_index":1166,"title":{},"body":{"modules/PostModule.html":{}}}],["120.0.0",{"_index":1667,"title":{},"body":{"dependencies.html":{}}}],["17.1.1",{"_index":1632,"title":{},"body":{"dependencies.html":{}}}],["1724",{"_index":1686,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["2.0.1",{"_index":1635,"title":{},"body":{"dependencies.html":{}}}],["2.1398.0",{"_index":1659,"title":{},"body":{"dependencies.html":{}}}],["2.3.3",{"_index":1637,"title":{},"body":{"dependencies.html":{}}}],["2.7.0",{"_index":1646,"title":{},"body":{"dependencies.html":{}}}],["21",{"_index":1758,"title":{},"body":{"overview.html":{}}}],["25",{"_index":1757,"title":{},"body":{"overview.html":{}}}],["2fa",{"_index":1374,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["3.0.0",{"_index":1633,"title":{},"body":{"dependencies.html":{}}}],["3.0.1",{"_index":1641,"title":{},"body":{"dependencies.html":{}}}],["3.3.5",{"_index":1669,"title":{},"body":{"dependencies.html":{}}}],["300",{"_index":858,"title":{},"body":{"controllers/HealthController.html":{}}}],["300mb",{"_index":854,"title":{},"body":{"controllers/HealthController.html":{}}}],["4.0.1",{"_index":1673,"title":{},"body":{"dependencies.html":{}}}],["4.10.0",{"_index":1648,"title":{},"body":{"dependencies.html":{}}}],["4.10.4",{"_index":1661,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":1013,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["404",{"_index":816,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["5",{"_index":1760,"title":{},"body":{"overview.html":{}}}],["5.1.0",{"_index":1660,"title":{},"body":{"dependencies.html":{}}}],["5.2.3",{"_index":1662,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":867,"title":{},"body":{"controllers/HealthController.html":{}}}],["500",{"_index":1011,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["6.4.8",{"_index":1655,"title":{},"body":{"dependencies.html":{}}}],["6.9.3",{"_index":1670,"title":{},"body":{"dependencies.html":{}}}],["7",{"_index":1756,"title":{},"body":{"overview.html":{}}}],["7.2.0",{"_index":1679,"title":{},"body":{"dependencies.html":{}}}],["8.0.1",{"_index":1651,"title":{},"body":{"dependencies.html":{}}}],["8.8.1",{"_index":1631,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":1755,"title":{},"body":{"overview.html":{}}}],["9.0.0",{"_index":1636,"title":{},"body":{"dependencies.html":{}}}],["9.0.1",{"_index":1642,"title":{},"body":{"dependencies.html":{}}}],["9.0.2",{"_index":1657,"title":{},"body":{"dependencies.html":{}}}],["9.0.3",{"_index":1640,"title":{},"body":{"dependencies.html":{}}}],["__dirname",{"_index":537,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["access_token",{"_index":825,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["accesskeyid",{"_index":1295,"title":{},"body":{"injectables/PrivateFileService.html":{},"injectables/PublicFileService.html":{}}}],["accesstokencookie",{"_index":219,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["acl",{"_index":1335,"title":{},"body":{"injectables/PublicFileService.html":{}}}],["addavatar",{"_index":1472,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["addavatar(request",{"_index":1475,"title":{},"body":{"controllers/UserController.html":{}}}],["addavatar(userid",{"_index":1532,"title":{},"body":{"injectables/UserService.html":{}}}],["addprivatefile",{"_index":1473,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["addprivatefile(request",{"_index":1478,"title":{},"body":{"controllers/UserController.html":{}}}],["addprivatefile(userid",{"_index":1535,"title":{},"body":{"injectables/UserService.html":{}}}],["address",{"_index":1,"title":{"entities/Address.html":{}},"body":{"entities/Address.html":{},"injectables/EmailConfirmationService.html":{},"entities/User.html":{},"coverage.html":{}}}],["address.entity",{"_index":1467,"title":{},"body":{"entities/User.html":{}}}],["adm",{"_index":907,"title":{},"body":{"classes/ImageProcessor.html":{},"dependencies.html":{}}}],["admzip",{"_index":906,"title":{},"body":{"classes/ImageProcessor.html":{}}}],["age=${this.configservice.get",{"_index":340,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["age=0",{"_index":344,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["allocated",{"_index":861,"title":{},"body":{"controllers/HealthController.html":{}}}],["already",{"_index":320,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{}}}],["amazing",{"_index":1736,"title":{},"body":{"index.html":{}}}],["anyfilesinterceptor",{"_index":1042,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["app",{"_index":1244,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{}}}],["app_filter",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["application",{"_index":632,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["applications",{"_index":1709,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":43,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["argumentshost",{"_index":725,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["array",{"_index":1184,"title":{},"body":{"interfaces/PostSearchResult.html":{}}}],["asc",{"_index":1209,"title":{},"body":{"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{}}}],["async",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/CategoriesService.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailSchedulingController.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/ImageProcessor.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"injectables/PrivateFileService.html":{},"injectables/PublicFileService.html":{},"modules/SearchModule.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["auth",{"_index":716,"title":{},"body":{"injectables/EmailService.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/SearchModule.html":{}}}],["auth.oauth2client",{"_index":802,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authenticate",{"_index":153,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["authenticate(@req",{"_index":237,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["authenticate(request",{"_index":158,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["authenticate(token",{"_index":792,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authenticate(tokendata",{"_index":776,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["authentication",{"_index":152,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/GoogleAuthenticationController.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"coverage.html":{}}}],["authentication.controller",{"_index":254,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["authentication.controller.ts",{"_index":774,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"coverage.html":{}}}],["authentication.controller.ts:21",{"_index":778,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["authentication.controller.ts:32",{"_index":1380,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["authentication.controller.ts:47",{"_index":1384,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["authentication.controller.ts:65",{"_index":1377,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["authentication.guard",{"_index":189,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/PostController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UserController.html":{}}}],["authentication.guard.ts",{"_index":934,"title":{},"body":{"injectables/JwtAuthenticationGuard.html":{},"injectables/LocalAuthenticationGuard.html":{},"coverage.html":{}}}],["authentication.service",{"_index":186,"title":{},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/LocalStrategy.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["authentication.service.ts",{"_index":785,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"injectables/TwoFactorAuthenticationService.html":{},"coverage.html":{}}}],["authentication.service.ts:10",{"_index":791,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["authentication.service.ts:16",{"_index":1406,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["authentication.service.ts:21",{"_index":793,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authentication.service.ts:30",{"_index":1410,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["authentication.service.ts:34",{"_index":1408,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["authentication.service.ts:35",{"_index":801,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authentication.service.ts:42",{"_index":797,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authentication.service.ts:51",{"_index":795,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authentication.service.ts:62",{"_index":799,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authentication/authentication.module",{"_index":84,"title":{},"body":{"modules/AppModule.html":{}}}],["authentication/guard/jwt",{"_index":674,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["authentication=${token",{"_index":336,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["authenticationcontroller",{"_index":149,"title":{"controllers/AuthenticationController.html":{}},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"coverage.html":{}}}],["authenticationmodule",{"_index":53,"title":{"modules/AuthenticationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules.html":{},"overview.html":{}}}],["authenticationservice",{"_index":185,"title":{"injectables/AuthenticationService.html":{}},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/LocalStrategy.html":{},"controllers/TwoFactorAuthenticationController.html":{},"coverage.html":{},"overview.html":{}}}],["authenticator",{"_index":1411,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["authenticator.generatesecret",{"_index":1415,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["authenticator.keyuri",{"_index":1416,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["authenticator.verify",{"_index":1421,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["authguard",{"_index":935,"title":{},"body":{"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/LocalAuthenticationGuard.html":{}}}],["authguard('jwt",{"_index":936,"title":{},"body":{"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtTwoFactorGuard.html":{}}}],["authguard('local",{"_index":974,"title":{},"body":{"injectables/LocalAuthenticationGuard.html":{}}}],["author",{"_index":1091,"title":{},"body":{"entities/Post.html":{},"injectables/PostsService.html":{},"index.html":{},"properties.html":{}}}],["author.posts",{"_index":1094,"title":{},"body":{"entities/Post.html":{}}}],["authorid",{"_index":1178,"title":{},"body":{"interfaces/PostSearchBody.html":{},"injectables/PostsSearchService.html":{}}}],["available",{"_index":868,"title":{},"body":{"controllers/HealthController.html":{},"modules.html":{}}}],["avatar",{"_index":1436,"title":{},"body":{"entities/User.html":{},"injectables/UserService.html":{}}}],["await",{"_index":209,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/CategoriesService.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/ImageProcessor.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"injectables/PrivateFileService.html":{},"injectables/PublicFileService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["aws",{"_index":1292,"title":{},"body":{"injectables/PrivateFileService.html":{},"injectables/PublicFileService.html":{},"dependencies.html":{}}}],["aws_access_key_id",{"_index":127,"title":{},"body":{"modules/AppModule.html":{}}}],["aws_region",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["aws_s3_bucket_endpoint",{"_index":129,"title":{},"body":{"modules/AppModule.html":{}}}],["aws_s3_private_bucket_name",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["aws_s3_public_bucket_name",{"_index":130,"title":{},"body":{"modules/AppModule.html":{}}}],["aws_secret_access_key",{"_index":128,"title":{},"body":{"modules/AppModule.html":{}}}],["backers",{"_index":1737,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":623,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["badrequestexception('bad",{"_index":648,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["badrequestexception('email",{"_index":638,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["baseexceptionfilter",{"_index":723,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["bcrypt",{"_index":302,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["bcrypt.compare",{"_index":333,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UserService.html":{}}}],["bcrypt.hash(refreshtoken",{"_index":1596,"title":{},"body":{"injectables/UserService.html":{}}}],["bcrypt.hash(registerationdata.password",{"_index":309,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["body",{"_index":179,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/PostController.html":{},"injectables/PostsSearchService.html":{},"injectables/PrivateFileService.html":{},"injectables/PublicFileService.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["body.interface.ts",{"_index":1177,"title":{},"body":{"interfaces/PostSearchBody.html":{},"coverage.html":{}}}],["boolean",{"_index":602,"title":{},"body":{"guards/EmailConfirmationGuard.html":{},"interfaces/TokenPayload.html":{},"entities/User.html":{},"miscellaneous/functions.html":{}}}],["bootstrap",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/EmailModule.html":{},"modules/FileModule.html":{},"modules/HealthModule.html":{},"modules/LoggerModule.html":{},"modules/PostModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":1751,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1749,"title":{},"body":{"modules.html":{}}}],["bucket",{"_index":1306,"title":{},"body":{"injectables/PrivateFileService.html":{},"injectables/PublicFileService.html":{}}}],["buffer",{"_index":1284,"title":{},"body":{"injectables/PrivateFileService.html":{},"injectables/PublicFileService.html":{},"injectables/UserService.html":{}}}],["buffer.from(file.buffer",{"_index":920,"title":{},"body":{"classes/ImageProcessor.html":{}}}],["buffer.from(job.returnvalue",{"_index":1064,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["building",{"_index":1704,"title":{},"body":{"index.html":{}}}],["bull",{"_index":909,"title":{},"body":{"classes/ImageProcessor.html":{},"controllers/OptimizeController.html":{},"dependencies.html":{}}}],["bullmodule",{"_index":92,"title":{},"body":{"modules/AppModule.html":{},"modules/OptimizeModule.html":{}}}],["bullmodule.forrootasync",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["bullmodule.registerqueue",{"_index":1072,"title":{},"body":{"modules/OptimizeModule.html":{}}}],["cache",{"_index":1161,"title":{},"body":{"modules/PostModule.html":{},"dependencies.html":{}}}],["cacheinterceptor",{"_index":1132,"title":{},"body":{"controllers/PostController.html":{}}}],["cachemodule",{"_index":1159,"title":{},"body":{"modules/PostModule.html":{}}}],["cachemodule.registerasync",{"_index":1163,"title":{},"body":{"modules/PostModule.html":{}}}],["callhandler",{"_index":737,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["canactivate",{"_index":598,"title":{},"body":{"guards/EmailConfirmationGuard.html":{}}}],["canactivate(context",{"_index":599,"title":{},"body":{"guards/EmailConfirmationGuard.html":{}}}],["cancelallscheduledemails",{"_index":682,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["cascade",{"_index":1098,"title":{},"body":{"entities/Post.html":{},"entities/User.html":{}}}],["catch",{"_index":315,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/DatabaseLogger.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"injectables/EmailConfirmationService.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/UserService.html":{}}}],["catch(exception",{"_index":724,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["catch(notfoundexception",{"_index":889,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["categories",{"_index":1092,"title":{},"body":{"entities/Post.html":{}}}],["categoriesservice",{"_index":345,"title":{"injectables/CategoriesService.html":{}},"body":{"injectables/CategoriesService.html":{},"coverage.html":{}}}],["category",{"_index":370,"title":{"entities/Category.html":{}},"body":{"injectables/CategoriesService.html":{},"entities/Category.html":{},"entities/Post.html":{},"coverage.html":{}}}],["category.dto",{"_index":376,"title":{},"body":{"injectables/CategoriesService.html":{},"classes/UpdateCategoryDto.html":{}}}],["category.dto.ts",{"_index":411,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["category.dto.ts:2",{"_index":412,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["category.dto.ts:5",{"_index":1424,"title":{},"body":{"classes/UpdateCategoryDto.html":{}}}],["category.entity",{"_index":1108,"title":{},"body":{"entities/Post.html":{}}}],["category.posts",{"_index":1096,"title":{},"body":{"entities/Post.html":{}}}],["categoryid",{"_index":407,"title":{},"body":{"classes/CategoryNotFoundException.html":{}}}],["categorynotfoundexception",{"_index":372,"title":{"classes/CategoryNotFoundException.html":{}},"body":{"injectables/CategoriesService.html":{},"classes/CategoryNotFoundException.html":{},"coverage.html":{}}}],["categorynotfoundexception(id",{"_index":386,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["categoryrepository",{"_index":355,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["check",{"_index":835,"title":{},"body":{"controllers/HealthController.html":{}}}],["city",{"_index":10,"title":{},"body":{"entities/Address.html":{}}}],["class",{"_index":36,"title":{"classes/CategoryNotFoundException.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/DatabaseLogger.html":{},"classes/EmailConfirmationDto.html":{},"classes/EmailScheduleDto.html":{},"classes/ExceptionsLoggerFilter.html":{},"classes/FindOneParams.html":{},"classes/HttpExceptionFilter.html":{},"classes/ImageProcessor.html":{},"classes/PaginationParams.html":{},"classes/PostNotFoundException.html":{},"classes/RegisterDto.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserNotFoundException.html":{}},"body":{"entities/Address.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"classes/EmailConfirmationDto.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"modules/FileModule.html":{},"classes/FindOneParams.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/HttpExceptionFilter.html":{},"classes/ImageProcessor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"entities/Log.html":{},"modules/LoggerModule.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"classes/PaginationParams.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"classes/PostNotFoundException.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"injectables/PrivateFileService.html":{},"entities/PublicFile.html":{},"injectables/PublicFileService.html":{},"classes/RegisterDto.html":{},"modules/SearchModule.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":400,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/DatabaseLogger.html":{},"classes/EmailConfirmationDto.html":{},"classes/EmailScheduleDto.html":{},"classes/ExceptionsLoggerFilter.html":{},"classes/FindOneParams.html":{},"classes/HttpExceptionFilter.html":{},"classes/ImageProcessor.html":{},"classes/PaginationParams.html":{},"classes/PostNotFoundException.html":{},"classes/RegisterDto.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserNotFoundException.html":{},"overview.html":{}}}],["classserializerinterceptor",{"_index":576,"title":{},"body":{"controllers/EmailConfirmationController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["click",{"_index":633,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["clientid",{"_index":805,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["clientsecret",{"_index":807,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["cluster.ts",{"_index":1619,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["cluster_appmodule",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authenticationmodule",{"_index":242,"title":{},"body":{"modules/AuthenticationModule.html":{},"overview.html":{}}}],["cluster_authenticationmodule_imports",{"_index":243,"title":{},"body":{"modules/AuthenticationModule.html":{},"overview.html":{}}}],["cluster_authenticationmodule_providers",{"_index":244,"title":{},"body":{"modules/AuthenticationModule.html":{},"overview.html":{}}}],["cluster_emailmodule",{"_index":651,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_emailmodule_exports",{"_index":653,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_emailmodule_imports",{"_index":652,"title":{},"body":{"modules/EmailModule.html":{}}}],["cluster_emailmodule_providers",{"_index":654,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_filemodule",{"_index":753,"title":{},"body":{"modules/FileModule.html":{},"overview.html":{}}}],["cluster_filemodule_exports",{"_index":754,"title":{},"body":{"modules/FileModule.html":{},"overview.html":{}}}],["cluster_filemodule_providers",{"_index":755,"title":{},"body":{"modules/FileModule.html":{},"overview.html":{}}}],["cluster_healthmodule",{"_index":874,"title":{},"body":{"modules/HealthModule.html":{},"overview.html":{}}}],["cluster_healthmodule_imports",{"_index":875,"title":{},"body":{"modules/HealthModule.html":{},"overview.html":{}}}],["cluster_healthmodule_providers",{"_index":876,"title":{},"body":{"modules/HealthModule.html":{},"overview.html":{}}}],["cluster_loggermodule",{"_index":993,"title":{},"body":{"modules/LoggerModule.html":{},"overview.html":{}}}],["cluster_loggermodule_exports",{"_index":994,"title":{},"body":{"modules/LoggerModule.html":{},"overview.html":{}}}],["cluster_loggermodule_providers",{"_index":995,"title":{},"body":{"modules/LoggerModule.html":{},"overview.html":{}}}],["cluster_postmodule",{"_index":1151,"title":{},"body":{"modules/PostModule.html":{},"overview.html":{}}}],["cluster_postmodule_imports",{"_index":1152,"title":{},"body":{"modules/PostModule.html":{}}}],["cluster_postmodule_providers",{"_index":1153,"title":{},"body":{"modules/PostModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":1505,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":1508,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_imports",{"_index":1507,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":1506,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["code",{"_index":1396,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["code.dto",{"_index":1386,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["code.dto.ts",{"_index":1370,"title":{},"body":{"classes/TwoFactorAuthenticationCodeDto.html":{},"coverage.html":{}}}],["code.dto.ts:5",{"_index":1372,"title":{},"body":{"classes/TwoFactorAuthenticationCodeDto.html":{}}}],["codes.enum",{"_index":306,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["codes.enum.ts",{"_index":1684,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["column",{"_index":19,"title":{},"body":{"entities/Address.html":{},"entities/Category.html":{},"entities/Log.html":{},"entities/Post.html":{},"entities/PrivateFile.html":{},"entities/PublicFile.html":{},"entities/User.html":{}}}],["column('json",{"_index":1103,"title":{},"body":{"entities/Post.html":{}}}],["column()@exclude",{"_index":1459,"title":{},"body":{"entities/User.html":{}}}],["column({default",{"_index":1454,"title":{},"body":{"entities/User.html":{}}}],["column({nullable",{"_index":985,"title":{},"body":{"entities/Log.html":{},"entities/User.html":{}}}],["column({unique",{"_index":1448,"title":{},"body":{"entities/User.html":{}}}],["compodoc/compodoc",{"_index":1628,"title":{},"body":{"dependencies.html":{}}}],["configmodule",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"modules/FileModule.html":{},"modules/LoggerModule.html":{},"modules/PostModule.html":{},"modules/SearchModule.html":{}}}],["configmodule.forroot",{"_index":108,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/CustomLogger.html":{},"modules/DatabaseModule.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"modules/PostModule.html":{},"injectables/PrivateFileService.html":{},"injectables/PublicFileService.html":{},"modules/SearchModule.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["configservice.get",{"_index":267,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["configservice.get('database_db",{"_index":536,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('database_host",{"_index":531,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('database_password",{"_index":535,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('database_port",{"_index":532,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('database_user",{"_index":534,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('elasticsearch_node",{"_index":1360,"title":{},"body":{"modules/SearchModule.html":{}}}],["configservice.get('elasticsearch_password",{"_index":1362,"title":{},"body":{"modules/SearchModule.html":{}}}],["configservice.get('elasticsearch_username",{"_index":1361,"title":{},"body":{"modules/SearchModule.html":{}}}],["configservice.get('email_host",{"_index":714,"title":{},"body":{"injectables/EmailService.html":{}}}],["configservice.get('email_password",{"_index":719,"title":{},"body":{"injectables/EmailService.html":{}}}],["configservice.get('email_port",{"_index":715,"title":{},"body":{"injectables/EmailService.html":{}}}],["configservice.get('email_user",{"_index":717,"title":{},"body":{"injectables/EmailService.html":{}}}],["configservice.get('jwt_access_token_secret",{"_index":264,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["configservice.get('jwt_refresh_token_secret",{"_index":954,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["configservice.get('node_env",{"_index":475,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["configservice.get('redis_host",{"_index":103,"title":{},"body":{"modules/AppModule.html":{},"modules/PostModule.html":{}}}],["configservice.get('redis_port",{"_index":1164,"title":{},"body":{"modules/PostModule.html":{}}}],["configure",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["configure(consumer",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["confimation.dto",{"_index":579,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["confimation.dto.ts",{"_index":592,"title":{},"body":{"classes/EmailConfirmationDto.html":{},"coverage.html":{}}}],["confimation.dto.ts:6",{"_index":593,"title":{},"body":{"classes/EmailConfirmationDto.html":{}}}],["confirm",{"_index":565,"title":{},"body":{"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{}}}],["confirm(@body",{"_index":584,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["confirm(confirmationdata",{"_index":567,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["confirmation",{"_index":564,"title":{},"body":{"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{}}}],["confirmation.controller.ts",{"_index":563,"title":{},"body":{"controllers/EmailConfirmationController.html":{},"coverage.html":{}}}],["confirmation.controller.ts:23",{"_index":570,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["confirmation.controller.ts:32",{"_index":575,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["confirmation.guard.ts",{"_index":597,"title":{},"body":{"guards/EmailConfirmationGuard.html":{},"coverage.html":{}}}],["confirmation.guard.ts:11",{"_index":601,"title":{},"body":{"guards/EmailConfirmationGuard.html":{}}}],["confirmation.service",{"_index":201,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/EmailConfirmationController.html":{},"modules/EmailModule.html":{}}}],["confirmation.service.ts",{"_index":608,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"coverage.html":{}}}],["confirmation.service.ts:17",{"_index":622,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["confirmation.service.ts:36",{"_index":616,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["confirmation.service.ts:44",{"_index":618,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["confirmation.service.ts:62",{"_index":620,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["confirmation.service.ts:9",{"_index":614,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["confirmationdata",{"_index":571,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["confirmationdata.token",{"_index":586,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["confirmed",{"_index":639,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["confirmemail",{"_index":609,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["confirmemail(email",{"_index":615,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["console.log('exception",{"_index":728,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["consolelogger",{"_index":446,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["consoleloggeroptions",{"_index":454,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["const",{"_index":208,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/CategoriesService.html":{},"injectables/CustomLogger.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailSchedulingService.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/HttpExceptionFilter.html":{},"classes/ImageProcessor.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"injectables/PrivateFileService.html":{},"injectables/PublicFileService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["constructor",{"_index":203,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/CategoriesService.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CustomLogger.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/HealthController.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsService.html":{},"classes/PostNotFoundException.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"injectables/PrivateFileService.html":{},"injectables/PublicFileService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{}}}],["constructor(@injectqueue('image",{"_index":1048,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["constructor(authenticationservice",{"_index":976,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(categoryid",{"_index":405,"title":{},"body":{"classes/CategoryNotFoundException.html":{}}}],["constructor(categoryrepository",{"_index":352,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["constructor(configservice",{"_index":704,"title":{},"body":{"injectables/EmailService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["constructor(context",{"_index":452,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["constructor(datasource",{"_index":1528,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(elasticsearchservice",{"_index":546,"title":{},"body":{"injectables/ElasticsearchHealthIndicator.html":{},"injectables/PostsSearchService.html":{}}}],["constructor(emailservice",{"_index":683,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["constructor(jwtservice",{"_index":612,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["constructor(logsrepository",{"_index":1016,"title":{},"body":{"injectables/LogsService.html":{}}}],["constructor(postid",{"_index":1170,"title":{},"body":{"classes/PostNotFoundException.html":{}}}],["constructor(postrepository",{"_index":1223,"title":{},"body":{"injectables/PostsService.html":{}}}],["constructor(private",{"_index":557,"title":{},"body":{"injectables/ElasticsearchHealthIndicator.html":{},"injectables/EmailService.html":{},"injectables/LocalStrategy.html":{},"controllers/PostController.html":{},"injectables/PostsSearchService.html":{},"controllers/UserController.html":{}}}],["constructor(privatefilerepository",{"_index":1275,"title":{},"body":{"injectables/PrivateFileService.html":{}}}],["constructor(publicfilerepository",{"_index":1326,"title":{},"body":{"injectables/PublicFileService.html":{}}}],["constructor(userid",{"_index":1516,"title":{},"body":{"classes/UserNotFoundException.html":{}}}],["constructor(userservice",{"_index":277,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["constructor(usersservice",{"_index":1404,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["consumer",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["consumer.apply(logsmiddleware).forroutes",{"_index":147,"title":{},"body":{"modules/AppModule.html":{}}}],["content",{"_index":428,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/EmailScheduleDto.html":{},"entities/Post.html":{},"interfaces/PostSearchBody.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{}}}],["context",{"_index":416,"title":{},"body":{"classes/CreateLogDto.html":{},"injectables/CustomLogger.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/ExcludeNullInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"entities/Log.html":{}}}],["context.getrequest",{"_index":892,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["context.getresponse",{"_index":891,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["context.switchtohttp().getrequest",{"_index":604,"title":{},"body":{"guards/EmailConfirmationGuard.html":{}}}],["controller",{"_index":148,"title":{"controllers/AuthenticationController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/HealthController.html":{},"controllers/OptimizeController.html":{},"controllers/PostController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AuthenticationController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/HealthController.html":{},"controllers/OptimizeController.html":{},"controllers/PostController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('2fa",{"_index":1387,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["controller('authentication",{"_index":202,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["controller('email",{"_index":582,"title":{},"body":{"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{}}}],["controller('google",{"_index":783,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["controller('health",{"_index":846,"title":{},"body":{"controllers/HealthController.html":{}}}],["controller('optimize",{"_index":1047,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["controller('post",{"_index":1136,"title":{},"body":{"controllers/PostController.html":{}}}],["controller('user",{"_index":1490,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":144,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"controllers/EmailConfirmationController.html":{},"modules/EmailModule.html":{},"controllers/EmailSchedulingController.html":{},"modules/FileModule.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["controllers/post.controller",{"_index":1156,"title":{},"body":{"modules/PostModule.html":{}}}],["cookie",{"_index":227,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"dependencies.html":{}}}],["count",{"_index":1210,"title":{},"body":{"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{}}}],["country",{"_index":11,"title":{},"body":{"entities/Address.html":{}}}],["coverage",{"_index":1601,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":347,"title":{},"body":{"injectables/CategoriesService.html":{},"controllers/PostController.html":{},"injectables/PostsService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["create(@body",{"_index":1137,"title":{},"body":{"controllers/PostController.html":{}}}],["create(createcategorydto",{"_index":356,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["create(createpostdto",{"_index":1111,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostsService.html":{}}}],["create(createuserdto",{"_index":1537,"title":{},"body":{"injectables/UserService.html":{}}}],["createcategorydto",{"_index":357,"title":{"classes/CreateCategoryDto.html":{}},"body":{"injectables/CategoriesService.html":{},"classes/CreateCategoryDto.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["createdatecolumn",{"_index":987,"title":{},"body":{"entities/Log.html":{}}}],["createduser",{"_index":312,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["createlog",{"_index":1015,"title":{},"body":{"injectables/LogsService.html":{}}}],["createlog(log",{"_index":1019,"title":{},"body":{"injectables/LogsService.html":{}}}],["createlogdto",{"_index":413,"title":{"classes/CreateLogDto.html":{}},"body":{"classes/CreateLogDto.html":{},"injectables/LogsService.html":{},"coverage.html":{}}}],["createpostdto",{"_index":426,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"controllers/PostController.html":{},"injectables/PostsService.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["createreadstream",{"_index":1316,"title":{},"body":{"injectables/PrivateFileService.html":{}}}],["createtransport",{"_index":710,"title":{},"body":{"injectables/EmailService.html":{}}}],["createuserdto",{"_index":437,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["createwithgoogle",{"_index":1519,"title":{},"body":{"injectables/UserService.html":{}}}],["createwithgoogle(email",{"_index":1539,"title":{},"body":{"injectables/UserService.html":{}}}],["creationdate",{"_index":984,"title":{},"body":{"entities/Log.html":{}}}],["credentials",{"_index":330,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/PrivateFileService.html":{},"injectables/PublicFileService.html":{}}}],["cron",{"_index":689,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["cronjob",{"_index":688,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["cronjob(date",{"_index":692,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["ctx._source.${key}='${value",{"_index":1219,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["currenthashedrefreshtoken",{"_index":1437,"title":{},"body":{"entities/User.html":{},"injectables/UserService.html":{}}}],["custom",{"_index":997,"title":{},"body":{"modules/LoggerModule.html":{}}}],["customlogger",{"_index":443,"title":{"injectables/CustomLogger.html":{}},"body":{"injectables/CustomLogger.html":{},"modules/LoggerModule.html":{},"coverage.html":{},"overview.html":{}}}],["data",{"_index":1026,"title":{},"body":{"injectables/LogsService.html":{}}}],["database",{"_index":528,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["database/database.module",{"_index":82,"title":{},"body":{"modules/AppModule.html":{}}}],["database_db",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["database_host",{"_index":112,"title":{},"body":{"modules/AppModule.html":{}}}],["database_password",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["database_port",{"_index":114,"title":{},"body":{"modules/AppModule.html":{}}}],["database_user",{"_index":116,"title":{},"body":{"modules/AppModule.html":{}}}],["databaselogger",{"_index":486,"title":{"classes/DatabaseLogger.html":{}},"body":{"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"coverage.html":{}}}],["databasemodule",{"_index":54,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules.html":{},"overview.html":{}}}],["databuffer",{"_index":1288,"title":{},"body":{"injectables/PrivateFileService.html":{},"injectables/PublicFileService.html":{}}}],["datasource",{"_index":1529,"title":{},"body":{"injectables/UserService.html":{}}}],["date",{"_index":658,"title":{},"body":{"classes/EmailScheduleDto.html":{},"injectables/EmailSchedulingService.html":{},"entities/Log.html":{}}}],["date().toisostring",{"_index":898,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["date(emailschedule.date",{"_index":690,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["date.now",{"_index":697,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["debug",{"_index":448,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["debug(message",{"_index":456,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["declarations",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/EmailModule.html":{},"modules/FileModule.html":{},"modules/HealthModule.html":{},"modules/LoggerModule.html":{},"modules/PostModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decodeconfirmationtoken",{"_index":610,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["decodeconfirmationtoken(token",{"_index":617,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["decorators",{"_index":18,"title":{},"body":{"entities/Address.html":{},"controllers/AuthenticationController.html":{},"entities/Category.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"controllers/EmailConfirmationController.html":{},"classes/EmailConfirmationDto.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"classes/FindOneParams.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/HealthController.html":{},"classes/ImageProcessor.html":{},"entities/Log.html":{},"controllers/OptimizeController.html":{},"classes/PaginationParams.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"entities/PrivateFile.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["default",{"_index":39,"title":{},"body":{"entities/Address.html":{},"injectables/AuthenticationService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"classes/EmailConfirmationDto.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/FindOneParams.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtTwoFactorGuard.html":{},"entities/Log.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"entities/Post.html":{},"classes/PostNotFoundException.html":{},"injectables/PostsSearchService.html":{},"entities/PrivateFile.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"entities/User.html":{},"classes/UserNotFoundException.html":{},"interfaces/VerificationTokenPayload.html":{}}}],["defined",{"_index":20,"title":{},"body":{"entities/Address.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"classes/EmailConfirmationDto.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"classes/FindOneParams.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/HealthController.html":{},"classes/HttpExceptionFilter.html":{},"classes/ImageProcessor.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"entities/Log.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"classes/PaginationParams.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"classes/PostNotFoundException.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"injectables/PrivateFileService.html":{},"entities/PublicFile.html":{},"injectables/PublicFileService.html":{},"classes/RegisterDto.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":1127,"title":{},"body":{"controllers/PostController.html":{}}}],["delete(':id",{"_index":1121,"title":{},"body":{"controllers/PostController.html":{}}}],["deleteavatar",{"_index":1520,"title":{},"body":{"injectables/UserService.html":{}}}],["deleteavatar(userid",{"_index":1541,"title":{},"body":{"injectables/UserService.html":{}}}],["deleteobject",{"_index":1342,"title":{},"body":{"injectables/PublicFileService.html":{}}}],["deletepublicfile",{"_index":1323,"title":{},"body":{"injectables/PublicFileService.html":{}}}],["deletepublicfile(fileid",{"_index":1328,"title":{},"body":{"injectables/PublicFileService.html":{}}}],["deletepublicfilewithqueryrunner",{"_index":1324,"title":{},"body":{"injectables/PublicFileService.html":{}}}],["deletepublicfilewithqueryrunner(fileid",{"_index":1330,"title":{},"body":{"injectables/PublicFileService.html":{}}}],["deleteresponse",{"_index":389,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/PostsService.html":{}}}],["deleteresponse.affected",{"_index":391,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/PostsService.html":{}}}],["dependencies",{"_index":45,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/EmailModule.html":{},"modules/FileModule.html":{},"modules/HealthModule.html":{},"modules/LoggerModule.html":{},"modules/PostModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":1710,"title":{},"body":{"index.html":{},"properties.html":{}}}],["development",{"_index":1716,"title":{},"body":{"index.html":{}}}],["disk",{"_index":864,"title":{},"body":{"controllers/HealthController.html":{}}}],["diskhealthindicator",{"_index":843,"title":{},"body":{"controllers/HealthController.html":{}}}],["documentation",{"_index":1602,"title":{},"body":{"coverage.html":{}}}],["donecallback",{"_index":1697,"title":{},"body":{"miscellaneous/functions.html":{}}}],["dto/create",{"_index":377,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/LogsService.html":{},"controllers/PostController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["dto/email",{"_index":578,"title":{},"body":{"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{}}}],["dto/register.dto",{"_index":191,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["dto/token",{"_index":780,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["dto/two",{"_index":1385,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["dto/update",{"_index":375,"title":{},"body":{"injectables/CategoriesService.html":{},"controllers/PostController.html":{},"injectables/PostsService.html":{}}}],["e2e",{"_index":1725,"title":{},"body":{"index.html":{}}}],["each",{"_index":436,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["eager",{"_index":1097,"title":{},"body":{"entities/Post.html":{},"entities/User.html":{}}}],["efficient",{"_index":1705,"title":{},"body":{"index.html":{}}}],["elastic/elasticsearch",{"_index":1630,"title":{},"body":{"dependencies.html":{}}}],["elasticsearch",{"_index":844,"title":{},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{}}}],["elasticsearch_node",{"_index":132,"title":{},"body":{"modules/AppModule.html":{}}}],["elasticsearch_password",{"_index":134,"title":{},"body":{"modules/AppModule.html":{}}}],["elasticsearch_username",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["elasticsearchhealthindicator",{"_index":540,"title":{"injectables/ElasticsearchHealthIndicator.html":{}},"body":{"injectables/ElasticsearchHealthIndicator.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"coverage.html":{},"overview.html":{}}}],["elasticsearchmodule",{"_index":1357,"title":{},"body":{"modules/SearchModule.html":{}}}],["elasticsearchmodule.registerasync",{"_index":1358,"title":{},"body":{"modules/SearchModule.html":{}}}],["elasticsearchservice",{"_index":547,"title":{},"body":{"injectables/ElasticsearchHealthIndicator.html":{},"injectables/PostsSearchService.html":{}}}],["email",{"_index":283,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/CreateUserDto.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"controllers/EmailSchedulingController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/LocalStrategy.html":{},"injectables/PostsService.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"injectables/UserService.html":{},"interfaces/VerificationTokenPayload.html":{}}}],["email.service",{"_index":624,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"injectables/EmailSchedulingService.html":{}}}],["email_confirmation_url",{"_index":125,"title":{},"body":{"modules/AppModule.html":{},"injectables/EmailConfirmationService.html":{}}}],["email_host",{"_index":137,"title":{},"body":{"modules/AppModule.html":{}}}],["email_password",{"_index":140,"title":{},"body":{"modules/AppModule.html":{}}}],["email_port",{"_index":138,"title":{},"body":{"modules/AppModule.html":{}}}],["email_user",{"_index":139,"title":{},"body":{"modules/AppModule.html":{}}}],["emailconfirmationcontroller",{"_index":562,"title":{"controllers/EmailConfirmationController.html":{}},"body":{"controllers/EmailConfirmationController.html":{},"coverage.html":{}}}],["emailconfirmationdto",{"_index":568,"title":{"classes/EmailConfirmationDto.html":{}},"body":{"controllers/EmailConfirmationController.html":{},"classes/EmailConfirmationDto.html":{},"coverage.html":{}}}],["emailconfirmationguard",{"_index":595,"title":{"guards/EmailConfirmationGuard.html":{}},"body":{"guards/EmailConfirmationGuard.html":{},"coverage.html":{}}}],["emailconfirmationservice",{"_index":199,"title":{"injectables/EmailConfirmationService.html":{}},"body":{"controllers/AuthenticationController.html":{},"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"coverage.html":{},"overview.html":{}}}],["emailmodule",{"_index":245,"title":{"modules/EmailModule.html":{}},"body":{"modules/AuthenticationModule.html":{},"modules/EmailModule.html":{},"modules/PostModule.html":{},"modules.html":{},"overview.html":{}}}],["emailschedule",{"_index":673,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{}}}],["emailschedule.content",{"_index":695,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["emailschedule.recipient",{"_index":693,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["emailschedule.subject",{"_index":694,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["emailscheduledto",{"_index":656,"title":{"classes/EmailScheduleDto.html":{}},"body":{"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"coverage.html":{}}}],["emailschedulingcontroller",{"_index":666,"title":{"controllers/EmailSchedulingController.html":{}},"body":{"controllers/EmailSchedulingController.html":{},"coverage.html":{}}}],["emailschedulingservice",{"_index":675,"title":{"injectables/EmailSchedulingService.html":{}},"body":{"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"coverage.html":{}}}],["emailservice",{"_index":613,"title":{"injectables/EmailService.html":{}},"body":{"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["endpoint",{"_index":1301,"title":{},"body":{"injectables/PrivateFileService.html":{},"injectables/PublicFileService.html":{}}}],["entities",{"_index":2,"title":{},"body":{"entities/Address.html":{},"entities/Category.html":{},"modules/DatabaseModule.html":{},"entities/Log.html":{},"entities/Post.html":{},"entities/PrivateFile.html":{},"entities/PublicFile.html":{},"entities/User.html":{},"overview.html":{}}}],["entities/category.entity",{"_index":371,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["entities/post.entity",{"_index":367,"title":{},"body":{"injectables/CategoriesService.html":{},"modules/PostModule.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{}}}],["entities/private",{"_index":764,"title":{},"body":{"modules/FileModule.html":{},"injectables/PrivateFileService.html":{}}}],["entities/public",{"_index":761,"title":{},"body":{"modules/FileModule.html":{},"injectables/PublicFileService.html":{}}}],["entities/user.entity",{"_index":1511,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["entity",{"_index":0,"title":{"entities/Address.html":{},"entities/Category.html":{},"entities/Log.html":{},"entities/Post.html":{},"entities/PrivateFile.html":{},"entities/PublicFile.html":{},"entities/User.html":{}},"body":{"entities/Address.html":{},"entities/Category.html":{},"entities/Log.html":{},"entities/Post.html":{},"entities/PrivateFile.html":{},"entities/PublicFile.html":{},"entities/User.html":{},"coverage.html":{}}}],["entity.js",{"_index":538,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["enumerations",{"_index":1682,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["environment",{"_index":474,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["error",{"_index":305,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"injectables/EmailConfirmationService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["error(message",{"_index":459,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["error.status",{"_index":815,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["error?.code",{"_index":316,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["error?.name",{"_index":645,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["exceed",{"_index":866,"title":{},"body":{"controllers/HealthController.html":{}}}],["exception",{"_index":727,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["exception.filter.ts",{"_index":886,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["exception.filter.ts:11",{"_index":888,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.getstatus",{"_index":894,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.message",{"_index":895,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception/category",{"_index":373,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["exception/post",{"_index":1234,"title":{},"body":{"injectables/PostsService.html":{}}}],["exception/user",{"_index":1564,"title":{},"body":{"injectables/UserService.html":{}}}],["exceptionfilter",{"_index":887,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exceptionsloggerfilter",{"_index":87,"title":{"classes/ExceptionsLoggerFilter.html":{}},"body":{"modules/AppModule.html":{},"classes/ExceptionsLoggerFilter.html":{},"coverage.html":{}}}],["exclude",{"_index":1464,"title":{},"body":{"entities/User.html":{}}}],["excludenullinterceptor",{"_index":731,"title":{"injectables/ExcludeNullInterceptor.html":{}},"body":{"injectables/ExcludeNullInterceptor.html":{},"coverage.html":{}}}],["executioncontext",{"_index":600,"title":{},"body":{"guards/EmailConfirmationGuard.html":{},"injectables/ExcludeNullInterceptor.html":{}}}],["exist",{"_index":1567,"title":{},"body":{"injectables/UserService.html":{}}}],["exists",{"_index":321,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["expired",{"_index":647,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["expiresin",{"_index":266,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{}}}],["export",{"_index":38,"title":{},"body":{"entities/Address.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"classes/EmailConfirmationDto.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"modules/FileModule.html":{},"classes/FindOneParams.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/HttpExceptionFilter.html":{},"classes/ImageProcessor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"entities/Log.html":{},"modules/LoggerModule.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"classes/PaginationParams.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"classes/PostNotFoundException.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"injectables/PrivateFileService.html":{},"entities/PublicFile.html":{},"injectables/PublicFileService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"modules/SearchModule.html":{},"interfaces/TokenPayload.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"interfaces/VerificationTokenPayload.html":{}}}],["exports",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/EmailModule.html":{},"modules/FileModule.html":{},"modules/HealthModule.html":{},"modules/LoggerModule.html":{},"modules/OptimizeModule.html":{},"modules/PostModule.html":{},"modules/SearchModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":192,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/GoogleAuthenticationController.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LogsMiddleware.html":{},"controllers/OptimizeController.html":{},"interfaces/RequestWithUser.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["express.multer.file",{"_index":915,"title":{},"body":{"classes/ImageProcessor.html":{},"controllers/OptimizeController.html":{},"controllers/UserController.html":{}}}],["extends",{"_index":403,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"injectables/CustomLogger.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/PostNotFoundException.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserNotFoundException.html":{}}}],["extractjwt",{"_index":945,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["extractjwt.fromextractors",{"_index":951,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["factor",{"_index":260,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"coverage.html":{}}}],["factor.guard",{"_index":1135,"title":{},"body":{"controllers/PostController.html":{}}}],["factor.guard.ts",{"_index":967,"title":{},"body":{"injectables/JwtTwoFactorGuard.html":{},"coverage.html":{}}}],["factor.strategy.ts",{"_index":969,"title":{},"body":{"injectables/JwtTwoFactorStrategy.html":{},"coverage.html":{}}}],["factor.strategy.ts:13",{"_index":970,"title":{},"body":{"injectables/JwtTwoFactorStrategy.html":{}}}],["factor.strategy.ts:28",{"_index":971,"title":{},"body":{"injectables/JwtTwoFactorStrategy.html":{}}}],["failed",{"_index":561,"title":{},"body":{"injectables/ElasticsearchHealthIndicator.html":{}}}],["false",{"_index":290,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"entities/User.html":{}}}],["field",{"_index":1578,"title":{},"body":{"injectables/UserService.html":{}}}],["fields",{"_index":1206,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["file",{"_index":5,"title":{},"body":{"entities/Address.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"classes/EmailConfirmationDto.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"modules/FileModule.html":{},"classes/FindOneParams.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/HttpExceptionFilter.html":{},"classes/ImageProcessor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"entities/Log.html":{},"modules/LoggerModule.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"classes/PaginationParams.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"classes/PostNotFoundException.html":{},"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"injectables/PrivateFileService.html":{},"entities/PublicFile.html":{},"injectables/PublicFileService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"modules/SearchModule.html":{},"interfaces/TokenPayload.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{}}}],["file.buffer",{"_index":1494,"title":{},"body":{"controllers/UserController.html":{}}}],["file.entity",{"_index":762,"title":{},"body":{"modules/FileModule.html":{},"injectables/PrivateFileService.html":{},"injectables/PublicFileService.html":{},"entities/User.html":{}}}],["file.entity.ts",{"_index":1263,"title":{},"body":{"entities/PrivateFile.html":{},"entities/PublicFile.html":{},"coverage.html":{}}}],["file.entity.ts:10",{"_index":1266,"title":{},"body":{"entities/PrivateFile.html":{}}}],["file.entity.ts:12",{"_index":1320,"title":{},"body":{"entities/PublicFile.html":{}}}],["file.entity.ts:13",{"_index":1269,"title":{},"body":{"entities/PrivateFile.html":{}}}],["file.entity.ts:6",{"_index":1319,"title":{},"body":{"entities/PublicFile.html":{}}}],["file.entity.ts:7",{"_index":1265,"title":{},"body":{"entities/PrivateFile.html":{}}}],["file.entity.ts:9",{"_index":1321,"title":{},"body":{"entities/PublicFile.html":{}}}],["file.info.owner.id",{"_index":1590,"title":{},"body":{"injectables/UserService.html":{}}}],["file.key",{"_index":1343,"title":{},"body":{"injectables/PublicFileService.html":{},"injectables/UserService.html":{}}}],["file.originalname",{"_index":1495,"title":{},"body":{"controllers/UserController.html":{}}}],["file.owner",{"_index":1451,"title":{},"body":{"entities/User.html":{}}}],["file.service",{"_index":759,"title":{},"body":{"modules/FileModule.html":{},"injectables/UserService.html":{}}}],["file.service.ts",{"_index":1271,"title":{},"body":{"injectables/PrivateFileService.html":{},"injectables/PublicFileService.html":{},"coverage.html":{}}}],["file.service.ts:10",{"_index":1276,"title":{},"body":{"injectables/PrivateFileService.html":{},"injectables/PublicFileService.html":{}}}],["file.service.ts:17",{"_index":1287,"title":{},"body":{"injectables/PrivateFileService.html":{},"injectables/PublicFileService.html":{}}}],["file.service.ts:44",{"_index":1329,"title":{},"body":{"injectables/PublicFileService.html":{}}}],["file.service.ts:51",{"_index":1281,"title":{},"body":{"injectables/PrivateFileService.html":{}}}],["file.service.ts:58",{"_index":1331,"title":{},"body":{"injectables/PublicFileService.html":{}}}],["file.service.ts:82",{"_index":1279,"title":{},"body":{"injectables/PrivateFileService.html":{}}}],["file.stream.pipe(res",{"_index":1501,"title":{},"body":{"controllers/UserController.html":{}}}],["filebuffer",{"_index":919,"title":{},"body":{"classes/ImageProcessor.html":{}}}],["filedata",{"_index":929,"title":{},"body":{"classes/ImageProcessor.html":{}}}],["fileid",{"_index":1282,"title":{},"body":{"injectables/PrivateFileService.html":{},"injectables/PublicFileService.html":{},"injectables/UserService.html":{}}}],["fileinfo",{"_index":1312,"title":{},"body":{"injectables/PrivateFileService.html":{}}}],["fileinfo.key",{"_index":1315,"title":{},"body":{"injectables/PrivateFileService.html":{}}}],["fileinterceptor",{"_index":1489,"title":{},"body":{"controllers/UserController.html":{}}}],["filemodule",{"_index":752,"title":{"modules/FileModule.html":{}},"body":{"modules/FileModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["filename",{"_index":1286,"title":{},"body":{"injectables/PrivateFileService.html":{},"injectables/PublicFileService.html":{},"injectables/UserService.html":{}}}],["files",{"_index":914,"title":{},"body":{"classes/ImageProcessor.html":{},"controllers/OptimizeController.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["files.map((file",{"_index":918,"title":{},"body":{"classes/ImageProcessor.html":{}}}],["files[index",{"_index":930,"title":{},"body":{"classes/ImageProcessor.html":{}}}],["finally",{"_index":1586,"title":{},"body":{"injectables/UserService.html":{}}}],["findall",{"_index":348,"title":{},"body":{"injectables/CategoriesService.html":{},"controllers/PostController.html":{},"injectables/PostsService.html":{}}}],["findall(offset",{"_index":1227,"title":{},"body":{"injectables/PostsService.html":{}}}],["findall(search",{"_index":1114,"title":{},"body":{"controllers/PostController.html":{}}}],["findone",{"_index":349,"title":{},"body":{"injectables/CategoriesService.html":{},"controllers/PostController.html":{},"injectables/PostsService.html":{}}}],["findone(@param('id",{"_index":1145,"title":{},"body":{"controllers/PostController.html":{}}}],["findone(id",{"_index":360,"title":{},"body":{"injectables/CategoriesService.html":{},"controllers/PostController.html":{},"injectables/PostsService.html":{}}}],["findoneparams",{"_index":766,"title":{"classes/FindOneParams.html":{}},"body":{"classes/FindOneParams.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["first",{"_index":607,"title":{},"body":{"guards/EmailConfirmationGuard.html":{}}}],["found",{"_index":409,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"classes/PostNotFoundException.html":{},"classes/UserNotFoundException.html":{}}}],["found.exception",{"_index":374,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["found.exception.ts",{"_index":402,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"classes/PostNotFoundException.html":{},"classes/UserNotFoundException.html":{},"coverage.html":{}}}],["found.exception.ts:3",{"_index":406,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"classes/PostNotFoundException.html":{},"classes/UserNotFoundException.html":{}}}],["framework",{"_index":1703,"title":{},"body":{"index.html":{}}}],["function",{"_index":1615,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":1687,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generatepresignedurl",{"_index":1272,"title":{},"body":{"injectables/PrivateFileService.html":{}}}],["generatepresignedurl(key",{"_index":1278,"title":{},"body":{"injectables/PrivateFileService.html":{}}}],["generatetwofactorauthenticationsecret",{"_index":1401,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["generatetwofactorauthenticationsecret(user",{"_index":1405,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["get(':id",{"_index":1144,"title":{},"body":{"controllers/PostController.html":{}}}],["get('files",{"_index":1502,"title":{},"body":{"controllers/UserController.html":{}}}],["get('files')@useguards(jwtauthenticationguard",{"_index":1482,"title":{},"body":{"controllers/UserController.html":{}}}],["get('files/:id",{"_index":1498,"title":{},"body":{"controllers/UserController.html":{}}}],["get('files/:id')@useguards(jwtauthenticationguard",{"_index":1485,"title":{},"body":{"controllers/UserController.html":{}}}],["get('image/:id",{"_index":1034,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["get('refresh",{"_index":239,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["get()@healthcheck",{"_index":836,"title":{},"body":{"controllers/HealthController.html":{}}}],["getallprivatefiles",{"_index":1474,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["getallprivatefiles(@req",{"_index":1503,"title":{},"body":{"controllers/UserController.html":{}}}],["getallprivatefiles(request",{"_index":1481,"title":{},"body":{"controllers/UserController.html":{}}}],["getallprivatefiles(userid",{"_index":1543,"title":{},"body":{"injectables/UserService.html":{}}}],["getauthenticateduser",{"_index":272,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getauthenticateduser(email",{"_index":280,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getbyemail",{"_index":1521,"title":{},"body":{"injectables/UserService.html":{}}}],["getbyemail(email",{"_index":1545,"title":{},"body":{"injectables/UserService.html":{}}}],["getbyid",{"_index":1522,"title":{},"body":{"injectables/UserService.html":{}}}],["getbyid(id",{"_index":1547,"title":{},"body":{"injectables/UserService.html":{}}}],["getcookieforlogout",{"_index":273,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getcookiesforuser",{"_index":787,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["getcookiesforuser(user",{"_index":794,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["getcookiewithjwtaccesstoken",{"_index":274,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getcookiewithjwtaccesstoken(userid",{"_index":285,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getcookiewithjwtrefreshtoken",{"_index":275,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getcookiewithjwtrefreshtoken(userid",{"_index":291,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getjobresult",{"_index":1031,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["getjobresult(@res",{"_index":1056,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["getjobresult(response",{"_index":1033,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["getloglevels",{"_index":471,"title":{},"body":{"injectables/CustomLogger.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["getloglevels(environment",{"_index":478,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["getloglevels(isproduction",{"_index":1693,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getobject",{"_index":1314,"title":{},"body":{"injectables/PrivateFileService.html":{}}}],["getprivatefile",{"_index":1273,"title":{},"body":{"injectables/PrivateFileService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["getprivatefile(fileid",{"_index":1280,"title":{},"body":{"injectables/PrivateFileService.html":{}}}],["getprivatefile(request",{"_index":1484,"title":{},"body":{"controllers/UserController.html":{}}}],["getprivatefile(userid",{"_index":1549,"title":{},"body":{"injectables/UserService.html":{}}}],["getting",{"_index":1699,"title":{"index.html":{}},"body":{}}],["getuserdata",{"_index":788,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["getuserdata(token",{"_index":796,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["getuserifrefreshtokenmatches",{"_index":1523,"title":{},"body":{"injectables/UserService.html":{}}}],["getuserifrefreshtokenmatches(refreshtoken",{"_index":1551,"title":{},"body":{"injectables/UserService.html":{}}}],["google",{"_index":775,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["google.auth.oauth2(clientid",{"_index":810,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["google.oauth2('v2').userinfo",{"_index":823,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["google_auth_client_id",{"_index":142,"title":{},"body":{"modules/AppModule.html":{}}}],["google_auth_client_secret",{"_index":143,"title":{},"body":{"modules/AppModule.html":{}}}],["googleapis",{"_index":803,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"dependencies.html":{}}}],["googleauthenticationcontroller",{"_index":772,"title":{"controllers/GoogleAuthenticationController.html":{}},"body":{"controllers/GoogleAuthenticationController.html":{},"coverage.html":{}}}],["googleauthenticationservice",{"_index":782,"title":{"injectables/GoogleAuthenticationService.html":{}},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"coverage.html":{}}}],["graph",{"_index":1752,"title":{},"body":{"modules.html":{}}}],["grow",{"_index":1732,"title":{},"body":{"index.html":{}}}],["guard",{"_index":594,"title":{"guards/EmailConfirmationGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guard/jwt",{"_index":194,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["guard/local",{"_index":188,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["guards",{"_index":596,"title":{},"body":{"guards/EmailConfirmationGuard.html":{}}}],["handle",{"_index":749,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["handleoptimization",{"_index":901,"title":{},"body":{"classes/ImageProcessor.html":{}}}],["handleoptimization(job",{"_index":902,"title":{},"body":{"classes/ImageProcessor.html":{}}}],["handleregistereduser",{"_index":789,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["handleregistereduser(user",{"_index":798,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["hapi/joi",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["hashedpassword",{"_index":298,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["health",{"_index":542,"title":{},"body":{"injectables/ElasticsearchHealthIndicator.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"coverage.html":{}}}],["health.controller",{"_index":879,"title":{},"body":{"modules/HealthModule.html":{}}}],["health/health.module",{"_index":97,"title":{},"body":{"modules/AppModule.html":{}}}],["healthcheck",{"_index":839,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckerror",{"_index":554,"title":{},"body":{"injectables/ElasticsearchHealthIndicator.html":{}}}],["healthcheckservice",{"_index":838,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcontroller",{"_index":833,"title":{"controllers/HealthController.html":{}},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"coverage.html":{}}}],["healthindicator",{"_index":544,"title":{},"body":{"injectables/ElasticsearchHealthIndicator.html":{}}}],["healthindicatorresult",{"_index":553,"title":{},"body":{"injectables/ElasticsearchHealthIndicator.html":{}}}],["healthmodule",{"_index":55,"title":{"modules/HealthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{},"modules.html":{},"overview.html":{}}}],["heap",{"_index":857,"title":{},"body":{"controllers/HealthController.html":{}}}],["here",{"_index":634,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"index.html":{}}}],["hits",{"_index":1181,"title":{},"body":{"interfaces/PostSearchResult.html":{},"injectables/PostsSearchService.html":{}}}],["hits.hits.map((item",{"_index":1212,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["hits.total.valueof",{"_index":1211,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["host",{"_index":102,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"injectables/EmailService.html":{},"classes/ExceptionsLoggerFilter.html":{},"classes/HttpExceptionFilter.html":{},"modules/PostModule.html":{}}}],["host.switchtohttp",{"_index":890,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["http://www.google.com",{"_index":850,"title":{},"body":{"controllers/HealthController.html":{}}}],["httpcode",{"_index":180,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/PostController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["httpcode(200",{"_index":214,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/PostController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["httpcode(200)@useguards(localauthenticationguard)@post('log",{"_index":164,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["httpexception",{"_index":300,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UserService.html":{}}}],["httpexceptionfilter",{"_index":884,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["httphealthindicator",{"_index":841,"title":{},"body":{"controllers/HealthController.html":{}}}],["httpmodule",{"_index":881,"title":{},"body":{"modules/HealthModule.html":{}}}],["httponly",{"_index":337,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["https://nestjs.com",{"_index":1745,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":301,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UserService.html":{}}}],["httpstatus.bad_request",{"_index":322,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["httpstatus.internal_server_error",{"_index":326,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["httpstatus.not_found",{"_index":1568,"title":{},"body":{"injectables/UserService.html":{}}}],["id",{"_index":12,"title":{},"body":{"entities/Address.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"classes/FindOneParams.html":{},"entities/Log.html":{},"controllers/OptimizeController.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"classes/PostNotFoundException.html":{},"interfaces/PostSearchBody.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"injectables/PrivateFileService.html":{},"entities/PublicFile.html":{},"injectables/PublicFileService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{}}}],["identifier",{"_index":1603,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":1257,"title":{},"body":{"injectables/PostsService.html":{}}}],["ids.length",{"_index":1260,"title":{},"body":{"injectables/PostsService.html":{}}}],["image",{"_index":932,"title":{},"body":{"classes/ImageProcessor.html":{},"modules/OptimizeModule.html":{}}}],["image.processor.js",{"_index":1075,"title":{},"body":{"modules/OptimizeModule.html":{}}}],["imagebuffer",{"_index":1533,"title":{},"body":{"injectables/UserService.html":{}}}],["imagemin",{"_index":910,"title":{},"body":{"classes/ImageProcessor.html":{},"dependencies.html":{}}}],["imagemin.buffer(filebuffer",{"_index":921,"title":{},"body":{"classes/ImageProcessor.html":{}}}],["imageminpngquant",{"_index":911,"title":{},"body":{"classes/ImageProcessor.html":{}}}],["imageprocessor",{"_index":899,"title":{"classes/ImageProcessor.html":{}},"body":{"classes/ImageProcessor.html":{},"modules/OptimizeModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["imageprocessor(job",{"_index":1696,"title":{},"body":{"miscellaneous/functions.html":{}}}],["imagequeue",{"_index":1049,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["implements",{"_index":488,"title":{},"body":{"classes/DatabaseLogger.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/ExcludeNullInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LogsMiddleware.html":{}}}],["import",{"_index":31,"title":{},"body":{"entities/Address.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"classes/EmailConfirmationDto.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"modules/FileModule.html":{},"classes/FindOneParams.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/HttpExceptionFilter.html":{},"classes/ImageProcessor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"entities/Log.html":{},"modules/LoggerModule.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"classes/PaginationParams.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"classes/PostNotFoundException.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"injectables/PrivateFileService.html":{},"entities/PublicFile.html":{},"injectables/PublicFileService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"modules/SearchModule.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{}}}],["imports",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"modules/FileModule.html":{},"modules/HealthModule.html":{},"modules/LoggerModule.html":{},"modules/OptimizeModule.html":{},"modules/PostModule.html":{},"modules/SearchModule.html":{},"modules/UserModule.html":{}}}],["in(ids",{"_index":1261,"title":{},"body":{"injectables/PostsService.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"entities/Address.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"classes/EmailConfirmationDto.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"classes/FindOneParams.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/HealthController.html":{},"classes/HttpExceptionFilter.html":{},"classes/ImageProcessor.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"entities/Log.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"classes/PaginationParams.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"injectables/PrivateFileService.html":{},"entities/PublicFile.html":{},"injectables/PublicFileService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"interfaces/VerificationTokenPayload.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["index()@manytoone(undefined",{"_index":1093,"title":{},"body":{"entities/Post.html":{}}}],["indexpost",{"_index":1187,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["indexpost(post",{"_index":1189,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["indicator",{"_index":845,"title":{},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{}}}],["indicator.ts",{"_index":543,"title":{},"body":{"injectables/ElasticsearchHealthIndicator.html":{},"coverage.html":{}}}],["indicator.ts:10",{"_index":548,"title":{},"body":{"injectables/ElasticsearchHealthIndicator.html":{}}}],["indicator.ts:15",{"_index":550,"title":{},"body":{"injectables/ElasticsearchHealthIndicator.html":{}}}],["info",{"_index":3,"title":{},"body":{"entities/Address.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"classes/EmailConfirmationDto.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"modules/FileModule.html":{},"classes/FindOneParams.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/HttpExceptionFilter.html":{},"classes/ImageProcessor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"entities/Log.html":{},"modules/LoggerModule.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"classes/PaginationParams.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"classes/PostNotFoundException.html":{},"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"injectables/PrivateFileService.html":{},"entities/PublicFile.html":{},"injectables/PublicFileService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"modules/SearchModule.html":{},"interfaces/TokenPayload.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"interfaces/VerificationTokenPayload.html":{}}}],["inject",{"_index":106,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/DatabaseModule.html":{},"modules/PostModule.html":{},"modules/SearchModule.html":{}}}],["injectable",{"_index":269,"title":{"injectables/AuthenticationService.html":{},"injectables/CategoriesService.html":{},"injectables/CustomLogger.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"injectables/PrivateFileService.html":{},"injectables/PublicFileService.html":{},"injectables/TwoFactorAuthenticationService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AuthenticationService.html":{},"injectables/CategoriesService.html":{},"injectables/CustomLogger.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"injectables/PrivateFileService.html":{},"injectables/PublicFileService.html":{},"injectables/TwoFactorAuthenticationService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":270,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/CategoriesService.html":{},"injectables/CustomLogger.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"injectables/PrivateFileService.html":{},"injectables/PublicFileService.html":{},"injectables/TwoFactorAuthenticationService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectqueue",{"_index":1039,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["injectrepository",{"_index":368,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/LogsService.html":{},"injectables/PostsService.html":{},"injectables/PrivateFileService.html":{},"injectables/PublicFileService.html":{},"injectables/UserService.html":{}}}],["injectrepository(log",{"_index":1022,"title":{},"body":{"injectables/LogsService.html":{}}}],["injectrepository(post",{"_index":378,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/PostsService.html":{}}}],["injectrepository(privatefile",{"_index":1294,"title":{},"body":{"injectables/PrivateFileService.html":{}}}],["injectrepository(publicfile",{"_index":1333,"title":{},"body":{"injectables/PublicFileService.html":{}}}],["injectrepository(user",{"_index":1565,"title":{},"body":{"injectables/UserService.html":{}}}],["installation",{"_index":1713,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":1715,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":734,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["intercept(context",{"_index":735,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["interface",{"_index":1173,"title":{"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"interfaces/VerificationTokenPayload.html":{}},"body":{"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{}}}],["interfaces",{"_index":1175,"title":{},"body":{"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"interfaces/VerificationTokenPayload.html":{},"overview.html":{}}}],["internalservererrorexception",{"_index":1563,"title":{},"body":{"injectables/UserService.html":{}}}],["iscodevalid",{"_index":1393,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["iscompleted",{"_index":1060,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["iscreatinglogs",{"_index":1027,"title":{},"body":{"injectables/LogsService.html":{}}}],["isdatestring",{"_index":661,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["isemail",{"_index":663,"title":{},"body":{"classes/EmailScheduleDto.html":{},"classes/RegisterDto.html":{}}}],["isemailconfirmed",{"_index":1438,"title":{},"body":{"entities/User.html":{},"injectables/UserService.html":{}}}],["ishealthy",{"_index":545,"title":{},"body":{"injectables/ElasticsearchHealthIndicator.html":{}}}],["ishealthy(key",{"_index":549,"title":{},"body":{"injectables/ElasticsearchHealthIndicator.html":{}}}],["isnotempty",{"_index":424,"title":{},"body":{"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/EmailConfirmationDto.html":{},"classes/EmailScheduleDto.html":{},"classes/RegisterDto.html":{},"classes/TokenVerificationDto.html":{}}}],["isnumber",{"_index":1084,"title":{},"body":{"classes/PaginationParams.html":{}}}],["isnumberstring",{"_index":770,"title":{},"body":{"classes/FindOneParams.html":{}}}],["isoptional",{"_index":1086,"title":{},"body":{"classes/PaginationParams.html":{}}}],["isoptional()@type(undefined)@isnumber()@min(0",{"_index":1082,"title":{},"body":{"classes/PaginationParams.html":{}}}],["isoptional()@type(undefined)@isnumber()@min(1",{"_index":1080,"title":{},"body":{"classes/PaginationParams.html":{}}}],["ispasswordmatching",{"_index":332,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["isproduction",{"_index":1694,"title":{},"body":{"miscellaneous/functions.html":{}}}],["isrefreshtokenmatching",{"_index":1597,"title":{},"body":{"injectables/UserService.html":{}}}],["isregisteredwithgoogle",{"_index":1439,"title":{},"body":{"entities/User.html":{},"injectables/UserService.html":{}}}],["issecondfactorauthenticated",{"_index":286,"title":{},"body":{"injectables/AuthenticationService.html":{},"interfaces/TokenPayload.html":{}}}],["isstring",{"_index":423,"title":{},"body":{"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/EmailConfirmationDto.html":{},"classes/EmailScheduleDto.html":{},"classes/RegisterDto.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{}}}],["isstring()@isnotempty",{"_index":419,"title":{},"body":{"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/EmailConfirmationDto.html":{},"classes/EmailScheduleDto.html":{},"classes/TokenVerificationDto.html":{}}}],["isstring()@isnotempty()@minlength(7",{"_index":1351,"title":{},"body":{"classes/RegisterDto.html":{}}}],["isstring({each",{"_index":432,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["istwofactorauthenticationcodevalid",{"_index":1402,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["istwofactorauthenticationcodevalid(twofactorauthenticationcode",{"_index":1407,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["istwofactorauthenticationenabled",{"_index":1440,"title":{},"body":{"entities/User.html":{},"injectables/UserService.html":{}}}],["item._source",{"_index":1213,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["items",{"_index":1245,"title":{},"body":{"injectables/PostsService.html":{}}}],["job",{"_index":691,"title":{},"body":{"injectables/EmailSchedulingService.html":{},"classes/ImageProcessor.html":{},"controllers/OptimizeController.html":{},"miscellaneous/functions.html":{}}}],["job.data.files",{"_index":916,"title":{},"body":{"classes/ImageProcessor.html":{}}}],["job.id",{"_index":1055,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["job.iscompleted",{"_index":1061,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["job.start",{"_index":698,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["job.stop",{"_index":700,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["jobid",{"_index":1054,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["joi",{"_index":80,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.number",{"_index":111,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.number().required",{"_index":115,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.object",{"_index":110,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().required",{"_index":113,"title":{},"body":{"modules/AppModule.html":{}}}],["join",{"_index":1071,"title":{},"body":{"modules/OptimizeModule.html":{},"index.html":{}}}],["join(__dirname",{"_index":1074,"title":{},"body":{"modules/OptimizeModule.html":{}}}],["joincolumn",{"_index":1465,"title":{},"body":{"entities/User.html":{}}}],["joincolumn()@onetoone(undefined",{"_index":1444,"title":{},"body":{"entities/User.html":{}}}],["jointable",{"_index":1106,"title":{},"body":{"entities/Post.html":{}}}],["json.stringify(parameters",{"_index":525,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["jwt",{"_index":948,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"dependencies.html":{}}}],["jwt_access_token_expiration_time",{"_index":120,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{}}}],["jwt_access_token_secret",{"_index":119,"title":{},"body":{"modules/AppModule.html":{}}}],["jwt_refresh_token_expiration_time",{"_index":122,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthenticationService.html":{}}}],["jwt_refresh_token_secret",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["jwt_verification_token_expiration_time",{"_index":124,"title":{},"body":{"modules/AppModule.html":{},"injectables/EmailConfirmationService.html":{}}}],["jwt_verification_token_secret",{"_index":123,"title":{},"body":{"modules/AppModule.html":{}}}],["jwtauthenticationguard",{"_index":193,"title":{"injectables/JwtAuthenticationGuard.html":{}},"body":{"controllers/AuthenticationController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{},"injectables/JwtAuthenticationGuard.html":{},"controllers/PostController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":950,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["jwtmodule",{"_index":256,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["jwtmodule.registerasync",{"_index":262,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["jwtrefreshguard",{"_index":197,"title":{"injectables/JwtRefreshGuard.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/JwtRefreshGuard.html":{},"coverage.html":{}}}],["jwtrefreshtokenstrategy",{"_index":938,"title":{"injectables/JwtRefreshTokenStrategy.html":{}},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"coverage.html":{}}}],["jwtservice",{"_index":278,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{}}}],["jwtstrategy",{"_index":246,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["jwttwofactorguard",{"_index":966,"title":{"injectables/JwtTwoFactorGuard.html":{}},"body":{"injectables/JwtTwoFactorGuard.html":{},"controllers/PostController.html":{},"coverage.html":{}}}],["jwttwofactorstrategy",{"_index":968,"title":{"injectables/JwtTwoFactorStrategy.html":{}},"body":{"injectables/JwtTwoFactorStrategy.html":{},"coverage.html":{}}}],["kamil",{"_index":1742,"title":{},"body":{"index.html":{}}}],["key",{"_index":551,"title":{},"body":{"injectables/ElasticsearchHealthIndicator.html":{},"injectables/PostsSearchService.html":{},"entities/PrivateFile.html":{},"injectables/PrivateFileService.html":{},"entities/PublicFile.html":{},"injectables/PublicFileService.html":{}}}],["legend",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/EmailModule.html":{},"modules/FileModule.html":{},"modules/HealthModule.html":{},"modules/LoggerModule.html":{},"modules/PostModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["level",{"_index":417,"title":{},"body":{"classes/CreateLogDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"entities/Log.html":{}}}],["levels",{"_index":473,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["levels.ts",{"_index":1622,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["license",{"_index":1748,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1729,"title":{},"body":{"index.html":{}}}],["limit",{"_index":1078,"title":{},"body":{"classes/PaginationParams.html":{},"controllers/PostController.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{}}}],["link",{"_index":588,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["link')@useguards(jwtauthenticationguard",{"_index":574,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["literal",{"_index":1182,"title":{},"body":{"interfaces/PostSearchResult.html":{}}}],["local",{"_index":980,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["localauthenticationguard",{"_index":187,"title":{"injectables/LocalAuthenticationGuard.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/LocalAuthenticationGuard.html":{},"coverage.html":{}}}],["localstrategy",{"_index":247,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthenticationModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["log",{"_index":449,"title":{"entities/Log.html":{}},"body":{"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"entities/Log.html":{},"modules/LoggerModule.html":{},"injectables/LogsService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["log(level",{"_index":499,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["log(message",{"_index":462,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["log.dto",{"_index":1021,"title":{},"body":{"injectables/LogsService.html":{}}}],["log.dto.ts",{"_index":415,"title":{},"body":{"classes/CreateLogDto.html":{},"coverage.html":{}}}],["log.dto.ts:10",{"_index":422,"title":{},"body":{"classes/CreateLogDto.html":{}}}],["log.dto.ts:14",{"_index":421,"title":{},"body":{"classes/CreateLogDto.html":{}}}],["log.dto.ts:6",{"_index":420,"title":{},"body":{"classes/CreateLogDto.html":{}}}],["log.entity",{"_index":998,"title":{},"body":{"modules/LoggerModule.html":{},"injectables/LogsService.html":{}}}],["logger",{"_index":490,"title":{},"body":{"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"modules/LoggerModule.html":{},"injectables/LogsMiddleware.html":{}}}],["logger('http",{"_index":1004,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["logger.filter",{"_index":89,"title":{},"body":{"modules/AppModule.html":{}}}],["logger.filter.ts",{"_index":722,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{},"coverage.html":{}}}],["logger.filter.ts:6",{"_index":726,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["logger.service",{"_index":469,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts",{"_index":445,"title":{},"body":{"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"coverage.html":{}}}],["logger.ts:15",{"_index":507,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logger.ts:27",{"_index":463,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts:30",{"_index":509,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logger.ts:36",{"_index":461,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts:45",{"_index":467,"title":{},"body":{"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{}}}],["logger.ts:48",{"_index":512,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logger.ts:5",{"_index":498,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logger.ts:51",{"_index":501,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logger.ts:54",{"_index":457,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts:63",{"_index":465,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts:69",{"_index":514,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logger.ts:7",{"_index":504,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logger.ts:9",{"_index":455,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger/logger.module",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["loggermodule",{"_index":56,"title":{"modules/LoggerModule.html":{}},"body":{"modules/AppModule.html":{},"modules/LoggerModule.html":{},"modules.html":{},"overview.html":{}}}],["login",{"_index":154,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["login(@req",{"_index":217,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["login(request",{"_index":163,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["loglevel",{"_index":1695,"title":{},"body":{"miscellaneous/functions.html":{}}}],["loglevels",{"_index":477,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logmigration",{"_index":491,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logmigration(message",{"_index":502,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logout",{"_index":155,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["logout(@req",{"_index":231,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["logout(request",{"_index":167,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["logquery",{"_index":492,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logquery(query",{"_index":503,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logqueryerror",{"_index":493,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logqueryerror(error",{"_index":506,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logqueryslow",{"_index":494,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logqueryslow(time",{"_index":508,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logs.service",{"_index":470,"title":{},"body":{"injectables/CustomLogger.html":{},"modules/LoggerModule.html":{}}}],["logschemabuild",{"_index":495,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logschemabuild(message",{"_index":511,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["logsmiddleware",{"_index":94,"title":{"injectables/LogsMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/LogsMiddleware.html":{},"coverage.html":{}}}],["logsrepository",{"_index":1018,"title":{},"body":{"injectables/LogsService.html":{}}}],["logsservice",{"_index":447,"title":{"injectables/LogsService.html":{}},"body":{"injectables/CustomLogger.html":{},"modules/LoggerModule.html":{},"injectables/LogsService.html":{},"coverage.html":{},"overview.html":{}}}],["mail",{"_index":709,"title":{},"body":{"injectables/EmailService.html":{}}}],["mail.options",{"_index":707,"title":{},"body":{"injectables/EmailService.html":{}}}],["manager",{"_index":1134,"title":{},"body":{"controllers/PostController.html":{},"modules/PostModule.html":{},"dependencies.html":{}}}],["manytomany",{"_index":398,"title":{},"body":{"entities/Category.html":{},"entities/Post.html":{}}}],["manytomany(undefined",{"_index":395,"title":{},"body":{"entities/Category.html":{},"entities/Post.html":{}}}],["manytoone",{"_index":1107,"title":{},"body":{"entities/Post.html":{},"entities/PrivateFile.html":{}}}],["manytoone(undefined",{"_index":1267,"title":{},"body":{"entities/PrivateFile.html":{}}}],["map",{"_index":742,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["markemailasconfirmed",{"_index":1524,"title":{},"body":{"injectables/UserService.html":{}}}],["markemailasconfirmed(email",{"_index":1553,"title":{},"body":{"injectables/UserService.html":{}}}],["match",{"_index":1215,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["matching",{"_index":41,"title":{},"body":{"entities/Address.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"classes/EmailConfirmationDto.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"modules/FileModule.html":{},"classes/FindOneParams.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/HttpExceptionFilter.html":{},"classes/ImageProcessor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"entities/Log.html":{},"modules/LoggerModule.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"classes/PaginationParams.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"classes/PostNotFoundException.html":{},"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"injectables/PrivateFileService.html":{},"entities/PublicFile.html":{},"injectables/PublicFileService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"modules/SearchModule.html":{},"interfaces/TokenPayload.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["max",{"_index":339,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["memory",{"_index":855,"title":{},"body":{"controllers/HealthController.html":{}}}],["memoryhealthindicator",{"_index":842,"title":{},"body":{"controllers/HealthController.html":{}}}],["message",{"_index":418,"title":{},"body":{"classes/CreateLogDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"classes/HttpExceptionFilter.html":{},"entities/Log.html":{},"injectables/LogsMiddleware.html":{}}}],["metadata",{"_index":1677,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":1008,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["methods",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/CategoriesService.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/HealthController.html":{},"classes/HttpExceptionFilter.html":{},"classes/ImageProcessor.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"controllers/PostController.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"injectables/PrivateFileService.html":{},"injectables/PublicFileService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["middlewareconsumer",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["min",{"_index":1085,"title":{},"body":{"classes/PaginationParams.html":{}}}],["min(0",{"_index":1088,"title":{},"body":{"classes/PaginationParams.html":{}}}],["min(1",{"_index":1089,"title":{},"body":{"classes/PaginationParams.html":{}}}],["minlength",{"_index":1353,"title":{},"body":{"classes/RegisterDto.html":{}}}],["minlength(7",{"_index":1354,"title":{},"body":{"classes/RegisterDto.html":{}}}],["miscellaneous",{"_index":1681,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["mit",{"_index":1728,"title":{},"body":{"index.html":{}}}],["mode",{"_index":1720,"title":{},"body":{"index.html":{}}}],["module",{"_index":42,"title":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"modules/FileModule.html":{},"modules/HealthModule.html":{},"modules/LoggerModule.html":{},"modules/OptimizeModule.html":{},"modules/PostModule.html":{},"modules/SearchModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"modules/FileModule.html":{},"modules/HealthModule.html":{},"modules/LoggerModule.html":{},"modules/OptimizeModule.html":{},"modules/PostModule.html":{},"modules/SearchModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["modules",{"_index":44,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"modules/FileModule.html":{},"modules/HealthModule.html":{},"modules/LoggerModule.html":{},"modules/OptimizeModule.html":{},"modules/PostModule.html":{},"modules/SearchModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":853,"title":{},"body":{"controllers/HealthController.html":{},"index.html":{}}}],["multi_match",{"_index":1205,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["mysql",{"_index":530,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["mysql2",{"_index":1668,"title":{},"body":{"dependencies.html":{}}}],["mysqlerrorcode",{"_index":303,"title":{},"body":{"injectables/AuthenticationService.html":{},"miscellaneous/enumerations.html":{}}}],["mysqlerrorcode.uniqueviolation",{"_index":317,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["myśliwiec",{"_index":1743,"title":{},"body":{"index.html":{}}}],["name",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/HttpExceptionFilter.html":{},"classes/ImageProcessor.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"controllers/PostController.html":{},"classes/PostNotFoundException.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"injectables/PrivateFileService.html":{},"injectables/PublicFileService.html":{},"classes/RegisterDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["nest",{"_index":1243,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{}}}],["nestframework",{"_index":1747,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":740,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["nestjs/axios",{"_index":882,"title":{},"body":{"modules/HealthModule.html":{},"dependencies.html":{}}}],["nestjs/bull",{"_index":93,"title":{},"body":{"modules/AppModule.html":{},"classes/ImageProcessor.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"dependencies.html":{}}}],["nestjs/cache",{"_index":1133,"title":{},"body":{"controllers/PostController.html":{},"modules/PostModule.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/CategoriesService.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"modules/FileModule.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"modules/LoggerModule.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"classes/PostNotFoundException.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"injectables/PrivateFileService.html":{},"injectables/PublicFileService.html":{},"modules/SearchModule.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/common/services/console",{"_index":468,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["nestjs/config",{"_index":79,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/CustomLogger.html":{},"modules/DatabaseModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"modules/FileModule.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"modules/LoggerModule.html":{},"modules/PostModule.html":{},"injectables/PrivateFileService.html":{},"injectables/PublicFileService.html":{},"modules/SearchModule.html":{},"injectables/TwoFactorAuthenticationService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":86,"title":{},"body":{"modules/AppModule.html":{},"classes/ExceptionsLoggerFilter.html":{},"dependencies.html":{}}}],["nestjs/elasticsearch",{"_index":556,"title":{},"body":{"injectables/ElasticsearchHealthIndicator.html":{},"injectables/PostsSearchService.html":{},"modules/SearchModule.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":257,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":1426,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":253,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1043,"title":{},"body":{"controllers/OptimizeController.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["nestjs/schedule",{"_index":91,"title":{},"body":{"modules/AppModule.html":{},"injectables/EmailSchedulingService.html":{},"dependencies.html":{}}}],["nestjs/terminus",{"_index":555,"title":{},"body":{"injectables/ElasticsearchHealthIndicator.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":369,"title":{},"body":{"injectables/CategoriesService.html":{},"modules/DatabaseModule.html":{},"modules/FileModule.html":{},"modules/LoggerModule.html":{},"injectables/LogsService.html":{},"modules/PostModule.html":{},"injectables/PostsService.html":{},"injectables/PrivateFileService.html":{},"injectables/PublicFileService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestlogger",{"_index":515,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["nestlogger('sql",{"_index":497,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["nestmiddleware",{"_index":1006,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["new",{"_index":319,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/CategoriesService.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/HttpExceptionFilter.html":{},"classes/ImageProcessor.html":{},"injectables/LogsMiddleware.html":{},"injectables/PostsService.html":{},"injectables/PrivateFileService.html":{},"injectables/PublicFileService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["newbody",{"_index":1216,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["newcategory",{"_index":379,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["newfile",{"_index":1337,"title":{},"body":{"injectables/PublicFileService.html":{}}}],["newlog",{"_index":1023,"title":{},"body":{"injectables/LogsService.html":{}}}],["newpost",{"_index":1236,"title":{},"body":{"injectables/PostsService.html":{}}}],["newprivatefile",{"_index":1308,"title":{},"body":{"injectables/PrivateFileService.html":{}}}],["newuser",{"_index":1569,"title":{},"body":{"injectables/UserService.html":{}}}],["next",{"_index":736,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"injectables/LogsMiddleware.html":{}}}],["nextfunction",{"_index":1002,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["node",{"_index":1359,"title":{},"body":{"modules/SearchModule.html":{}}}],["node.js",{"_index":1702,"title":{},"body":{"index.html":{}}}],["nodemailer",{"_index":711,"title":{},"body":{"injectables/EmailService.html":{},"dependencies.html":{}}}],["nodemailer/lib/mailer",{"_index":712,"title":{},"body":{"injectables/EmailService.html":{}}}],["nodemailertransport",{"_index":702,"title":{},"body":{"injectables/EmailService.html":{}}}],["notfoundexception",{"_index":404,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"classes/HttpExceptionFilter.html":{},"classes/PostNotFoundException.html":{},"injectables/PrivateFileService.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{}}}],["notfoundexception('user",{"_index":1595,"title":{},"body":{"injectables/UserService.html":{}}}],["npm",{"_index":1714,"title":{},"body":{"index.html":{}}}],["null",{"_index":747,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["null.interceptor.ts",{"_index":733,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"coverage.html":{}}}],["null.interceptor.ts:13",{"_index":738,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["nullable",{"_index":992,"title":{},"body":{"entities/Log.html":{},"entities/User.html":{}}}],["number",{"_index":23,"title":{},"body":{"entities/Address.html":{},"injectables/AuthenticationService.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"classes/DatabaseLogger.html":{},"injectables/EmailConfirmationService.html":{},"entities/Log.html":{},"classes/PaginationParams.html":{},"entities/Post.html":{},"classes/PostNotFoundException.html":{},"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"injectables/PrivateFileService.html":{},"entities/PublicFile.html":{},"injectables/PublicFileService.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"entities/User.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{}}}],["number(configservice.get('redis_port",{"_index":105,"title":{},"body":{"modules/AppModule.html":{}}}],["number(id",{"_index":1500,"title":{},"body":{"controllers/UserController.html":{}}}],["oauthclient",{"_index":786,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["object",{"_index":643,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["object.entries(newbody).reduce((result",{"_index":1218,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["observable",{"_index":739,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["offset",{"_index":1079,"title":{},"body":{"classes/PaginationParams.html":{},"controllers/PostController.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{}}}],["on')@httpcode(200)@useguards(jwtauthenticationguard",{"_index":1383,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["one",{"_index":768,"title":{},"body":{"classes/FindOneParams.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["onetomany",{"_index":1466,"title":{},"body":{"entities/User.html":{}}}],["onetomany(undefined",{"_index":1450,"title":{},"body":{"entities/User.html":{}}}],["onetoone",{"_index":32,"title":{},"body":{"entities/Address.html":{},"entities/User.html":{}}}],["onetoone(undefined",{"_index":28,"title":{},"body":{"entities/Address.html":{},"entities/User.html":{}}}],["open",{"_index":1730,"title":{},"body":{"index.html":{}}}],["optimizationpromises",{"_index":917,"title":{},"body":{"classes/ImageProcessor.html":{}}}],["optimize",{"_index":1030,"title":{},"body":{"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{}}}],["optimize.controller",{"_index":1069,"title":{},"body":{"modules/OptimizeModule.html":{}}}],["optimize.process",{"_index":1070,"title":{},"body":{"modules/OptimizeModule.html":{}}}],["optimizecontroller",{"_index":1028,"title":{"controllers/OptimizeController.html":{}},"body":{"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"coverage.html":{}}}],["optimizedimages",{"_index":926,"title":{},"body":{"classes/ImageProcessor.html":{}}}],["optimizedimages.foreach((image",{"_index":928,"title":{},"body":{"classes/ImageProcessor.html":{}}}],["optimizemodule",{"_index":1067,"title":{"modules/OptimizeModule.html":{}},"body":{"modules/OptimizeModule.html":{},"modules.html":{}}}],["optional",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/CategoriesService.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/HttpExceptionFilter.html":{},"classes/ImageProcessor.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"classes/PaginationParams.html":{},"controllers/PostController.html":{},"classes/PostNotFoundException.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"injectables/PrivateFileService.html":{},"injectables/PublicFileService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":453,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/EmailService.html":{}}}],["order",{"_index":1208,"title":{},"body":{"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{}}}],["originalurl",{"_index":1009,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["otpauthurl",{"_index":1390,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["otplib",{"_index":1412,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{},"dependencies.html":{}}}],["out",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"modules/EmailModule.html":{},"modules/FileModule.html":{},"modules/HealthModule.html":{},"modules/LoggerModule.html":{},"modules/PostModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":1753,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owner",{"_index":1264,"title":{},"body":{"entities/PrivateFile.html":{},"injectables/PrivateFileService.html":{}}}],["owner.files",{"_index":1268,"title":{},"body":{"entities/PrivateFile.html":{}}}],["ownerid",{"_index":1285,"title":{},"body":{"injectables/PrivateFileService.html":{}}}],["package",{"_index":1627,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["paginationparams",{"_index":1076,"title":{"classes/PaginationParams.html":{}},"body":{"classes/PaginationParams.html":{},"controllers/PostController.html":{},"coverage.html":{}}}],["paragraphs",{"_index":429,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["param",{"_index":1040,"title":{},"body":{"controllers/OptimizeController.html":{},"controllers/PostController.html":{},"controllers/UserController.html":{}}}],["param('id",{"_index":1057,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["parameters",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/CategoriesService.html":{},"classes/CategoryNotFoundException.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/HttpExceptionFilter.html":{},"classes/ImageProcessor.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"controllers/PostController.html":{},"classes/PostNotFoundException.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"injectables/PrivateFileService.html":{},"injectables/PublicFileService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"controllers/UserController.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":1131,"title":{},"body":{"controllers/PostController.html":{},"controllers/UserController.html":{}}}],["params.ts",{"_index":769,"title":{},"body":{"classes/FindOneParams.html":{},"classes/PaginationParams.html":{},"coverage.html":{}}}],["params.ts:15",{"_index":1081,"title":{},"body":{"classes/PaginationParams.html":{}}}],["params.ts:5",{"_index":771,"title":{},"body":{"classes/FindOneParams.html":{}}}],["params.ts:9",{"_index":1083,"title":{},"body":{"classes/PaginationParams.html":{}}}],["parser",{"_index":1665,"title":{},"body":{"dependencies.html":{}}}],["partialtype",{"_index":1425,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(createcategorydto",{"_index":1428,"title":{},"body":{"classes/UpdateCategoryDto.html":{}}}],["partialtype(createpostdto",{"_index":1430,"title":{},"body":{"classes/UpdatePostDto.html":{}}}],["partialtype(createuserdto",{"_index":1434,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["pass",{"_index":718,"title":{},"body":{"injectables/EmailService.html":{}}}],["passport",{"_index":947,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":252,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["passportstrategy",{"_index":949,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":963,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passreqtocallback",{"_index":955,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["password",{"_index":314,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/LocalStrategy.html":{},"classes/RegisterDto.html":{},"modules/SearchModule.html":{},"entities/User.html":{}}}],["patch",{"_index":1126,"title":{},"body":{"controllers/PostController.html":{}}}],["patch(':id",{"_index":1124,"title":{},"body":{"controllers/PostController.html":{}}}],["path",{"_index":338,"title":{},"body":{"injectables/AuthenticationService.html":{},"controllers/HealthController.html":{},"modules/OptimizeModule.html":{}}}],["payload",{"_index":334,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["payload.email",{"_index":644,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["payload.interface",{"_index":308,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["payload.interface.ts",{"_index":1364,"title":{},"body":{"interfaces/TokenPayload.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{}}}],["payload.issecondfactorauthenticated",{"_index":972,"title":{},"body":{"injectables/JwtTwoFactorStrategy.html":{}}}],["payload.userid",{"_index":958,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["pipe(map((value",{"_index":750,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["pipeqrcodestream",{"_index":1403,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["pipeqrcodestream(stream",{"_index":1409,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["plaintextpassword",{"_index":281,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["please",{"_index":1739,"title":{},"body":{"index.html":{}}}],["plugins",{"_index":922,"title":{},"body":{"classes/ImageProcessor.html":{}}}],["pngquant",{"_index":912,"title":{},"body":{"classes/ImageProcessor.html":{},"dependencies.html":{}}}],["port",{"_index":104,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"injectables/EmailService.html":{},"modules/PostModule.html":{}}}],["post",{"_index":181,"title":{"entities/Post.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/OptimizeController.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"entities/User.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["post('authenticate",{"_index":1398,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["post('authenticate')@httpcode(200)@useguards(jwtauthenticationguard",{"_index":1376,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["post('avatar",{"_index":1491,"title":{},"body":{"controllers/UserController.html":{}}}],["post('avatar')@useguards(jwtauthenticationguard)@useinterceptors(undefined",{"_index":1476,"title":{},"body":{"controllers/UserController.html":{}}}],["post('confirm",{"_index":569,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["post('files",{"_index":1496,"title":{},"body":{"controllers/UserController.html":{}}}],["post('files')@useguards(jwtauthenticationguard)@useinterceptors(undefined",{"_index":1479,"title":{},"body":{"controllers/UserController.html":{}}}],["post('generate",{"_index":1388,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["post('generate')@useguards(jwtauthenticationguard",{"_index":1379,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["post('image",{"_index":1050,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["post('image')@useinterceptors(undefined",{"_index":1037,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["post('log",{"_index":216,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["post('register",{"_index":176,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["post('resend",{"_index":573,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["post('schedule",{"_index":678,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["post('schedule')@useguards(jwtauthenticationguard",{"_index":671,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["post('turn",{"_index":1382,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["post()@httpcode(200)@useguards(jwtauthenticationguard",{"_index":1112,"title":{},"body":{"controllers/PostController.html":{}}}],["post.author",{"_index":1461,"title":{},"body":{"entities/User.html":{}}}],["post.author.id",{"_index":1202,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["post.categories",{"_index":396,"title":{},"body":{"entities/Category.html":{}}}],["post.content",{"_index":1201,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["post.dto",{"_index":1130,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostsService.html":{},"classes/UpdatePostDto.html":{}}}],["post.dto.ts",{"_index":427,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["post.dto.ts:10",{"_index":431,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:14",{"_index":434,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:5",{"_index":1429,"title":{},"body":{"classes/UpdatePostDto.html":{}}}],["post.dto.ts:6",{"_index":435,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.entity",{"_index":399,"title":{},"body":{"entities/Category.html":{}}}],["post.id",{"_index":1199,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["post.title",{"_index":1200,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["post/post.module",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["postcontroller",{"_index":1109,"title":{"controllers/PostController.html":{}},"body":{"controllers/PostController.html":{},"modules/PostModule.html":{},"coverage.html":{}}}],["postid",{"_index":1171,"title":{},"body":{"classes/PostNotFoundException.html":{},"injectables/PostsSearchService.html":{}}}],["postmodule",{"_index":57,"title":{"modules/PostModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostModule.html":{},"modules.html":{},"overview.html":{}}}],["postnotfoundexception",{"_index":1168,"title":{"classes/PostNotFoundException.html":{}},"body":{"classes/PostNotFoundException.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["postnotfoundexception(id",{"_index":1250,"title":{},"body":{"injectables/PostsService.html":{}}}],["postrepository",{"_index":1225,"title":{},"body":{"injectables/PostsService.html":{}}}],["posts",{"_index":384,"title":{},"body":{"injectables/CategoriesService.html":{},"entities/Category.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"entities/User.html":{}}}],["postsearchbody",{"_index":1174,"title":{"interfaces/PostSearchBody.html":{}},"body":{"interfaces/PostSearchBody.html":{},"injectables/PostsSearchService.html":{},"coverage.html":{}}}],["postsearchresult",{"_index":1179,"title":{"interfaces/PostSearchResult.html":{}},"body":{"interfaces/PostSearchResult.html":{},"coverage.html":{}}}],["postssearchservice",{"_index":1154,"title":{"injectables/PostsSearchService.html":{}},"body":{"modules/PostModule.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["postsservice",{"_index":1128,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["prefix",{"_index":151,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/HealthController.html":{},"controllers/OptimizeController.html":{},"controllers/PostController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UserController.html":{}}}],["primarygeneratedcolumn",{"_index":33,"title":{},"body":{"entities/Address.html":{},"entities/Category.html":{},"entities/Log.html":{},"entities/Post.html":{},"entities/PrivateFile.html":{},"entities/PublicFile.html":{},"entities/User.html":{}}}],["primarygeneratedcolumn({unsigned",{"_index":24,"title":{},"body":{"entities/Address.html":{},"entities/Category.html":{},"entities/Post.html":{},"entities/PublicFile.html":{},"entities/User.html":{}}}],["private",{"_index":204,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/CategoriesService.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"modules/FileModule.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/HealthController.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"injectables/PostsService.html":{},"injectables/PrivateFileService.html":{},"injectables/PublicFileService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"injectables/UserService.html":{}}}],["privatefile",{"_index":763,"title":{"entities/PrivateFile.html":{}},"body":{"modules/FileModule.html":{},"entities/PrivateFile.html":{},"injectables/PrivateFileService.html":{},"entities/User.html":{},"coverage.html":{}}}],["privatefilerepository",{"_index":1277,"title":{},"body":{"injectables/PrivateFileService.html":{}}}],["privatefileservice",{"_index":756,"title":{"injectables/PrivateFileService.html":{}},"body":{"modules/FileModule.html":{},"injectables/PrivateFileService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["process",{"_index":851,"title":{},"body":{"controllers/HealthController.html":{},"classes/ImageProcessor.html":{}}}],["process('optimize",{"_index":903,"title":{},"body":{"classes/ImageProcessor.html":{}}}],["processimage",{"_index":1032,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["processimage(@uploadedfiles",{"_index":1052,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["processimage(files",{"_index":1036,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["processor",{"_index":905,"title":{},"body":{"classes/ImageProcessor.html":{}}}],["processor('image",{"_index":913,"title":{},"body":{"classes/ImageProcessor.html":{}}}],["processors",{"_index":1073,"title":{},"body":{"modules/OptimizeModule.html":{}}}],["production",{"_index":479,"title":{},"body":{"injectables/CustomLogger.html":{},"index.html":{}}}],["progressive",{"_index":1701,"title":{},"body":{"index.html":{}}}],["project",{"_index":1731,"title":{},"body":{"index.html":{}}}],["promise",{"_index":552,"title":{},"body":{"injectables/ElasticsearchHealthIndicator.html":{},"classes/ImageProcessor.html":{},"injectables/LocalStrategy.html":{},"injectables/PrivateFileService.html":{},"injectables/PublicFileService.html":{}}}],["promise.all",{"_index":1592,"title":{},"body":{"injectables/UserService.html":{}}}],["promise.all(optimizationpromises",{"_index":927,"title":{},"body":{"classes/ImageProcessor.html":{}}}],["properties",{"_index":8,"title":{"properties.html":{}},"body":{"entities/Address.html":{},"entities/Category.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"classes/EmailConfirmationDto.html":{},"classes/EmailScheduleDto.html":{},"injectables/EmailService.html":{},"classes/FindOneParams.html":{},"injectables/GoogleAuthenticationService.html":{},"entities/Log.html":{},"injectables/LogsMiddleware.html":{},"classes/PaginationParams.html":{},"entities/Post.html":{},"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"injectables/PostsSearchService.html":{},"entities/PrivateFile.html":{},"entities/PublicFile.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"entities/User.html":{},"interfaces/VerificationTokenPayload.html":{},"properties.html":{}}}],["provide",{"_index":145,"title":{},"body":{"modules/AppModule.html":{}}}],["provided",{"_index":331,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["providers",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/EmailModule.html":{},"modules/FileModule.html":{},"modules/HealthModule.html":{},"modules/LoggerModule.html":{},"modules/OptimizeModule.html":{},"modules/PostModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["public",{"_index":9,"title":{},"body":{"entities/Address.html":{},"injectables/AuthenticationService.html":{},"entities/Category.html":{},"injectables/EmailConfirmationService.html":{},"modules/FileModule.html":{},"entities/Log.html":{},"entities/Post.html":{},"entities/PrivateFile.html":{},"injectables/PrivateFileService.html":{},"entities/PublicFile.html":{},"injectables/PublicFileService.html":{},"injectables/TwoFactorAuthenticationService.html":{},"entities/User.html":{}}}],["publicfile",{"_index":760,"title":{"entities/PublicFile.html":{}},"body":{"modules/FileModule.html":{},"entities/PublicFile.html":{},"injectables/PublicFileService.html":{},"entities/User.html":{},"coverage.html":{}}}],["publicfilerepository",{"_index":1327,"title":{},"body":{"injectables/PublicFileService.html":{}}}],["publicfileservice",{"_index":757,"title":{"injectables/PublicFileService.html":{}},"body":{"modules/FileModule.html":{},"injectables/PublicFileService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["qrcode",{"_index":1414,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{},"dependencies.html":{}}}],["quality",{"_index":923,"title":{},"body":{"classes/ImageProcessor.html":{}}}],["query",{"_index":505,"title":{},"body":{"classes/DatabaseLogger.html":{},"controllers/PostController.html":{},"injectables/PostsSearchService.html":{}}}],["query('search",{"_index":1141,"title":{},"body":{"controllers/PostController.html":{}}}],["queryrunner",{"_index":500,"title":{},"body":{"classes/DatabaseLogger.html":{},"injectables/PublicFileService.html":{},"injectables/UserService.html":{}}}],["queryrunner.committransaction",{"_index":1584,"title":{},"body":{"injectables/UserService.html":{}}}],["queryrunner.connect",{"_index":1580,"title":{},"body":{"injectables/UserService.html":{}}}],["queryrunner.manager.delete(publicfile",{"_index":1347,"title":{},"body":{"injectables/PublicFileService.html":{}}}],["queryrunner.manager.findone(publicfile",{"_index":1345,"title":{},"body":{"injectables/PublicFileService.html":{}}}],["queryrunner.manager.update(user",{"_index":1582,"title":{},"body":{"injectables/UserService.html":{}}}],["queryrunner.release",{"_index":1587,"title":{},"body":{"injectables/UserService.html":{}}}],["queryrunner.rollbacktransaction",{"_index":1585,"title":{},"body":{"injectables/UserService.html":{}}}],["queryrunner.starttransaction",{"_index":1581,"title":{},"body":{"injectables/UserService.html":{}}}],["queryrunner?.data?.iscreatinglogs",{"_index":516,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["queue",{"_index":1044,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["read",{"_index":1336,"title":{},"body":{"injectables/PublicFileService.html":{},"index.html":{}}}],["readable",{"_index":1045,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["readable.from(result",{"_index":1065,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["readonly",{"_index":205,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LogsMiddleware.html":{},"controllers/OptimizeController.html":{},"controllers/PostController.html":{},"injectables/PostsSearchService.html":{},"injectables/PrivateFileService.html":{},"injectables/PublicFileService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["recipient",{"_index":659,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["recursively",{"_index":745,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["recursivelystripnullvalues",{"_index":744,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["recursivelystripnullvalues(value",{"_index":751,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"miscellaneous/functions.html":{}}}],["redis",{"_index":101,"title":{},"body":{"modules/AppModule.html":{},"modules/PostModule.html":{},"dependencies.html":{}}}],["redis_host",{"_index":135,"title":{},"body":{"modules/AppModule.html":{}}}],["redis_port",{"_index":136,"title":{},"body":{"modules/AppModule.html":{}}}],["redisstore",{"_index":1160,"title":{},"body":{"modules/PostModule.html":{}}}],["reflect",{"_index":1676,"title":{},"body":{"dependencies.html":{}}}],["refresh",{"_index":156,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"coverage.html":{}}}],["refresh(@req",{"_index":240,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["refresh(request",{"_index":171,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["refresh.guard",{"_index":198,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["refresh.guard.ts",{"_index":937,"title":{},"body":{"injectables/JwtRefreshGuard.html":{},"coverage.html":{}}}],["refresh=${token",{"_index":343,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["refreshtoken",{"_index":829,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/UserService.html":{}}}],["refreshtokencookie",{"_index":221,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["refreshtokencookie.cookie",{"_index":228,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["refreshtokencookie.token",{"_index":224,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["region",{"_index":1299,"title":{},"body":{"injectables/PrivateFileService.html":{},"injectables/PublicFileService.html":{}}}],["register",{"_index":157,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["register(@body",{"_index":207,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["register(@res",{"_index":1389,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["register(registerationdata",{"_index":294,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["register(registrationdata",{"_index":174,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["register(response",{"_index":1378,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["registerationdata",{"_index":296,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["registerdto",{"_index":175,"title":{"classes/RegisterDto.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/RegisterDto.html":{},"coverage.html":{}}}],["registeruser",{"_index":790,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["registeruser(token",{"_index":800,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["registrationdata",{"_index":178,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["registrationdata.email",{"_index":212,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["relations",{"_index":383,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/PostsService.html":{},"injectables/PrivateFileService.html":{},"injectables/UserService.html":{}}}],["remove",{"_index":350,"title":{},"body":{"injectables/CategoriesService.html":{},"controllers/PostController.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{}}}],["remove(@param('id",{"_index":1149,"title":{},"body":{"controllers/PostController.html":{}}}],["remove(id",{"_index":362,"title":{},"body":{"injectables/CategoriesService.html":{},"controllers/PostController.html":{},"injectables/PostsService.html":{}}}],["remove(postid",{"_index":1191,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["removerefreshtoken",{"_index":1525,"title":{},"body":{"injectables/UserService.html":{}}}],["removerefreshtoken(userid",{"_index":1555,"title":{},"body":{"injectables/UserService.html":{}}}],["repository",{"_index":353,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/LogsService.html":{},"injectables/PostsService.html":{},"injectables/PrivateFileService.html":{},"injectables/PublicFileService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["req",{"_index":182,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/PostController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UserController.html":{}}}],["req.user",{"_index":1139,"title":{},"body":{"controllers/PostController.html":{}}}],["request",{"_index":162,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/GoogleAuthenticationController.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LogsMiddleware.html":{},"interfaces/RequestWithUser.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UserController.html":{}}}],["request.cookies?.refresh",{"_index":956,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["request.res.setheader('set",{"_index":226,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["request.user",{"_index":218,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["request.user.id",{"_index":1400,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{},"controllers/UserController.html":{}}}],["request.user?.isemailconfirmed",{"_index":605,"title":{},"body":{"guards/EmailConfirmationGuard.html":{}}}],["request?.cookies?.authentication",{"_index":964,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["request?.cookies?.refresh",{"_index":952,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["requestwithuser",{"_index":159,"title":{"interfaces/RequestWithUser.html":{}},"body":{"controllers/AuthenticationController.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/PostController.html":{},"interfaces/RequestWithUser.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["res",{"_index":183,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/OptimizeController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UserController.html":{}}}],["resendconfirmationlink",{"_index":566,"title":{},"body":{"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{}}}],["resendconfirmationlink(@req",{"_index":589,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["resendconfirmationlink(request",{"_index":572,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["resendconfirmationlink(userid",{"_index":619,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["reset",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/EmailModule.html":{},"modules/FileModule.html":{},"modules/HealthModule.html":{},"modules/LoggerModule.html":{},"modules/PostModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["response",{"_index":168,"title":{},"body":{"controllers/AuthenticationController.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LogsMiddleware.html":{},"controllers/OptimizeController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"controllers/UserController.html":{}}}],["response.on('finish",{"_index":1007,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["response.sendstatus(200",{"_index":236,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["response.sendstatus(202",{"_index":1062,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["response.sendstatus(404",{"_index":1059,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["response.setheader",{"_index":233,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["response.status(status).json",{"_index":896,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["result",{"_index":1063,"title":{},"body":{"controllers/OptimizeController.html":{},"injectables/PostsSearchService.html":{}}}],["result.id",{"_index":1259,"title":{},"body":{"injectables/PostsService.html":{}}}],["result.interface.ts",{"_index":1180,"title":{},"body":{"interfaces/PostSearchResult.html":{},"coverage.html":{}}}],["results",{"_index":40,"title":{},"body":{"entities/Address.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"classes/EmailConfirmationDto.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"modules/FileModule.html":{},"classes/FindOneParams.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/HttpExceptionFilter.html":{},"classes/ImageProcessor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"entities/Log.html":{},"modules/LoggerModule.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"classes/PaginationParams.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"classes/PostNotFoundException.html":{},"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"injectables/PrivateFileService.html":{},"entities/PublicFile.html":{},"injectables/PublicFileService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"modules/SearchModule.html":{},"interfaces/TokenPayload.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["results.results.map((result",{"_index":1258,"title":{},"body":{"injectables/PostsService.html":{}}}],["return",{"_index":213,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/CategoriesService.html":{},"classes/DatabaseLogger.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailService.html":{},"injectables/ExcludeNullInterceptor.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/HealthController.html":{},"classes/ImageProcessor.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"controllers/PostController.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"injectables/PrivateFileService.html":{},"injectables/PublicFileService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["returns",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/CategoriesService.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/HealthController.html":{},"classes/HttpExceptionFilter.html":{},"classes/ImageProcessor.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"controllers/PostController.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"injectables/PrivateFileService.html":{},"injectables/PublicFileService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["rss",{"_index":860,"title":{},"body":{"controllers/HealthController.html":{}}}],["run",{"_index":1717,"title":{},"body":{"index.html":{}}}],["runincluster",{"_index":1620,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["runincluster(bootstrap",{"_index":1698,"title":{},"body":{"miscellaneous/functions.html":{}}}],["rxjs",{"_index":741,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":743,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["s",{"_index":268,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{}}}],["s3",{"_index":1291,"title":{},"body":{"injectables/PrivateFileService.html":{},"injectables/PublicFileService.html":{}}}],["s3.getsignedurlpromise('getobject",{"_index":1317,"title":{},"body":{"injectables/PrivateFileService.html":{}}}],["scalable",{"_index":1706,"title":{},"body":{"index.html":{}}}],["schedule.dto",{"_index":677,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{}}}],["schedule.dto.ts",{"_index":657,"title":{},"body":{"classes/EmailScheduleDto.html":{},"coverage.html":{}}}],["schedule.dto.ts:13",{"_index":660,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["schedule.dto.ts:16",{"_index":662,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["schedule.dto.ts:5",{"_index":664,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["schedule.dto.ts:9",{"_index":665,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["scheduleemail",{"_index":669,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{}}}],["scheduleemail(@body",{"_index":679,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["scheduleemail(emailschedule",{"_index":670,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{}}}],["schedulemodule",{"_index":90,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulemodule.forroot",{"_index":107,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulerregistry",{"_index":684,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["scheduling",{"_index":668,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["scheduling.service",{"_index":676,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["scheduling.service.ts",{"_index":681,"title":{},"body":{"injectables/EmailSchedulingService.html":{},"coverage.html":{}}}],["scheduling.service.ts:14",{"_index":687,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["scheduling.service.ts:31",{"_index":686,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["scheduling.service.ts:8",{"_index":685,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["schedult.controller.ts",{"_index":667,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"coverage.html":{}}}],["schedult.controller.ts:14",{"_index":672,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["script",{"_index":1217,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["sdk",{"_index":1293,"title":{},"body":{"injectables/PrivateFileService.html":{},"injectables/PublicFileService.html":{},"dependencies.html":{}}}],["search",{"_index":1118,"title":{},"body":{"controllers/PostController.html":{},"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"injectables/PostsSearchService.html":{},"coverage.html":{}}}],["search(text",{"_index":1193,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["search.service",{"_index":1158,"title":{},"body":{"modules/PostModule.html":{},"injectables/PostsService.html":{}}}],["search.service.ts",{"_index":1186,"title":{},"body":{"injectables/PostsSearchService.html":{},"coverage.html":{}}}],["search.service.ts:11",{"_index":1190,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["search.service.ts:23",{"_index":1194,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["search.service.ts:42",{"_index":1192,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["search.service.ts:53",{"_index":1196,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["search.service.ts:7",{"_index":1188,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["searchforposts",{"_index":1222,"title":{},"body":{"injectables/PostsService.html":{}}}],["searchforposts(text",{"_index":1231,"title":{},"body":{"injectables/PostsService.html":{}}}],["searchmodule",{"_index":877,"title":{"modules/SearchModule.html":{}},"body":{"modules/HealthModule.html":{},"modules/PostModule.html":{},"modules/SearchModule.html":{},"modules.html":{},"overview.html":{}}}],["secret",{"_index":263,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{},"injectables/TwoFactorAuthenticationService.html":{},"injectables/UserService.html":{}}}],["secretaccesskey",{"_index":1297,"title":{},"body":{"injectables/PrivateFileService.html":{},"injectables/PublicFileService.html":{}}}],["secretorkey",{"_index":953,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["sendmail",{"_index":703,"title":{},"body":{"injectables/EmailService.html":{}}}],["sendmail(options",{"_index":706,"title":{},"body":{"injectables/EmailService.html":{}}}],["sendverificationlink",{"_index":611,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["sendverificationlink(email",{"_index":621,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["server",{"_index":1707,"title":{},"body":{"index.html":{}}}],["services/posts",{"_index":1157,"title":{},"body":{"modules/PostModule.html":{}}}],["services/posts.service",{"_index":1129,"title":{},"body":{"controllers/PostController.html":{},"modules/PostModule.html":{}}}],["set",{"_index":234,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["setcurrentrefreshtoken",{"_index":1526,"title":{},"body":{"injectables/UserService.html":{}}}],["setcurrentrefreshtoken(refreshtoken",{"_index":1557,"title":{},"body":{"injectables/UserService.html":{}}}],["settwofactorauthenticationsecret",{"_index":1527,"title":{},"body":{"injectables/UserService.html":{}}}],["settwofactorauthenticationsecret(secret",{"_index":1559,"title":{},"body":{"injectables/UserService.html":{}}}],["side",{"_index":1708,"title":{},"body":{"index.html":{}}}],["signatureversion",{"_index":1303,"title":{},"body":{"injectables/PrivateFileService.html":{},"injectables/PublicFileService.html":{}}}],["signoptions",{"_index":265,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["size",{"_index":1204,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["skip",{"_index":1247,"title":{},"body":{"injectables/PostsService.html":{}}}],["something",{"_index":323,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["sort",{"_index":1207,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["source",{"_index":4,"title":{},"body":{"entities/Address.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"classes/EmailConfirmationDto.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"modules/FileModule.html":{},"classes/FindOneParams.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"classes/HttpExceptionFilter.html":{},"classes/ImageProcessor.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"entities/Log.html":{},"modules/LoggerModule.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"classes/PaginationParams.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"classes/PostNotFoundException.html":{},"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"injectables/PrivateFileService.html":{},"entities/PublicFile.html":{},"injectables/PublicFileService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"modules/SearchModule.html":{},"interfaces/TokenPayload.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"interfaces/VerificationTokenPayload.html":{},"index.html":{}}}],["space",{"_index":869,"title":{},"body":{"controllers/HealthController.html":{}}}],["sponsors",{"_index":1734,"title":{},"body":{"index.html":{}}}],["src/.../get",{"_index":1689,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../image.process.ts",{"_index":1690,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../main.ts",{"_index":1688,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../mysql",{"_index":1683,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../recursively",{"_index":1691,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../run",{"_index":1692,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app.module.ts",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.module.ts:80",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["src/authentication/authentication.controller.ts",{"_index":150,"title":{},"body":{"controllers/AuthenticationController.html":{},"coverage.html":{}}}],["src/authentication/authentication.controller.ts:30",{"_index":177,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.controller.ts:42",{"_index":165,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.controller.ts:64",{"_index":170,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.controller.ts:75",{"_index":161,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.controller.ts:82",{"_index":173,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.module.ts",{"_index":249,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["src/authentication/authentication.service.ts",{"_index":271,"title":{},"body":{"injectables/AuthenticationService.html":{},"coverage.html":{}}}],["src/authentication/authentication.service.ts:11",{"_index":279,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:18",{"_index":295,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:40",{"_index":282,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:53",{"_index":299,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:69",{"_index":287,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:80",{"_index":292,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:97",{"_index":284,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/dto/register.dto.ts",{"_index":1348,"title":{},"body":{"classes/RegisterDto.html":{},"coverage.html":{}}}],["src/authentication/dto/register.dto.ts:13",{"_index":1352,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/authentication/dto/register.dto.ts:5",{"_index":1349,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/authentication/dto/register.dto.ts:8",{"_index":1350,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/authentication/dto/token",{"_index":1365,"title":{},"body":{"classes/TokenVerificationDto.html":{},"coverage.html":{}}}],["src/authentication/dto/two",{"_index":1369,"title":{},"body":{"classes/TwoFactorAuthenticationCodeDto.html":{},"coverage.html":{}}}],["src/authentication/google",{"_index":773,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"coverage.html":{}}}],["src/authentication/guard/jwt",{"_index":580,"title":{},"body":{"controllers/EmailConfirmationController.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtTwoFactorGuard.html":{},"controllers/PostController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["src/authentication/guard/local",{"_index":973,"title":{},"body":{"injectables/LocalAuthenticationGuard.html":{},"coverage.html":{}}}],["src/authentication/request",{"_index":581,"title":{},"body":{"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/PostController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["src/authentication/strategy/jwt",{"_index":939,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"coverage.html":{}}}],["src/authentication/strategy/jwt.strategy.ts",{"_index":959,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/authentication/strategy/jwt.strategy.ts:10",{"_index":960,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/authentication/strategy/jwt.strategy.ts:25",{"_index":962,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/authentication/strategy/local.strategy.ts",{"_index":975,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/authentication/strategy/local.strategy.ts:13",{"_index":979,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/authentication/strategy/local.strategy.ts:8",{"_index":977,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/authentication/token",{"_index":1363,"title":{},"body":{"interfaces/TokenPayload.html":{},"coverage.html":{}}}],["src/authentication/two",{"_index":1373,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"coverage.html":{}}}],["src/database/database",{"_index":487,"title":{},"body":{"classes/DatabaseLogger.html":{},"coverage.html":{}}}],["src/database/database.module.ts",{"_index":526,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/database/mysql",{"_index":304,"title":{},"body":{"injectables/AuthenticationService.html":{},"miscellaneous/enumerations.html":{}}}],["src/email/dto/email",{"_index":591,"title":{},"body":{"classes/EmailConfirmationDto.html":{},"classes/EmailScheduleDto.html":{},"coverage.html":{}}}],["src/email/email",{"_index":200,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"coverage.html":{}}}],["src/email/email.module",{"_index":261,"title":{},"body":{"modules/AuthenticationModule.html":{},"modules/PostModule.html":{}}}],["src/email/email.module.ts",{"_index":655,"title":{},"body":{"modules/EmailModule.html":{}}}],["src/email/email.service",{"_index":1235,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/email/email.service.ts",{"_index":701,"title":{},"body":{"injectables/EmailService.html":{},"coverage.html":{}}}],["src/email/email.service.ts:21",{"_index":708,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/email/email.service.ts:8",{"_index":705,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/email/verification",{"_index":1600,"title":{},"body":{"interfaces/VerificationTokenPayload.html":{},"coverage.html":{}}}],["src/file/entities/private",{"_index":1262,"title":{},"body":{"entities/PrivateFile.html":{},"entities/User.html":{},"coverage.html":{}}}],["src/file/entities/public",{"_index":1318,"title":{},"body":{"entities/PublicFile.html":{},"entities/User.html":{},"coverage.html":{}}}],["src/file/file.module",{"_index":1512,"title":{},"body":{"modules/UserModule.html":{}}}],["src/file/file.module.ts",{"_index":758,"title":{},"body":{"modules/FileModule.html":{}}}],["src/file/private",{"_index":1270,"title":{},"body":{"injectables/PrivateFileService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["src/file/public",{"_index":1322,"title":{},"body":{"injectables/PublicFileService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["src/health/elasticsearch",{"_index":541,"title":{},"body":{"injectables/ElasticsearchHealthIndicator.html":{},"coverage.html":{}}}],["src/health/health.controller.ts",{"_index":834,"title":{},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["src/health/health.controller.ts:25",{"_index":837,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.module.ts",{"_index":878,"title":{},"body":{"modules/HealthModule.html":{}}}],["src/logger/custom",{"_index":444,"title":{},"body":{"injectables/CustomLogger.html":{},"coverage.html":{}}}],["src/logger/dto/create",{"_index":414,"title":{},"body":{"classes/CreateLogDto.html":{},"coverage.html":{}}}],["src/logger/log.entity.ts",{"_index":983,"title":{},"body":{"entities/Log.html":{},"coverage.html":{}}}],["src/logger/log.entity.ts:11",{"_index":989,"title":{},"body":{"entities/Log.html":{}}}],["src/logger/log.entity.ts:14",{"_index":986,"title":{},"body":{"entities/Log.html":{}}}],["src/logger/log.entity.ts:17",{"_index":991,"title":{},"body":{"entities/Log.html":{}}}],["src/logger/log.entity.ts:20",{"_index":990,"title":{},"body":{"entities/Log.html":{}}}],["src/logger/log.entity.ts:23",{"_index":988,"title":{},"body":{"entities/Log.html":{}}}],["src/logger/logger.module.ts",{"_index":996,"title":{},"body":{"modules/LoggerModule.html":{}}}],["src/logger/logs.service.ts",{"_index":1014,"title":{},"body":{"injectables/LogsService.html":{},"coverage.html":{}}}],["src/logger/logs.service.ts:14",{"_index":1020,"title":{},"body":{"injectables/LogsService.html":{}}}],["src/logger/logs.service.ts:8",{"_index":1017,"title":{},"body":{"injectables/LogsService.html":{}}}],["src/main.ts",{"_index":1614,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/optimize/image.process.ts",{"_index":1616,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/optimize/optimize.controller.ts",{"_index":1029,"title":{},"body":{"controllers/OptimizeController.html":{},"coverage.html":{}}}],["src/optimize/optimize.controller.ts:22",{"_index":1038,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["src/optimize/optimize.controller.ts:28",{"_index":1035,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["src/optimize/optimize.module.ts",{"_index":1068,"title":{},"body":{"modules/OptimizeModule.html":{}}}],["src/optimize/optimize.process.ts",{"_index":900,"title":{},"body":{"classes/ImageProcessor.html":{},"coverage.html":{}}}],["src/optimize/optimize.process.ts:10",{"_index":904,"title":{},"body":{"classes/ImageProcessor.html":{}}}],["src/post/controllers/post.controller.ts",{"_index":1110,"title":{},"body":{"controllers/PostController.html":{},"coverage.html":{}}}],["src/post/controllers/post.controller.ts:31",{"_index":1113,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/controllers/post.controller.ts:37",{"_index":1117,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/controllers/post.controller.ts:49",{"_index":1120,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/controllers/post.controller.ts:54",{"_index":1125,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/controllers/post.controller.ts:59",{"_index":1122,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/dto/create",{"_index":410,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreatePostDto.html":{},"coverage.html":{}}}],["src/post/dto/update",{"_index":1423,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["src/post/entities/category.entity.ts",{"_index":392,"title":{},"body":{"entities/Category.html":{},"coverage.html":{}}}],["src/post/entities/category.entity.ts:10",{"_index":394,"title":{},"body":{"entities/Category.html":{}}}],["src/post/entities/category.entity.ts:13",{"_index":397,"title":{},"body":{"entities/Category.html":{}}}],["src/post/entities/category.entity.ts:7",{"_index":393,"title":{},"body":{"entities/Category.html":{}}}],["src/post/entities/post.entity",{"_index":1468,"title":{},"body":{"entities/User.html":{}}}],["src/post/entities/post.entity.ts",{"_index":1090,"title":{},"body":{"entities/Post.html":{},"coverage.html":{}}}],["src/post/entities/post.entity.ts:16",{"_index":1102,"title":{},"body":{"entities/Post.html":{}}}],["src/post/entities/post.entity.ts:19",{"_index":1101,"title":{},"body":{"entities/Post.html":{}}}],["src/post/entities/post.entity.ts:22",{"_index":1104,"title":{},"body":{"entities/Post.html":{}}}],["src/post/entities/post.entity.ts:25",{"_index":1105,"title":{},"body":{"entities/Post.html":{}}}],["src/post/entities/post.entity.ts:29",{"_index":1095,"title":{},"body":{"entities/Post.html":{}}}],["src/post/entities/post.entity.ts:36",{"_index":1100,"title":{},"body":{"entities/Post.html":{}}}],["src/post/exception/category",{"_index":401,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"coverage.html":{}}}],["src/post/exception/post",{"_index":1169,"title":{},"body":{"classes/PostNotFoundException.html":{},"coverage.html":{}}}],["src/post/post.module.ts",{"_index":1155,"title":{},"body":{"modules/PostModule.html":{}}}],["src/post/services/categories.service.ts",{"_index":346,"title":{},"body":{"injectables/CategoriesService.html":{},"coverage.html":{}}}],["src/post/services/categories.service.ts:11",{"_index":354,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/post/services/categories.service.ts:17",{"_index":358,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/post/services/categories.service.ts:23",{"_index":359,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/post/services/categories.service.ts:27",{"_index":361,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/post/services/categories.service.ts:38",{"_index":366,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/post/services/categories.service.ts:50",{"_index":363,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/post/services/posts",{"_index":1185,"title":{},"body":{"injectables/PostsSearchService.html":{},"coverage.html":{}}}],["src/post/services/posts.service.ts",{"_index":1221,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/post/services/posts.service.ts:13",{"_index":1224,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/post/services/posts.service.ts:21",{"_index":1226,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/post/services/posts.service.ts:37",{"_index":1228,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/post/services/posts.service.ts:47",{"_index":1229,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/post/services/posts.service.ts:58",{"_index":1233,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/post/services/posts.service.ts:71",{"_index":1230,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/post/services/posts.service.ts:79",{"_index":1232,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/post/types/post",{"_index":1176,"title":{},"body":{"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"coverage.html":{}}}],["src/run",{"_index":1618,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/search/search.module",{"_index":883,"title":{},"body":{"modules/HealthModule.html":{},"modules/PostModule.html":{}}}],["src/search/search.module.ts",{"_index":1356,"title":{},"body":{"modules/SearchModule.html":{}}}],["src/user/dto/create",{"_index":438,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/user/dto/update",{"_index":1432,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/user/entities/address.entity.ts",{"_index":6,"title":{},"body":{"entities/Address.html":{},"coverage.html":{}}}],["src/user/entities/address.entity.ts:10",{"_index":27,"title":{},"body":{"entities/Address.html":{}}}],["src/user/entities/address.entity.ts:13",{"_index":21,"title":{},"body":{"entities/Address.html":{}}}],["src/user/entities/address.entity.ts:16",{"_index":22,"title":{},"body":{"entities/Address.html":{}}}],["src/user/entities/address.entity.ts:19",{"_index":30,"title":{},"body":{"entities/Address.html":{}}}],["src/user/entities/address.entity.ts:7",{"_index":26,"title":{},"body":{"entities/Address.html":{}}}],["src/user/entities/user.entity",{"_index":804,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"injectables/LocalStrategy.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"interfaces/RequestWithUser.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["src/user/entities/user.entity.ts",{"_index":1435,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/user/entities/user.entity.ts:18",{"_index":1453,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:21",{"_index":1449,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:25",{"_index":1447,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:28",{"_index":1458,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:32",{"_index":1460,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:36",{"_index":1443,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:39",{"_index":1462,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:43",{"_index":1445,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:46",{"_index":1452,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:49",{"_index":1463,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:52",{"_index":1457,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:55",{"_index":1455,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:58",{"_index":1456,"title":{},"body":{"entities/User.html":{}}}],["src/user/exception/user",{"_index":1515,"title":{},"body":{"classes/UserNotFoundException.html":{},"coverage.html":{}}}],["src/user/user.controller.ts",{"_index":1471,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:26",{"_index":1477,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:40",{"_index":1480,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:53",{"_index":1486,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:67",{"_index":1483,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.module",{"_index":251,"title":{},"body":{"modules/AuthenticationModule.html":{},"modules/EmailModule.html":{}}}],["src/user/user.module.ts",{"_index":1509,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service",{"_index":196,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["src/user/user.service.ts",{"_index":1518,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:102",{"_index":1536,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:110",{"_index":1550,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:118",{"_index":1544,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:139",{"_index":1558,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:144",{"_index":1552,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:156",{"_index":1556,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:162",{"_index":1560,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:168",{"_index":1562,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:174",{"_index":1554,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:19",{"_index":1531,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:28",{"_index":1546,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:39",{"_index":1538,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:45",{"_index":1540,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:55",{"_index":1548,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:63",{"_index":1534,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:76",{"_index":1542,"title":{},"body":{"injectables/UserService.html":{}}}],["src/utils/exceptions",{"_index":721,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{},"coverage.html":{}}}],["src/utils/exclude",{"_index":732,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"coverage.html":{}}}],["src/utils/find",{"_index":767,"title":{},"body":{"classes/FindOneParams.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["src/utils/get",{"_index":472,"title":{},"body":{"injectables/CustomLogger.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/http",{"_index":885,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["src/utils/logs.middleware.ts",{"_index":1000,"title":{},"body":{"injectables/LogsMiddleware.html":{},"coverage.html":{}}}],["src/utils/logs.middleware.ts:6",{"_index":1005,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["src/utils/logs.middleware.ts:8",{"_index":1003,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["src/utils/pagination",{"_index":1077,"title":{},"body":{"classes/PaginationParams.html":{},"controllers/PostController.html":{},"coverage.html":{}}}],["src/utils/recursively",{"_index":1623,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["stack",{"_index":460,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["start",{"_index":1718,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1721,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":1722,"title":{},"body":{"index.html":{}}}],["started",{"_index":1700,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1712,"title":{},"body":{"index.html":{}}}],["statements",{"_index":1604,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":893,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["statuscode",{"_index":897,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/LogsMiddleware.html":{}}}],["statusmessage",{"_index":1010,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["stay",{"_index":1740,"title":{},"body":{"index.html":{}}}],["storage",{"_index":865,"title":{},"body":{"controllers/HealthController.html":{}}}],["store",{"_index":1162,"title":{},"body":{"modules/PostModule.html":{},"dependencies.html":{}}}],["strategy",{"_index":946,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["strategy/jwt.strategy",{"_index":258,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["strategy/local.strategy",{"_index":255,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["stream",{"_index":1046,"title":{},"body":{"controllers/OptimizeController.html":{},"injectables/PrivateFileService.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["stream.pipe(response",{"_index":1066,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["street",{"_index":13,"title":{},"body":{"entities/Address.html":{}}}],["string",{"_index":17,"title":{},"body":{"entities/Address.html":{},"injectables/AuthenticationService.html":{},"entities/Category.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"classes/EmailConfirmationDto.html":{},"injectables/EmailConfirmationService.html":{},"classes/EmailScheduleDto.html":{},"classes/FindOneParams.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/LocalStrategy.html":{},"entities/Log.html":{},"controllers/OptimizeController.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"interfaces/PostSearchBody.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"injectables/PrivateFileService.html":{},"entities/PublicFile.html":{},"injectables/PublicFileService.html":{},"classes/RegisterDto.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"injectables/TwoFactorAuthenticationService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"interfaces/VerificationTokenPayload.html":{}}}],["stringifyparameters",{"_index":496,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["stringifyparameters(parameters",{"_index":513,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["strip",{"_index":746,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["subject",{"_index":636,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"classes/EmailScheduleDto.html":{},"injectables/EmailSchedulingService.html":{},"injectables/PostsService.html":{}}}],["super",{"_index":558,"title":{},"body":{"injectables/ElasticsearchHealthIndicator.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["super(`category",{"_index":408,"title":{},"body":{"classes/CategoryNotFoundException.html":{}}}],["super(`post",{"_index":1172,"title":{},"body":{"classes/PostNotFoundException.html":{}}}],["super(`user",{"_index":1517,"title":{},"body":{"classes/UserNotFoundException.html":{}}}],["super(context",{"_index":476,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["super.catch(exception",{"_index":730,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["super.debug.apply(this",{"_index":485,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["super.error.apply(this",{"_index":483,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["super.log.apply(this",{"_index":481,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["super.warn.apply(this",{"_index":484,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["support",{"_index":1735,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":1750,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":539,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["table",{"_index":1626,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1625,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":1248,"title":{},"body":{"injectables/PostsService.html":{}}}],["terminusmodule",{"_index":880,"title":{},"body":{"modules/HealthModule.html":{}}}],["test",{"_index":1242,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{}}}],["test:covsupport",{"_index":1727,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1726,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1724,"title":{},"body":{"index.html":{}}}],["text",{"_index":630,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{}}}],["thanks",{"_index":1733,"title":{},"body":{"index.html":{}}}],["this.authenticationservice.getauthenticateduser(email",{"_index":982,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.authenticationservice.getcookieforlogout",{"_index":235,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authenticationservice.getcookiewithjwtaccesstoken",{"_index":1399,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["this.authenticationservice.getcookiewithjwtaccesstoken(request.user.id",{"_index":241,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authenticationservice.getcookiewithjwtaccesstoken(user.id",{"_index":220,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["this.authenticationservice.getcookiewithjwtrefreshtoken(user.id",{"_index":222,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["this.authenticationservice.register(registrationdata",{"_index":210,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.categoryrepository.create(createcategorydto",{"_index":380,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoryrepository.delete(id",{"_index":390,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoryrepository.find",{"_index":382,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoryrepository.findone",{"_index":385,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoryrepository.save(newcategory",{"_index":381,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoryrepository.update(id",{"_index":387,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.configservice.get",{"_index":342,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{}}}],["this.configservice.get('aws_access_key_id",{"_index":1296,"title":{},"body":{"injectables/PrivateFileService.html":{},"injectables/PublicFileService.html":{}}}],["this.configservice.get('aws_public_bucket_name",{"_index":1346,"title":{},"body":{"injectables/PublicFileService.html":{}}}],["this.configservice.get('aws_region",{"_index":1300,"title":{},"body":{"injectables/PrivateFileService.html":{},"injectables/PublicFileService.html":{}}}],["this.configservice.get('aws_s3_bucket_endpoint",{"_index":1302,"title":{},"body":{"injectables/PrivateFileService.html":{},"injectables/PublicFileService.html":{}}}],["this.configservice.get('aws_s3_private_bucket_name",{"_index":1307,"title":{},"body":{"injectables/PrivateFileService.html":{}}}],["this.configservice.get('aws_s3_public_bucket_name",{"_index":1334,"title":{},"body":{"injectables/PublicFileService.html":{}}}],["this.configservice.get('aws_secret_access_key",{"_index":1298,"title":{},"body":{"injectables/PrivateFileService.html":{},"injectables/PublicFileService.html":{}}}],["this.configservice.get('google_auth_client_id",{"_index":806,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.configservice.get('google_auth_client_secret",{"_index":808,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.configservice.get('jwt_refresh_token_secret",{"_index":341,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.configservice.get('jwt_verification_token_secret",{"_index":627,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["this.configservice.get('two_factor_authentication_app_name",{"_index":1418,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["this.datasource.createqueryrunner",{"_index":1577,"title":{},"body":{"injectables/UserService.html":{}}}],["this.diskhealthindicator.checkstorage('disk",{"_index":870,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.elasticsearchhealthindicator.ishealthy('elasticsearch",{"_index":873,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.elasticsearchservice.deletebyquery",{"_index":1214,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["this.elasticsearchservice.index",{"_index":1197,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["this.elasticsearchservice.ping",{"_index":559,"title":{},"body":{"injectables/ElasticsearchHealthIndicator.html":{}}}],["this.elasticsearchservice.search",{"_index":1203,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["this.elasticsearchservice.updatebyquery",{"_index":1220,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["this.emailconfirmationservice.confirmemail(email",{"_index":587,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["this.emailconfirmationservice.decodeconfirmationtoken",{"_index":585,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["this.emailconfirmationservice.resendconfirmationlink(request.user.id",{"_index":590,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["this.emailconfirmationservice.sendverificationlink",{"_index":211,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.emailschedulingservice.scheduleemail(emailschedule",{"_index":680,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["this.emailservice.sendmail",{"_index":635,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/PostsService.html":{}}}],["this.getbyid(userid",{"_index":1575,"title":{},"body":{"injectables/UserService.html":{}}}],["this.getcookiesforuser(user",{"_index":832,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.getstatus(key",{"_index":560,"title":{},"body":{"injectables/ElasticsearchHealthIndicator.html":{}}}],["this.getuserdata(token",{"_index":819,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.googleauthenticationservice.authenticate(tokendata.token",{"_index":784,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["this.handleregistereduser(user",{"_index":814,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.health.check",{"_index":847,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.httphealthindicator.pingcheck('http",{"_index":849,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.imagequeue.add('optimize",{"_index":1053,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["this.imagequeue.getjob(id",{"_index":1058,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["this.index",{"_index":1198,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["this.jwtservice.sign(payload",{"_index":335,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{}}}],["this.jwtservice.verify(token",{"_index":641,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["this.logger.debug(message",{"_index":523,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["this.logger.error",{"_index":519,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["this.logger.error(message",{"_index":1012,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["this.logger.log",{"_index":517,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["this.logger.log(message",{"_index":522,"title":{},"body":{"classes/DatabaseLogger.html":{},"injectables/LogsMiddleware.html":{}}}],["this.logger.warn",{"_index":521,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["this.logger.warn(message",{"_index":524,"title":{},"body":{"classes/DatabaseLogger.html":{},"injectables/LogsMiddleware.html":{}}}],["this.logsrepository.create(log",{"_index":1024,"title":{},"body":{"injectables/LogsService.html":{}}}],["this.logsrepository.save(newlog",{"_index":1025,"title":{},"body":{"injectables/LogsService.html":{}}}],["this.logsservice",{"_index":480,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["this.logsservice.createlog",{"_index":482,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["this.memoryhealthindicator.checkheap('memory",{"_index":856,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.memoryhealthindicator.checkrss('memory",{"_index":862,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.nodemailertransport",{"_index":713,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.nodemailertransport.sendmail(options",{"_index":720,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.oauthclient",{"_index":809,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.oauthclient.gettokeninfo(token",{"_index":812,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.oauthclient.setcredentials",{"_index":824,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.postrepository.create",{"_index":1237,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository.delete(id",{"_index":1254,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository.find",{"_index":1246,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository.findone",{"_index":1249,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository.save(newpost",{"_index":1238,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository.update(id",{"_index":1251,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postssearchservice.indexpost(newpost",{"_index":1239,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postssearchservice.remove(id",{"_index":1255,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postssearchservice.search(text",{"_index":1256,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postssearchservice.update(updatedpost",{"_index":1253,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsservice.create(createpostdto",{"_index":1138,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postsservice.findall(offset",{"_index":1143,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postsservice.findone(+id",{"_index":1146,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postsservice.remove(+id",{"_index":1150,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postsservice.searchforposts(search",{"_index":1142,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postsservice.update(+id",{"_index":1148,"title":{},"body":{"controllers/PostController.html":{}}}],["this.privatefilerepository.create",{"_index":1309,"title":{},"body":{"injectables/PrivateFileService.html":{}}}],["this.privatefilerepository.findone",{"_index":1313,"title":{},"body":{"injectables/PrivateFileService.html":{}}}],["this.privatefilerepository.save(newprivatefile",{"_index":1311,"title":{},"body":{"injectables/PrivateFileService.html":{}}}],["this.privatefileservice.generatepresignedurl",{"_index":1594,"title":{},"body":{"injectables/UserService.html":{}}}],["this.privatefileservice.getprivatefile(fileid",{"_index":1589,"title":{},"body":{"injectables/UserService.html":{}}}],["this.privatefileservice.uploadprivatefile",{"_index":1588,"title":{},"body":{"injectables/UserService.html":{}}}],["this.publicfilerepository.create",{"_index":1338,"title":{},"body":{"injectables/PublicFileService.html":{}}}],["this.publicfilerepository.delete(fileid",{"_index":1344,"title":{},"body":{"injectables/PublicFileService.html":{}}}],["this.publicfilerepository.findone",{"_index":1341,"title":{},"body":{"injectables/PublicFileService.html":{}}}],["this.publicfilerepository.save(newfile",{"_index":1340,"title":{},"body":{"injectables/PublicFileService.html":{}}}],["this.publicfileservice.deletepublicfilewithqueryrunner",{"_index":1583,"title":{},"body":{"injectables/UserService.html":{}}}],["this.publicfileservice.uploadpublicfile",{"_index":1574,"title":{},"body":{"injectables/UserService.html":{}}}],["this.registeruser(token",{"_index":817,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.schedulerregistry.addcronjob",{"_index":696,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["this.schedulerregistry.getcronjobs().foreach((job",{"_index":699,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["this.sendverificationlink(user.email",{"_index":650,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["this.stringifyparameters",{"_index":520,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["this.stringifyparameters(parameters",{"_index":518,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["this.twofactorauthenticationservice.generatetwofactorauthenticationsecret",{"_index":1391,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["this.twofactorauthenticationservice.istwofactorauthenticationcodevalid",{"_index":1394,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["this.twofactorauthenticationservice.pipeqrcodestream",{"_index":1392,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["this.typeormhealthindicator.pingcheck('database",{"_index":848,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.userservice.addavatar",{"_index":1493,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.addprivatefile",{"_index":1497,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.create",{"_index":313,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.userservice.createwithgoogle(email",{"_index":821,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.userservice.getallprivatefiles(request.user.id",{"_index":1504,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.getbyemail(email",{"_index":327,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["this.userservice.getbyid(payload.userid",{"_index":965,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["this.userservice.getbyid(userid",{"_index":649,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["this.userservice.getprivatefile",{"_index":1499,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.getuserifrefreshtokenmatches",{"_index":957,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["this.userservice.markemailasconfirmed(email",{"_index":640,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["this.userservice.setcurrentrefreshtoken(refreshtoken",{"_index":830,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.usersrepository.create",{"_index":1572,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usersrepository.create(createuserdto",{"_index":1570,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usersrepository.findone",{"_index":1566,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usersrepository.save(newuser",{"_index":1571,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usersrepository.update",{"_index":1599,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usersrepository.update(userid",{"_index":1576,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usersservice.removerefreshtoken(request.user.id",{"_index":232,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.usersservice.setcurrentrefreshtoken",{"_index":223,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.usersservice.settwofactorauthenticationsecret(secret",{"_index":1419,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["this.usersservice.turnontwofactorauthentication(request.user.id",{"_index":1397,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["this.verifypassword(plaintextpassword",{"_index":328,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["thresholdpercent",{"_index":871,"title":{},"body":{"controllers/HealthController.html":{}}}],["throw",{"_index":318,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/CategoriesService.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostsService.html":{},"injectables/PrivateFileService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/UserService.html":{}}}],["thrown",{"_index":729,"title":{},"body":{"classes/ExceptionsLoggerFilter.html":{}}}],["time",{"_index":510,"title":{},"body":{"classes/DatabaseLogger.html":{},"classes/HttpExceptionFilter.html":{}}}],["title",{"_index":430,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"interfaces/PostSearchBody.html":{},"injectables/PostsSearchService.html":{}}}],["tofilestream",{"_index":1413,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["tofilestream(stream",{"_index":1420,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["token",{"_index":293,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/EmailConfirmationDto.html":{},"injectables/EmailConfirmationService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"classes/TokenVerificationDto.html":{},"injectables/TwoFactorAuthenticationService.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{}}}],["token.strategy.ts",{"_index":940,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"coverage.html":{}}}],["token.strategy.ts:13",{"_index":942,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["token.strategy.ts:29",{"_index":944,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["token=${token",{"_index":629,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["tokendata",{"_index":779,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["tokenexpirederror",{"_index":646,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["tokeninfo",{"_index":811,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["tokeninfo.email",{"_index":813,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["tokenpayload",{"_index":307,"title":{"interfaces/TokenPayload.html":{}},"body":{"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"interfaces/TokenPayload.html":{},"coverage.html":{}}}],["tokenverificationdto",{"_index":777,"title":{"classes/TokenVerificationDto.html":{}},"body":{"controllers/GoogleAuthenticationController.html":{},"classes/TokenVerificationDto.html":{},"coverage.html":{}}}],["total",{"_index":1183,"title":{},"body":{"interfaces/PostSearchResult.html":{}}}],["touch",{"_index":1741,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":1087,"title":{},"body":{"classes/PaginationParams.html":{},"entities/User.html":{},"dependencies.html":{}}}],["true",{"_index":25,"title":{},"body":{"entities/Address.html":{},"entities/Category.html":{},"classes/CreatePostDto.html":{},"modules/DatabaseModule.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"entities/Log.html":{},"injectables/LogsService.html":{},"entities/Post.html":{},"entities/PublicFile.html":{},"controllers/TwoFactorAuthenticationController.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["true})@exclude",{"_index":1446,"title":{},"body":{"entities/User.html":{}}}],["true})@isnotempty",{"_index":433,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["true})@joincolumn",{"_index":1442,"title":{},"body":{"entities/User.html":{}}}],["true})@jointable",{"_index":1099,"title":{},"body":{"entities/Post.html":{}}}],["try",{"_index":311,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/DatabaseLogger.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"injectables/EmailConfirmationService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/UserService.html":{}}}],["ttl",{"_index":1165,"title":{},"body":{"modules/PostModule.html":{}}}],["turnontwofactorauthentication",{"_index":1375,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{},"injectables/UserService.html":{}}}],["turnontwofactorauthentication(request",{"_index":1381,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["turnontwofactorauthentication(userid",{"_index":1561,"title":{},"body":{"injectables/UserService.html":{}}}],["twitter",{"_index":1746,"title":{},"body":{"index.html":{}}}],["two",{"_index":259,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/PostController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"coverage.html":{}}}],["two_factor_authentication_app_name",{"_index":141,"title":{},"body":{"modules/AppModule.html":{}}}],["twofactorauthenticationcode",{"_index":1371,"title":{},"body":{"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["twofactorauthenticationcodedto",{"_index":1368,"title":{"classes/TwoFactorAuthenticationCodeDto.html":{}},"body":{"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"coverage.html":{}}}],["twofactorauthenticationcontroller",{"_index":250,"title":{"controllers/TwoFactorAuthenticationController.html":{}},"body":{"modules/AuthenticationModule.html":{},"controllers/TwoFactorAuthenticationController.html":{},"coverage.html":{}}}],["twofactorauthenticationsecret",{"_index":1441,"title":{},"body":{"entities/User.html":{},"injectables/UserService.html":{}}}],["twofactorauthenticationservice",{"_index":248,"title":{"injectables/TwoFactorAuthenticationService.html":{}},"body":{"modules/AuthenticationModule.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"coverage.html":{},"overview.html":{}}}],["type",{"_index":15,"title":{},"body":{"entities/Address.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"modules/DatabaseModule.html":{},"injectables/ElasticsearchHealthIndicator.html":{},"controllers/EmailConfirmationController.html":{},"classes/EmailConfirmationDto.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/ExceptionsLoggerFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"classes/FindOneParams.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/HttpExceptionFilter.html":{},"classes/ImageProcessor.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"entities/Log.html":{},"injectables/LogsMiddleware.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"classes/PaginationParams.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"classes/PostNotFoundException.html":{},"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"injectables/PrivateFileService.html":{},"entities/PublicFile.html":{},"injectables/PublicFileService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["typeof",{"_index":642,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["typeorm",{"_index":34,"title":{},"body":{"entities/Address.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/DatabaseLogger.html":{},"entities/Log.html":{},"injectables/LogsService.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"injectables/PrivateFileService.html":{},"entities/PublicFile.html":{},"injectables/PublicFileService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["typeormhealthindicator",{"_index":840,"title":{},"body":{"controllers/HealthController.html":{}}}],["typeormlogger",{"_index":489,"title":{},"body":{"classes/DatabaseLogger.html":{}}}],["typeormmodule",{"_index":527,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/FileModule.html":{},"modules/LoggerModule.html":{},"modules/PostModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature([log",{"_index":999,"title":{},"body":{"modules/LoggerModule.html":{}}}],["typeormmodule.forfeature([post",{"_index":1167,"title":{},"body":{"modules/PostModule.html":{}}}],["typeormmodule.forfeature([publicfile",{"_index":765,"title":{},"body":{"modules/FileModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":1513,"title":{},"body":{"modules/UserModule.html":{}}}],["typeormmodule.forrootasync",{"_index":529,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["types",{"_index":1427,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["types/adm",{"_index":1643,"title":{},"body":{"dependencies.html":{}}}],["types/aws",{"_index":1645,"title":{},"body":{"dependencies.html":{}}}],["types/bull",{"_index":1647,"title":{},"body":{"dependencies.html":{}}}],["types/cron",{"_index":1649,"title":{},"body":{"dependencies.html":{}}}],["types/imagemin",{"_index":1650,"title":{},"body":{"dependencies.html":{}}}],["types/multer",{"_index":1652,"title":{},"body":{"dependencies.html":{}}}],["types/nodemailer",{"_index":1654,"title":{},"body":{"dependencies.html":{}}}],["types/uuid",{"_index":1656,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":1711,"title":{},"body":{"index.html":{}}}],["unauthorizedexception",{"_index":603,"title":{},"body":{"guards/EmailConfirmationGuard.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/UserService.html":{}}}],["unauthorizedexception('confirm",{"_index":606,"title":{},"body":{"guards/EmailConfirmationGuard.html":{}}}],["unauthorizedexception('wrong",{"_index":1395,"title":{},"body":{"controllers/TwoFactorAuthenticationController.html":{}}}],["undefined",{"_index":1115,"title":{},"body":{"controllers/PostController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UserController.html":{}}}],["unique",{"_index":1469,"title":{},"body":{"entities/User.html":{}}}],["uniqueviolation",{"_index":1685,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["unit",{"_index":1723,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":166,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/CategoriesService.html":{},"classes/DatabaseLogger.html":{},"injectables/EmailConfirmationService.html":{},"classes/ExceptionsLoggerFilter.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/ImageProcessor.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LogsService.html":{},"controllers/OptimizeController.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"injectables/PrivateFileService.html":{},"injectables/PublicFileService.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["unlicensed",{"_index":1763,"title":{},"body":{"properties.html":{}}}],["unsigned",{"_index":37,"title":{},"body":{"entities/Address.html":{},"entities/Category.html":{},"entities/Post.html":{},"entities/PublicFile.html":{},"entities/User.html":{}}}],["update",{"_index":351,"title":{},"body":{"injectables/CategoriesService.html":{},"controllers/PostController.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{}}}],["update(@param('id",{"_index":1147,"title":{},"body":{"controllers/PostController.html":{}}}],["update(id",{"_index":364,"title":{},"body":{"injectables/CategoriesService.html":{},"controllers/PostController.html":{},"injectables/PostsService.html":{}}}],["update(post",{"_index":1195,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["updatecategorydto",{"_index":365,"title":{"classes/UpdateCategoryDto.html":{}},"body":{"injectables/CategoriesService.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["updatedcategory",{"_index":388,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["updatedpost",{"_index":1252,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepostdto",{"_index":1123,"title":{"classes/UpdatePostDto.html":{}},"body":{"controllers/PostController.html":{},"injectables/PostsService.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["updateuserdto",{"_index":1431,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["upload",{"_index":1305,"title":{},"body":{"injectables/PrivateFileService.html":{},"injectables/PublicFileService.html":{}}}],["uploadedfile",{"_index":1487,"title":{},"body":{"controllers/UserController.html":{}}}],["uploadedfiles",{"_index":1041,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["uploadprivatefile",{"_index":1274,"title":{},"body":{"injectables/PrivateFileService.html":{}}}],["uploadprivatefile(databuffer",{"_index":1283,"title":{},"body":{"injectables/PrivateFileService.html":{}}}],["uploadpublicfile",{"_index":1325,"title":{},"body":{"injectables/PublicFileService.html":{}}}],["uploadpublicfile(databuffer",{"_index":1332,"title":{},"body":{"injectables/PublicFileService.html":{}}}],["uploadresult",{"_index":1304,"title":{},"body":{"injectables/PrivateFileService.html":{},"injectables/PublicFileService.html":{}}}],["uploadresult.key",{"_index":1310,"title":{},"body":{"injectables/PrivateFileService.html":{},"injectables/PublicFileService.html":{}}}],["uploadresult.location",{"_index":1339,"title":{},"body":{"injectables/PublicFileService.html":{}}}],["url",{"_index":628,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"entities/PublicFile.html":{},"injectables/PublicFileService.html":{},"injectables/UserService.html":{}}}],["use",{"_index":852,"title":{},"body":{"controllers/HealthController.html":{},"injectables/LogsMiddleware.html":{}}}],["use(request",{"_index":1001,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["useclass",{"_index":146,"title":{},"body":{"modules/AppModule.html":{}}}],["used",{"_index":863,"title":{},"body":{"controllers/HealthController.html":{}}}],["usefactory",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/DatabaseModule.html":{},"modules/PostModule.html":{},"modules/SearchModule.html":{}}}],["useguards",{"_index":184,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/PostController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UserController.html":{}}}],["useguards(jwtauthenticationguard",{"_index":230,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/PostController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UserController.html":{}}}],["useguards(jwtauthenticationguard)@get",{"_index":160,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useguards(jwtauthenticationguard)@post('log",{"_index":169,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useguards(jwtrefreshguard",{"_index":238,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useguards(jwtrefreshguard)@get('refresh",{"_index":172,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useguards(localauthenticationguard",{"_index":215,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useinterceptors",{"_index":577,"title":{},"body":{"controllers/EmailConfirmationController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/OptimizeController.html":{},"controllers/PostController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UserController.html":{}}}],["useinterceptors(anyfilesinterceptor",{"_index":1051,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["useinterceptors(cacheinterceptor",{"_index":1140,"title":{},"body":{"controllers/PostController.html":{}}}],["useinterceptors(cacheinterceptor)@get",{"_index":1116,"title":{},"body":{"controllers/PostController.html":{}}}],["useinterceptors(cacheinterceptor)@get(':id",{"_index":1119,"title":{},"body":{"controllers/PostController.html":{}}}],["useinterceptors(classserializerinterceptor",{"_index":583,"title":{},"body":{"controllers/EmailConfirmationController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/TwoFactorAuthenticationController.html":{}}}],["useinterceptors(fileinterceptor('file",{"_index":1492,"title":{},"body":{"controllers/UserController.html":{}}}],["user",{"_index":14,"title":{"entities/User.html":{}},"body":{"entities/Address.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailService.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"interfaces/RequestWithUser.html":{},"injectables/TwoFactorAuthenticationService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["user.address",{"_index":29,"title":{},"body":{"entities/Address.html":{}}}],["user.avatar?.id",{"_index":1579,"title":{},"body":{"injectables/UserService.html":{}}}],["user.controller",{"_index":1510,"title":{},"body":{"modules/UserModule.html":{}}}],["user.currenthashedrefreshtoken",{"_index":1598,"title":{},"body":{"injectables/UserService.html":{}}}],["user.dto",{"_index":1433,"title":{},"body":{"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":439,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:2",{"_index":440,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:3",{"_index":441,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:4",{"_index":442,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":1417,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["user.entity",{"_index":35,"title":{},"body":{"entities/Address.html":{}}}],["user.id",{"_index":225,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["user.interface",{"_index":190,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/PostController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"controllers/UserController.html":{}}}],["user.interface.ts",{"_index":1355,"title":{},"body":{"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["user.isemailconfirmed",{"_index":637,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["user.isregisteredwithgoogle",{"_index":831,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["user.istwofactorauthenticationenabled",{"_index":229,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["user.password",{"_index":329,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["user.service",{"_index":1488,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user.twofactorauthenticationsecret",{"_index":1422,"title":{},"body":{"injectables/TwoFactorAuthenticationService.html":{}}}],["user/user.module",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["usercontroller",{"_index":1470,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userdata",{"_index":818,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["userdata.name",{"_index":820,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["userid",{"_index":289,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{},"interfaces/TokenPayload.html":{},"classes/UserNotFoundException.html":{},"injectables/UserService.html":{}}}],["userinfoclient",{"_index":822,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["userinfoclient.get",{"_index":827,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["userinforesponse",{"_index":826,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["userinforesponse.data",{"_index":828,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["usermodule",{"_index":58,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/EmailModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":533,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/SearchModule.html":{}}}],["usernamefield",{"_index":981,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["usernotfoundexception",{"_index":1514,"title":{"classes/UserNotFoundException.html":{}},"body":{"classes/UserNotFoundException.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["usernotfoundexception(id",{"_index":1573,"title":{},"body":{"injectables/UserService.html":{}}}],["userservice",{"_index":195,"title":{"injectables/UserService.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/EmailConfirmationService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["usersrepository",{"_index":1530,"title":{},"body":{"injectables/UserService.html":{}}}],["usersservice",{"_index":206,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/TwoFactorAuthenticationController.html":{},"injectables/TwoFactorAuthenticationService.html":{}}}],["userwithfiles",{"_index":1591,"title":{},"body":{"injectables/UserService.html":{}}}],["userwithfiles.files.map(async",{"_index":1593,"title":{},"body":{"injectables/UserService.html":{}}}],["utils/exceptions",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["utils/logs.middleware",{"_index":95,"title":{},"body":{"modules/AppModule.html":{}}}],["uuid",{"_index":1290,"title":{},"body":{"injectables/PrivateFileService.html":{},"injectables/PublicFileService.html":{},"dependencies.html":{}}}],["v4",{"_index":1289,"title":{},"body":{"injectables/PrivateFileService.html":{},"injectables/PublicFileService.html":{}}}],["validate",{"_index":941,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(email",{"_index":978,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":961,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["validate(request",{"_index":943,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["validationschema",{"_index":109,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":425,"title":{},"body":{"classes/CreateLogDto.html":{},"classes/CreatePostDto.html":{},"classes/EmailConfirmationDto.html":{},"classes/EmailScheduleDto.html":{},"classes/FindOneParams.html":{},"classes/PaginationParams.html":{},"classes/RegisterDto.html":{},"classes/TokenVerificationDto.html":{},"classes/TwoFactorAuthenticationCodeDto.html":{},"dependencies.html":{}}}],["value",{"_index":288,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/DatabaseLogger.html":{},"injectables/LogsMiddleware.html":{},"injectables/PostsSearchService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["values",{"_index":748,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["values.ts",{"_index":1624,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["verbose",{"_index":450,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["verbose(message",{"_index":464,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["verification",{"_index":626,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["verification.dto",{"_index":781,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["verification.dto.ts",{"_index":1366,"title":{},"body":{"classes/TokenVerificationDto.html":{},"coverage.html":{}}}],["verification.dto.ts:6",{"_index":1367,"title":{},"body":{"classes/TokenVerificationDto.html":{}}}],["verificationtokenpayload",{"_index":625,"title":{"interfaces/VerificationTokenPayload.html":{}},"body":{"injectables/EmailConfirmationService.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{}}}],["verifypassword",{"_index":276,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["verifypassword(plaintextpassword",{"_index":297,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["version",{"_index":1761,"title":{},"body":{"properties.html":{}}}],["void",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"injectables/EmailSchedulingService.html":{},"classes/ExceptionsLoggerFilter.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LogsMiddleware.html":{}}}],["warn",{"_index":451,"title":{},"body":{"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{}}}],["warn(message",{"_index":466,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["watch",{"_index":1719,"title":{},"body":{"index.html":{}}}],["website",{"_index":1744,"title":{},"body":{"index.html":{}}}],["welcome",{"_index":631,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["went",{"_index":324,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["withyousoft1@hotmail.com",{"_index":1240,"title":{},"body":{"injectables/PostsService.html":{}}}],["wrong",{"_index":325,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["yes",{"_index":458,"title":{},"body":{"injectables/CustomLogger.html":{},"classes/DatabaseLogger.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{}}}],["yinzhequan510@gmail.com",{"_index":1241,"title":{},"body":{"injectables/PostsService.html":{}}}],["you'd",{"_index":1738,"title":{},"body":{"index.html":{}}}],["zip",{"_index":908,"title":{},"body":{"classes/ImageProcessor.html":{},"dependencies.html":{}}}],["zip.addfile(filedata.originalname",{"_index":931,"title":{},"body":{"classes/ImageProcessor.html":{}}}],["zip.tobuffer",{"_index":933,"title":{},"body":{"classes/ImageProcessor.html":{}}}],["zoom",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/EmailModule.html":{},"modules/FileModule.html":{},"modules/HealthModule.html":{},"modules/LoggerModule.html":{},"modules/PostModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"entities/Address.html":{"url":"entities/Address.html","title":"entity - Address","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Address\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/address.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                city\n                            \n                            \n                                    \n                                    Public\n                                country\n                            \n                            \n                                    \n                                    Public\n                                id\n                            \n                            \n                                    \n                                    Public\n                                street\n                            \n                            \n                                    \n                                    Public\n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        city\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/address.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/address.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn({unsigned: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/address.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        street\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/address.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, user => user.address)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/address.entity.ts:19\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, OneToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport User from './user.entity';\n\n@Entity()\nclass Address {\n  @PrimaryGeneratedColumn({ unsigned: true })\n  public id: number;\n\n  @Column()\n  public street: string;\n\n  @Column()\n  public city: string;\n\n  @Column()\n  public country: string;\n\n  @OneToOne(() => User, (user: User) => user.address)\n  public user: User;\n}\n\nexport default Address;\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthenticationModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nLoggerModule\n\nLoggerModule\n\nAppModule -->\n\nLoggerModule->AppModule\n\n\n\n\n\nPostModule\n\nPostModule\n\nAppModule -->\n\nPostModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthenticationModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            HealthModule\n                        \n                        \n                            LoggerModule\n                        \n                        \n                            PostModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/app.module.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { MiddlewareConsumer, Module } from '@nestjs/common';\nimport { PostModule } from './post/post.module';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport * as Joi from '@hapi/joi';\nimport { DatabaseModule } from './database/database.module';\nimport { UserModule } from './user/user.module';\nimport { AuthenticationModule } from './authentication/authentication.module';\nimport { APP_FILTER } from '@nestjs/core';\nimport { ExceptionsLoggerFilter } from './utils/exceptions-logger.filter';\nimport { ScheduleModule } from '@nestjs/schedule';\nimport { BullModule } from '@nestjs/bull';\nimport LogsMiddleware from './utils/logs.middleware';\nimport { LoggerModule } from './logger/logger.module';\nimport HealthModule from './health/health.module';\n\n@Module({\n  imports: [\n    BullModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => ({\n        redis: {\n          host: configService.get('REDIS_HOST'),\n          port: Number(configService.get('REDIS_PORT')),\n        },\n      }),\n      inject: [ConfigService],\n    }),\n    ScheduleModule.forRoot(),\n    PostModule,\n    ConfigModule.forRoot({\n      validationSchema: Joi.object({\n        PORT: Joi.number(),\n        DATABASE_HOST: Joi.string().required(),\n        DATABASE_PORT: Joi.number().required(),\n        DATABASE_USER: Joi.string().required(),\n        DATABASE_PASSWORD: Joi.string().required(),\n        DATABASE_DB: Joi.string().required(),\n        JWT_ACCESS_TOKEN_SECRET: Joi.string().required(),\n        JWT_ACCESS_TOKEN_EXPIRATION_TIME: Joi.string().required(),\n        JWT_REFRESH_TOKEN_SECRET: Joi.string().required(),\n        JWT_REFRESH_TOKEN_EXPIRATION_TIME: Joi.string().required(),\n        JWT_VERIFICATION_TOKEN_SECRET: Joi.string().required(),\n        JWT_VERIFICATION_TOKEN_EXPIRATION_TIME: Joi.string().required(),\n        EMAIL_CONFIRMATION_URL: Joi.string().required(),\n        AWS_REGION: Joi.string().required(),\n        AWS_ACCESS_KEY_ID: Joi.string().required(),\n        AWS_SECRET_ACCESS_KEY: Joi.string().required(),\n        AWS_S3_BUCKET_ENDPOINT: Joi.string().required(),\n        AWS_S3_PUBLIC_BUCKET_NAME: Joi.string().required(),\n        AWS_S3_PRIVATE_BUCKET_NAME: Joi.string().required(),\n        ELASTICSEARCH_NODE: Joi.string().required(),\n        ELASTICSEARCH_USERNAME: Joi.string().required(),\n        ELASTICSEARCH_PASSWORD: Joi.string().required(),\n        REDIS_HOST: Joi.string().required(),\n        REDIS_PORT: Joi.number().required(),\n        EMAIL_HOST: Joi.string().required(),\n        EMAIL_PORT: Joi.number().required(),\n        EMAIL_USER: Joi.string().required(),\n        EMAIL_PASSWORD: Joi.string().required(),\n        TWO_FACTOR_AUTHENTICATION_APP_NAME: Joi.string().required(),\n        GOOGLE_AUTH_CLIENT_ID: Joi.string().required(),\n        GOOGLE_AUTH_CLIENT_SECRET: Joi.string().required(),\n      }),\n    }),\n    DatabaseModule,\n    UserModule,\n    AuthenticationModule,\n    LoggerModule,\n    HealthModule,\n  ],\n  controllers: [],\n  providers: [\n    {\n      provide: APP_FILTER,\n      useClass: ExceptionsLoggerFilter,\n    },\n  ],\n})\nexport class AppModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(LogsMiddleware).forRoutes('*');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthenticationController.html":{"url":"controllers/AuthenticationController.html","title":"controller - AuthenticationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthenticationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/authentication.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                authentication\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                authenticate\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                logIn\n                            \n                            \n                                    \n                                    \n                                    Async\n                                logOut\n                            \n                            \n                                    \n                                    \n                                    Async\n                                refresh\n                            \n                            \n                                    \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        authenticate\n                        \n                    \n                \n            \n            \n                \n                    \n                    authenticate(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthenticationGuard)@Get()\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        Async\n                        logIn\n                        \n                    \n                \n            \n            \n                \n                    \n                    logIn(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(200)@UseGuards(LocalAuthenticationGuard)@Post('log-in')\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        logOut\n                        \n                    \n                \n            \n            \n                \n                    \n                    logOut(request: RequestWithUser, response: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthenticationGuard)@Post('log-out')\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        refresh\n                        \n                    \n                \n            \n            \n                \n                    \n                    refresh(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtRefreshGuard)@Get('refresh')\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(registrationData: RegisterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    registrationData\n                                    \n                                                RegisterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  HttpCode,\n  Post,\n  Req,\n  Res,\n  UseGuards,\n} from '@nestjs/common';\nimport { AuthenticationService } from './authentication.service';\nimport { LocalAuthenticationGuard } from './guard/local-authentication.guard';\nimport RequestWithUser from './request-with-user.interface';\nimport RegisterDto from './dto/register.dto';\nimport { Response } from 'express';\nimport JwtAuthenticationGuard from './guard/jwt-authentication.guard';\nimport { UserService } from 'src/user/user.service';\nimport JwtRefreshGuard from './guard/jwt-refresh.guard';\nimport { EmailConfirmationService } from 'src/email/email-confirmation.service';\n\n@Controller('authentication')\nexport class AuthenticationController {\n  constructor(\n    private readonly authenticationService: AuthenticationService,\n    private readonly usersService: UserService,\n    private readonly emailConfirmationService: EmailConfirmationService,\n  ) {}\n\n  @Post('register')\n  async register(@Body() registrationData: RegisterDto) {\n    const user = await this.authenticationService.register(registrationData);\n    await this.emailConfirmationService.sendVerificationLink(\n      registrationData.email,\n    );\n\n    return user;\n  }\n\n  @HttpCode(200)\n  @UseGuards(LocalAuthenticationGuard)\n  @Post('log-in')\n  async logIn(@Req() request: RequestWithUser) {\n    const user = request.user;\n    const accessTokenCookie =\n      this.authenticationService.getCookieWithJwtAccessToken(user.id);\n    const refreshTokenCookie =\n      this.authenticationService.getCookieWithJwtRefreshToken(user.id);\n    await this.usersService.setCurrentRefreshToken(\n      refreshTokenCookie.token,\n      user.id,\n    );\n    request.res.setHeader('Set-Cookie', [\n      accessTokenCookie,\n      refreshTokenCookie.cookie,\n    ]);\n    if (user.isTwoFactorAuthenticationEnabled) {\n      return;\n    }\n    return user;\n  }\n\n  @UseGuards(JwtAuthenticationGuard)\n  @Post('log-out')\n  async logOut(@Req() request: RequestWithUser, @Res() response: Response) {\n    await this.usersService.removeRefreshToken(request.user.id);\n    response.setHeader(\n      'Set-Cookie',\n      this.authenticationService.getCookieForLogout(),\n    );\n    return response.sendStatus(200);\n  }\n\n  @UseGuards(JwtAuthenticationGuard)\n  @Get()\n  authenticate(@Req() request: RequestWithUser) {\n    const user = request.user;\n    return user;\n  }\n\n  @UseGuards(JwtRefreshGuard)\n  @Get('refresh')\n  async refresh(@Req() request: RequestWithUser) {\n    const accessTokenCookie =\n      this.authenticationService.getCookieWithJwtAccessToken(request.user.id);\n    request.res.setHeader('Set-Cookie', accessTokenCookie);\n    return request.user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthenticationModule.html":{"url":"modules/AuthenticationModule.html","title":"module - AuthenticationModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthenticationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthenticationModule\n\n\n\ncluster_AuthenticationModule_imports\n\n\n\ncluster_AuthenticationModule_providers\n\n\n\n\nEmailModule\n\nEmailModule\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\nAuthenticationModule -->\n\nEmailModule->AuthenticationModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthenticationModule -->\n\nUserModule->AuthenticationModule\n\n\n\n\n\nAuthenticationService\n\nAuthenticationService\n\nAuthenticationModule -->\n\nAuthenticationService->AuthenticationModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthenticationModule -->\n\nJwtStrategy->AuthenticationModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthenticationModule -->\n\nLocalStrategy->AuthenticationModule\n\n\n\n\n\nTwoFactorAuthenticationService\n\nTwoFactorAuthenticationService\n\nAuthenticationModule -->\n\nTwoFactorAuthenticationService->AuthenticationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/authentication/authentication.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthenticationService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                        \n                            TwoFactorAuthenticationService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthenticationController\n                        \n                        \n                            TwoFactorAuthenticationController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            EmailModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthenticationService } from './authentication.service';\nimport { UserModule } from 'src/user/user.module';\nimport { PassportModule } from '@nestjs/passport';\nimport { AuthenticationController } from './authentication.controller';\nimport { LocalStrategy } from './strategy/local.strategy';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { JwtStrategy } from './strategy/jwt.strategy';\nimport { TwoFactorAuthenticationController } from './two-factor-authentication.controller';\nimport { TwoFactorAuthenticationService } from './two-factor-authentication.service';\nimport { EmailModule } from 'src/email/email.module';\n\n@Module({\n  imports: [\n    UserModule,\n    PassportModule,\n    ConfigModule,\n    EmailModule,\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: async (configService: ConfigService) => ({\n        secret: configService.get('JWT_ACCESS_TOKEN_SECRET'),\n        signOptions: {\n          expiresIn: `${configService.get(\n            'JWT_ACCESS_TOKEN_EXPIRATION_TIME',\n          )}s`,\n        },\n      }),\n    }),\n  ],\n  providers: [\n    AuthenticationService,\n    LocalStrategy,\n    JwtStrategy,\n    TwoFactorAuthenticationService,\n  ],\n  controllers: [AuthenticationController, TwoFactorAuthenticationController],\n})\nexport class AuthenticationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthenticationService.html":{"url":"injectables/AuthenticationService.html","title":"injectable - AuthenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/authentication.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                getAuthenticatedUser\n                            \n                            \n                                    Public\n                                getCookieForLogout\n                            \n                            \n                                    Public\n                                getCookieWithJwtAccessToken\n                            \n                            \n                                    Public\n                                getCookieWithJwtRefreshToken\n                            \n                            \n                                    Public\n                                    Async\n                                register\n                            \n                            \n                                    Private\n                                    Async\n                                verifyPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, jwtService: JwtService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/authentication.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getAuthenticatedUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAuthenticatedUser(email: string, plainTextPassword: string)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    plainTextPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getCookieForLogout\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCookieForLogout()\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:97\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getCookieWithJwtAccessToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCookieWithJwtAccessToken(userId: number, isSecondFactorAuthenticated)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    isSecondFactorAuthenticated\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getCookieWithJwtRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCookieWithJwtRefreshToken(userId: number, isSecondFactorAuthenticated)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    isSecondFactorAuthenticated\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { cookie: string; token: any; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(registerationData: RegisterDto)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    registerationData\n                                    \n                                                RegisterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        verifyPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    verifyPassword(plainTextPassword: string, hashedPassword: string)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    plainTextPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    hashedPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { UserService } from 'src/user/user.service';\nimport * as bcrypt from 'bcrypt';\nimport { MysqlErrorCode } from 'src/database/mysql-error-codes.enum';\nimport RegisterDto from './dto/register.dto';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigService } from '@nestjs/config';\nimport TokenPayload from './token-payload.interface';\n\n@Injectable()\nexport class AuthenticationService {\n  constructor(\n    private readonly userService: UserService,\n    private readonly jwtService: JwtService,\n    private readonly configService: ConfigService,\n  ) {}\n\n  public async register(registerationData: RegisterDto) {\n    const hashedPassword = await bcrypt.hash(registerationData.password, 10);\n    try {\n      const createdUser = await this.userService.create({\n        ...registerationData,\n        password: hashedPassword,\n      });\n      return createdUser;\n    } catch (error) {\n      if (error?.code === MysqlErrorCode.UniqueViolation) {\n        throw new HttpException(\n          'User with that email already exists',\n          HttpStatus.BAD_REQUEST,\n        );\n      }\n      throw new HttpException(\n        'Something went wrong',\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  public async getAuthenticatedUser(email: string, plainTextPassword: string) {\n    try {\n      const user = await this.userService.getByEmail(email);\n      await this.verifyPassword(plainTextPassword, user.password);\n      return user;\n    } catch (error) {\n      throw new HttpException(\n        'Wrong credentials provided',\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n  }\n\n  private async verifyPassword(\n    plainTextPassword: string,\n    hashedPassword: string,\n  ) {\n    const isPasswordMatching = await bcrypt.compare(\n      plainTextPassword,\n      hashedPassword,\n    );\n    if (!isPasswordMatching) {\n      throw new HttpException(\n        'Wrong credentials provided',\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n  }\n\n  public getCookieWithJwtAccessToken(\n    userId: number,\n    isSecondFactorAuthenticated = false,\n  ) {\n    const payload: TokenPayload = { userId, isSecondFactorAuthenticated };\n    const token = this.jwtService.sign(payload);\n    return `Authentication=${token}; HttpOnly; Path=/; Max-Age=${this.configService.get(\n      'JWT_ACCESS_TOKEN_EXPIRATION_TIME',\n    )}`;\n  }\n\n  public getCookieWithJwtRefreshToken(\n    userId: number,\n    isSecondFactorAuthenticated = false,\n  ) {\n    const payload: TokenPayload = { userId, isSecondFactorAuthenticated };\n    const token = this.jwtService.sign(payload, {\n      secret: this.configService.get('JWT_REFRESH_TOKEN_SECRET'),\n      expiresIn: `${this.configService.get(\n        'JWT_REFRESH_TOKEN_EXPIRATION_TIME',\n      )}s`,\n    });\n    const cookie = `Refresh=${token}; HttpOnly; Path=/; Max-Age=${this.configService.get(\n      'JWT_REFRESH_TOKEN_EXPIRATION_TIME',\n    )}`;\n    return { cookie, token };\n  }\n\n  public getCookieForLogout() {\n    return [\n      'Authentication=; HttpOnly; Path=/; Max-Age=0',\n      'Refresh=; HttpOnly; Path=/; Max-Age=0',\n    ];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CategoriesService.html":{"url":"injectables/CategoriesService.html","title":"injectable - CategoriesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CategoriesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/services/categories.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(categoryRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/post/services/categories.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        categoryRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createCategoryDto: CreateCategoryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/post/services/categories.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createCategoryDto\n                                    \n                                                CreateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/post/services/categories.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/post/services/categories.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/post/services/categories.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, updateCategoryDto: UpdateCategoryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/post/services/categories.service.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateCategoryDto\n                                    \n                                                UpdateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport Post from '../entities/post.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport Category from '../entities/category.entity';\nimport CategoryNotFoundException from '../exception/category-not-found.exception';\nimport UpdateCategoryDto from '../dto/update-category.dto';\nimport CreateCategoryDto from '../dto/create-category.dto';\n\n@Injectable()\nexport class CategoriesService {\n  constructor(\n    @InjectRepository(Post)\n    private categoryRepository: Repository,\n  ) {}\n\n  async create(createCategoryDto: CreateCategoryDto) {\n    const newCategory = await this.categoryRepository.create(createCategoryDto);\n    await this.categoryRepository.save(newCategory);\n    return newCategory;\n  }\n\n  async findAll() {\n    return await this.categoryRepository.find({ relations: ['posts'] });\n  }\n\n  async findOne(id: number) {\n    const category = await this.categoryRepository.findOne({\n      where: { id },\n      relations: ['posts'],\n    });\n    if (category) {\n      return category;\n    }\n    throw new CategoryNotFoundException(id);\n  }\n\n  async update(id: number, updateCategoryDto: UpdateCategoryDto) {\n    await this.categoryRepository.update(id, updateCategoryDto);\n    const updatedCategory = await this.categoryRepository.findOne({\n      where: { id },\n      relations: ['posts'],\n    });\n    if (updatedCategory) {\n      return updatedCategory;\n    }\n    throw new CategoryNotFoundException(id);\n  }\n\n  async remove(id: number) {\n    const deleteResponse = await this.categoryRepository.delete(id);\n    if (!deleteResponse.affected) {\n      throw new CategoryNotFoundException(id);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Category.html":{"url":"entities/Category.html","title":"entity - Category","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Category\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/entities/category.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                id\n                            \n                            \n                                    \n                                    Public\n                                name\n                            \n                            \n                                    \n                                    Public\n                                posts\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn({unsigned: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/entities/category.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/entities/category.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, post => post.categories)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/entities/category.entity.ts:13\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, ManyToMany, PrimaryGeneratedColumn } from 'typeorm';\nimport Post from './post.entity';\n\n@Entity()\nclass Category {\n  @PrimaryGeneratedColumn({ unsigned: true })\n  public id: number;\n\n  @Column()\n  public name: string;\n\n  @ManyToMany(() => Post, (post: Post) => post.categories)\n  public posts: Post[];\n}\n\nexport default Category;\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CategoryNotFoundException.html":{"url":"classes/CategoryNotFoundException.html","title":"class - CategoryNotFoundException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CategoryNotFoundException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/exception/category-not-found.exception.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    NotFoundException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(categoryId: number)\n                    \n                \n                        \n                            \n                                Defined in src/post/exception/category-not-found.exception.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        categoryId\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotFoundException } from '@nestjs/common';\n\nclass CategoryNotFoundException extends NotFoundException {\n  constructor(categoryId: number) {\n    super(`Category with id ${categoryId} not found`);\n  }\n}\n\nexport default CategoryNotFoundException;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCategoryDto.html":{"url":"classes/CreateCategoryDto.html","title":"class - CreateCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/dto/create-category.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/post/dto/create-category.dto.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateCategoryDto {\n  name: string;\n}\n\nexport default CreateCategoryDto;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateLogDto.html":{"url":"classes/CreateLogDto.html","title":"class - CreateLogDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateLogDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/logger/dto/create-log.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                context\n                            \n                            \n                                    \n                                    \n                                level\n                            \n                            \n                                    \n                                    \n                                message\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/logger/dto/create-log.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        level\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/logger/dto/create-log.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/logger/dto/create-log.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty } from 'class-validator';\n\nexport class CreateLogDto {\n  @IsString()\n  @IsNotEmpty()\n  context: string;\n\n  @IsString()\n  @IsNotEmpty()\n  message: string;\n\n  @IsString()\n  @IsNotEmpty()\n  level: string;\n}\n\nexport default CreateLogDto;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/dto/create-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                content\n                            \n                            \n                                    \n                                    \n                                paragraphs\n                            \n                            \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dto/create-post.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        paragraphs\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString({each: true})@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dto/create-post.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dto/create-post.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class CreatePostDto {\n  @IsString()\n  @IsNotEmpty()\n  title: string;\n\n  @IsString()\n  @IsNotEmpty()\n  content: string;\n\n  @IsString({ each: true })\n  @IsNotEmpty()\n  paragraphs: string[];\n}\n\nexport default CreatePostDto;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateUserDto {\n  email: string;\n  name: string;\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CustomLogger.html":{"url":"injectables/CustomLogger.html","title":"injectable - CustomLogger","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CustomLogger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/logger/custom-logger.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ConsoleLogger\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logsService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                debug\n                            \n                            \n                                error\n                            \n                            \n                                log\n                            \n                            \n                                verbose\n                            \n                            \n                                warn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(context: string, options: ConsoleLoggerOptions, configService: ConfigService, logsService: LogsService)\n                    \n                \n                        \n                            \n                                Defined in src/logger/custom-logger.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        context\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                        ConsoleLoggerOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        logsService\n                                                  \n                                                        \n                                                                        LogsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        debug\n                        \n                    \n                \n            \n            \n                \ndebug(message: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/logger/custom-logger.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n            \n                \nerror(message: string, stack?: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/logger/custom-logger.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    stack\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        log\n                        \n                    \n                \n            \n            \n                \nlog(message: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/logger/custom-logger.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verbose\n                        \n                    \n                \n            \n            \n                \nverbose(message: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/logger/custom-logger.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        warn\n                        \n                    \n                \n            \n            \n                \nwarn(message: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/logger/custom-logger.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logsService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LogsService\n\n                    \n                \n                    \n                        \n                                Defined in src/logger/custom-logger.ts:9\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, ConsoleLogger } from '@nestjs/common';\nimport { ConsoleLoggerOptions } from '@nestjs/common/services/console-logger.service';\nimport { ConfigService } from '@nestjs/config';\nimport LogsService from './logs.service';\nimport getLogLevels from 'src/utils/get-log-levels';\n\n@Injectable()\nclass CustomLogger extends ConsoleLogger {\n  private readonly logsService: LogsService;\n\n  constructor(\n    context: string,\n    options: ConsoleLoggerOptions,\n    configService: ConfigService,\n    logsService: LogsService,\n  ) {\n    const environment = configService.get('NODE_ENV');\n\n    super(context, {\n      ...options,\n      logLevels: getLogLevels(environment === 'production'),\n    });\n\n    this.logsService = logsService;\n  }\n\n  log(message: string, context?: string) {\n    super.log.apply(this, [message, context]);\n\n    this.logsService.createLog({\n      message,\n      context,\n      level: 'log',\n    });\n  }\n  error(message: string, stack?: string, context?: string) {\n    super.error.apply(this, [message, stack, context]);\n\n    this.logsService.createLog({\n      message,\n      context,\n      level: 'error',\n    });\n  }\n  warn(message: string, context?: string) {\n    super.warn.apply(this, [message, context]);\n\n    this.logsService.createLog({\n      message,\n      context,\n      level: 'error',\n    });\n  }\n  debug(message: string, context?: string) {\n    super.debug.apply(this, [message, context]);\n\n    this.logsService.createLog({\n      message,\n      context,\n      level: 'error',\n    });\n  }\n  verbose(message: string, context?: string) {\n    super.debug.apply(this, [message, context]);\n\n    this.logsService.createLog({\n      message,\n      context,\n      level: 'error',\n    });\n  }\n}\n\nexport default CustomLogger;\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DatabaseLogger.html":{"url":"classes/DatabaseLogger.html","title":"class - DatabaseLogger","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DatabaseLogger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/database-logger.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            TypeOrmLogger\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                log\n                            \n                            \n                                logMigration\n                            \n                            \n                                logQuery\n                            \n                            \n                                logQueryError\n                            \n                            \n                                logQuerySlow\n                            \n                            \n                                logSchemaBuild\n                            \n                            \n                                    Private\n                                stringifyParameters\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new NestLogger('SQL')\n                    \n                \n                    \n                        \n                                Defined in src/database/database-logger.ts:5\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        log\n                        \n                    \n                \n            \n            \n                \nlog(level: \"log\" | \"info\" | \"warn\", message: string, queryRunner?: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/database-logger.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    level\n                                    \n                                            \"log\" | \"info\" | \"warn\"\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logMigration\n                        \n                    \n                \n            \n            \n                \nlogMigration(message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/database/database-logger.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logQuery\n                        \n                    \n                \n            \n            \n                \nlogQuery(query: string, parameters?: [], queryRunner?: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/database-logger.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    parameters\n                                    \n                                            []\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logQueryError\n                        \n                    \n                \n            \n            \n                \nlogQueryError(error: string, query: string, parameters?: [], queryRunner?: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/database-logger.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    parameters\n                                    \n                                            []\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logQuerySlow\n                        \n                    \n                \n            \n            \n                \nlogQuerySlow(time: number, query: string, parameters?: [], queryRunner?: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/database-logger.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    time\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    parameters\n                                    \n                                            []\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logSchemaBuild\n                        \n                    \n                \n            \n            \n                \nlogSchemaBuild(message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/database/database-logger.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        stringifyParameters\n                        \n                    \n                \n            \n            \n                \n                    \n                    stringifyParameters(parameters?: [])\n                \n            \n\n\n            \n                \n                    Defined in src/database/database-logger.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    parameters\n                                    \n                                            []\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger as TypeOrmLogger, QueryRunner } from 'typeorm';\nimport { Logger as NestLogger } from '@nestjs/common';\n\nclass DatabaseLogger implements TypeOrmLogger {\n  private readonly logger = new NestLogger('SQL');\n\n  logQuery(query: string, parameters?: unknown[], queryRunner?: QueryRunner) {\n    if (queryRunner?.data?.isCreatingLogs) {\n      return;\n    }\n    this.logger.log(\n      `${query} -- Parameters: ${this.stringifyParameters(parameters)}`,\n    );\n  }\n  logQueryError(\n    error: string,\n    query: string,\n    parameters?: unknown[],\n    queryRunner?: QueryRunner,\n  ) {\n    if (queryRunner?.data?.isCreatingLogs) {\n      return;\n    }\n    this.logger.error(\n      `${query} -- Parameters: ${this.stringifyParameters(\n        parameters,\n      )} -- ${error}`,\n    );\n  }\n  logQuerySlow(\n    time: number,\n    query: string,\n    parameters?: unknown[],\n    queryRunner?: QueryRunner,\n  ) {\n    if (queryRunner?.data?.isCreatingLogs) {\n      return;\n    }\n    this.logger.warn(\n      `Time: ${time} -- Parameters: ${this.stringifyParameters(\n        parameters,\n      )} -- ${query}`,\n    );\n  }\n  logMigration(message: string) {\n    this.logger.log(message);\n  }\n  logSchemaBuild(message: string) {\n    this.logger.log(message);\n  }\n  log(\n    level: 'log' | 'info' | 'warn',\n    message: string,\n    queryRunner?: QueryRunner,\n  ) {\n    if (queryRunner?.data?.isCreatingLogs) {\n      return;\n    }\n    if (level === 'log') {\n      return this.logger.log(message);\n    }\n    if (level === 'info') {\n      return this.logger.debug(message);\n    }\n    if (level === 'warn') {\n      return this.logger.warn(message);\n    }\n  }\n  private stringifyParameters(parameters?: unknown[]) {\n    try {\n      return JSON.stringify(parameters);\n    } catch {\n      return '';\n    }\n  }\n}\n\nexport default DatabaseLogger;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport DatabaseLogger from './database-logger';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        type: 'mysql',\n        host: configService.get('DATABASE_HOST'),\n        port: configService.get('DATABASE_PORT'),\n        username: configService.get('DATABASE_USER'),\n        password: configService.get('DATABASE_PASSWORD'),\n        database: configService.get('DATABASE_DB'),\n        entities: [__dirname + '/../**/*.entity.js'],\n        logger: new DatabaseLogger(),\n        synchronize: true,\n      }),\n    }),\n  ],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ElasticsearchHealthIndicator.html":{"url":"injectables/ElasticsearchHealthIndicator.html","title":"injectable - ElasticsearchHealthIndicator","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ElasticsearchHealthIndicator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/elasticsearch-health-indicator.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    HealthIndicator\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                isHealthy\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(elasticsearchService: ElasticsearchService)\n                    \n                \n                        \n                            \n                                Defined in src/health/elasticsearch-health-indicator.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        elasticsearchService\n                                                  \n                                                        \n                                                                    ElasticsearchService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        isHealthy\n                        \n                    \n                \n            \n            \n                \n                    \n                    isHealthy(key: string)\n                \n            \n\n\n            \n                \n                    Defined in src/health/elasticsearch-health-indicator.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport {\n  HealthIndicator,\n  HealthIndicatorResult,\n  HealthCheckError,\n} from '@nestjs/terminus';\nimport { ElasticsearchService } from '@nestjs/elasticsearch';\n\n@Injectable()\nexport class ElasticsearchHealthIndicator extends HealthIndicator {\n  constructor(private readonly elasticsearchService: ElasticsearchService) {\n    super();\n  }\n\n  async isHealthy(key: string): Promise {\n    try {\n      await this.elasticsearchService.ping();\n      return this.getStatus(key, true);\n    } catch (error) {\n      throw new HealthCheckError(\n        'ElasticsearchHealthIndicator failed',\n        this.getStatus(key, false),\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EmailConfirmationController.html":{"url":"controllers/EmailConfirmationController.html","title":"controller - EmailConfirmationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EmailConfirmationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/email/email-confirmation.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                email-confirmation\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                confirm\n                            \n                            \n                                    \n                                    \n                                    Async\n                                resendConfirmationLink\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        confirm\n                        \n                    \n                \n            \n            \n                \n                    \n                    confirm(confirmationData: EmailConfirmationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('confirm')\n                \n            \n\n            \n                \n                    Defined in src/email/email-confirmation.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    confirmationData\n                                    \n                                                EmailConfirmationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        resendConfirmationLink\n                        \n                    \n                \n            \n            \n                \n                    \n                    resendConfirmationLink(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('resend-confirmation-link')@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/email/email-confirmation.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  ClassSerializerInterceptor,\n  Controller,\n  Post,\n  Req,\n  UseGuards,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { EmailConfirmationService } from './email-confirmation.service';\nimport EmailConfirmationDto from './dto/email-confimation.dto';\nimport JwtAuthenticationGuard from 'src/authentication/guard/jwt-authentication.guard';\nimport RequestWithUser from 'src/authentication/request-with-user.interface';\n\n@Controller('email-confirmation')\n@UseInterceptors(ClassSerializerInterceptor)\nexport class EmailConfirmationController {\n  constructor(\n    private readonly emailConfirmationService: EmailConfirmationService,\n  ) {}\n\n  @Post('confirm')\n  async confirm(@Body() confirmationData: EmailConfirmationDto) {\n    const email = await this.emailConfirmationService.decodeConfirmationToken(\n      confirmationData.token,\n    );\n    await this.emailConfirmationService.confirmEmail(email);\n  }\n\n  @Post('resend-confirmation-link')\n  @UseGuards(JwtAuthenticationGuard)\n  async resendConfirmationLink(@Req() request: RequestWithUser) {\n    await this.emailConfirmationService.resendConfirmationLink(request.user.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EmailConfirmationDto.html":{"url":"classes/EmailConfirmationDto.html","title":"class - EmailConfirmationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EmailConfirmationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/email/dto/email-confimation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/email/dto/email-confimation.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty } from 'class-validator';\n\nexport class EmailConfirmationDto {\n  @IsString()\n  @IsNotEmpty()\n  token: string;\n}\n\nexport default EmailConfirmationDto;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/EmailConfirmationGuard.html":{"url":"guards/EmailConfirmationGuard.html","title":"guard - EmailConfirmationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    EmailConfirmationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/email/email-confirmation.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/email/email-confirmation.guard.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  Injectable,\n  CanActivate,\n  ExecutionContext,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport RequestWithUser from 'src/authentication/request-with-user.interface';\n\n@Injectable()\nexport class EmailConfirmationGuard implements CanActivate {\n  canActivate(context: ExecutionContext) {\n    const request: RequestWithUser = context.switchToHttp().getRequest();\n\n    if (!request.user?.isEmailConfirmed) {\n      throw new UnauthorizedException('Confirm your email first');\n    }\n\n    return true;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmailConfirmationService.html":{"url":"injectables/EmailConfirmationService.html","title":"injectable - EmailConfirmationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EmailConfirmationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/email/email-confirmation.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                confirmEmail\n                            \n                            \n                                    Public\n                                    Async\n                                decodeConfirmationToken\n                            \n                            \n                                    Public\n                                    Async\n                                resendConfirmationLink\n                            \n                            \n                                    Public\n                                sendVerificationLink\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, configService: ConfigService, emailService: EmailService, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/email/email-confirmation.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        emailService\n                                                  \n                                                        \n                                                                        EmailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        confirmEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    confirmEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/email/email-confirmation.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        decodeConfirmationToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    decodeConfirmationToken(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/email/email-confirmation.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        resendConfirmationLink\n                        \n                    \n                \n            \n            \n                \n                    \n                    resendConfirmationLink(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/email/email-confirmation.service.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        sendVerificationLink\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendVerificationLink(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/email/email-confirmation.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport EmailService from './email.service';\nimport VerificationTokenPayload from './verification-token-payload.interface';\nimport { UserService } from 'src/user/user.service';\n\n@Injectable()\nexport class EmailConfirmationService {\n  constructor(\n    private readonly jwtService: JwtService,\n    private readonly configService: ConfigService,\n    private readonly emailService: EmailService,\n    private readonly userService: UserService,\n  ) {}\n\n  public sendVerificationLink(email: string) {\n    const payload: VerificationTokenPayload = { email };\n    const token = this.jwtService.sign(payload, {\n      secret: this.configService.get('JWT_VERIFICATION_TOKEN_SECRET'),\n      expiresIn: `${this.configService.get(\n        'JWT_VERIFICATION_TOKEN_EXPIRATION_TIME',\n      )}s`,\n    });\n    const url = `${this.configService.get(\n      'EMAIL_CONFIRMATION_URL',\n    )}?token=${token}`;\n    const text = `Welcome to the application. To confirm the email address, click here: ${url}`;\n    return this.emailService.sendMail({\n      to: email,\n      subject: 'Email confirmation',\n      text,\n    });\n  }\n\n  public async confirmEmail(email: string) {\n    const user = await this.userService.getByEmail(email);\n    if (user.isEmailConfirmed) {\n      throw new BadRequestException('Email already confirmed');\n    }\n    await this.userService.markEmailAsConfirmed(email);\n  }\n\n  public async decodeConfirmationToken(token: string) {\n    try {\n      const payload = await this.jwtService.verify(token, {\n        secret: this.configService.get('JWT_VERIFICATION_TOKEN_SECRET'),\n      });\n\n      if (typeof payload === 'object' && 'email' in payload) {\n        return payload.email;\n      }\n      throw new BadRequestException();\n    } catch (error) {\n      if (error?.name === 'TokenExpiredError') {\n        throw new BadRequestException('Email confirmation token expired');\n      }\n      throw new BadRequestException('Bad confirmation token');\n    }\n  }\n\n  public async resendConfirmationLink(userId: number) {\n    const user = await this.userService.getById(userId);\n    if (user.isEmailConfirmed) {\n      throw new BadRequestException('Email already confirmed');\n    }\n    await this.sendVerificationLink(user.email);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EmailModule.html":{"url":"modules/EmailModule.html","title":"module - EmailModule","body":"\n                   \n\n\n\n\n    Modules\n    EmailModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_EmailModule\n\n\n\ncluster_EmailModule_imports\n\n\n\ncluster_EmailModule_exports\n\n\n\ncluster_EmailModule_providers\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nEmailModule\n\nEmailModule\n\nEmailModule -->\n\nUserModule->EmailModule\n\n\n\n\n\nEmailConfirmationService \n\nEmailConfirmationService \n\nEmailConfirmationService  -->\n\nEmailModule->EmailConfirmationService \n\n\n\n\n\nEmailService \n\nEmailService \n\nEmailService  -->\n\nEmailModule->EmailService \n\n\n\n\n\nEmailConfirmationService\n\nEmailConfirmationService\n\nEmailModule -->\n\nEmailConfirmationService->EmailModule\n\n\n\n\n\nEmailService\n\nEmailService\n\nEmailModule -->\n\nEmailService->EmailModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/email/email.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EmailConfirmationService\n                        \n                        \n                            EmailService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            EmailConfirmationService\n                        \n                        \n                            EmailService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport EmailService from './email.service';\nimport { ConfigModule } from '@nestjs/config';\nimport { EmailConfirmationService } from './email-confirmation.service';\nimport { JwtService } from '@nestjs/jwt';\nimport { UserModule } from 'src/user/user.module';\n\n@Module({\n  imports: [ConfigModule, UserModule],\n  controllers: [],\n  providers: [EmailService, EmailConfirmationService, JwtService],\n  exports: [EmailService, EmailConfirmationService],\n})\nexport class EmailModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EmailScheduleDto.html":{"url":"classes/EmailScheduleDto.html","title":"class - EmailScheduleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EmailScheduleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/email/dto/email-schedule.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                content\n                            \n                            \n                                    \n                                date\n                            \n                            \n                                    \n                                recipient\n                            \n                            \n                                    \n                                    \n                                subject\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/email/dto/email-schedule.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/email/dto/email-schedule.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        recipient\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/email/dto/email-schedule.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        subject\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/email/dto/email-schedule.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty, IsDateString, IsEmail } from 'class-validator';\n\nexport class EmailScheduleDto {\n  @IsEmail()\n  recipient: string;\n\n  @IsString()\n  @IsNotEmpty()\n  subject: string;\n\n  @IsString()\n  @IsNotEmpty()\n  content: string;\n\n  @IsDateString()\n  date: string;\n}\n\nexport default EmailScheduleDto;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EmailSchedulingController.html":{"url":"controllers/EmailSchedulingController.html","title":"controller - EmailSchedulingController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EmailSchedulingController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/email/email-schedult.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                email-scheduling\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                scheduleEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        scheduleEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    scheduleEmail(emailSchedule: EmailScheduleDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('schedule')@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/email/email-schedult.controller.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    emailSchedule\n                                    \n                                                EmailScheduleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, UseGuards, Post } from '@nestjs/common';\nimport JwtAuthenticationGuard from '../authentication/guard/jwt-authentication.guard';\nimport EmailSchedulingService from './email-scheduling.service';\nimport EmailScheduleDto from './dto/email-schedule.dto';\n\n@Controller('email-scheduling')\nexport default class EmailSchedulingController {\n  constructor(\n    private readonly emailSchedulingService: EmailSchedulingService,\n  ) {}\n\n  @Post('schedule')\n  @UseGuards(JwtAuthenticationGuard)\n  async scheduleEmail(@Body() emailSchedule: EmailScheduleDto) {\n    this.emailSchedulingService.scheduleEmail(emailSchedule);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmailSchedulingService.html":{"url":"injectables/EmailSchedulingService.html","title":"injectable - EmailSchedulingService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EmailSchedulingService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/email/email-scheduling.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                cancelAllScheduledEmails\n                            \n                            \n                                scheduleEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(emailService: EmailService, schedulerRegistry: SchedulerRegistry)\n                    \n                \n                        \n                            \n                                Defined in src/email/email-scheduling.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        emailService\n                                                  \n                                                        \n                                                                        EmailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        schedulerRegistry\n                                                  \n                                                        \n                                                                    SchedulerRegistry\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        cancelAllScheduledEmails\n                        \n                    \n                \n            \n            \n                \ncancelAllScheduledEmails()\n                \n            \n\n\n            \n                \n                    Defined in src/email/email-scheduling.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        scheduleEmail\n                        \n                    \n                \n            \n            \n                \nscheduleEmail(emailSchedule: EmailScheduleDto)\n                \n            \n\n\n            \n                \n                    Defined in src/email/email-scheduling.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    emailSchedule\n                                    \n                                                EmailScheduleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { SchedulerRegistry } from '@nestjs/schedule';\nimport EmailService from './email.service';\nimport EmailScheduleDto from './dto/email-schedule.dto';\nimport { CronJob } from 'cron';\n\n@Injectable()\nexport default class EmailSchedulingService {\n  constructor(\n    private readonly emailService: EmailService,\n    private readonly schedulerRegistry: SchedulerRegistry,\n  ) {}\n\n  scheduleEmail(emailSchedule: EmailScheduleDto) {\n    const date = new Date(emailSchedule.date);\n    const job = new CronJob(date, () => {\n      this.emailService.sendMail({\n        to: emailSchedule.recipient,\n        subject: emailSchedule.subject,\n        text: emailSchedule.content,\n      });\n    });\n\n    this.schedulerRegistry.addCronJob(\n      `${Date.now()}-${emailSchedule.subject}`,\n      job,\n    );\n    job.start();\n  }\n\n  cancelAllScheduledEmails() {\n    this.schedulerRegistry.getCronJobs().forEach((job) => {\n      job.stop();\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmailService.html":{"url":"injectables/EmailService.html","title":"injectable - EmailService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EmailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/email/email.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                nodemailerTransport\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                sendMail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/email/email.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        sendMail\n                        \n                    \n                \n            \n            \n                \nsendMail(options: Mail.Options)\n                \n            \n\n\n            \n                \n                    Defined in src/email/email.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                            Mail.Options\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        nodemailerTransport\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Mail\n\n                    \n                \n                    \n                        \n                                Defined in src/email/email.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { createTransport } from 'nodemailer';\nimport * as Mail from 'nodemailer/lib/mailer';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport default class EmailService {\n  private nodemailerTransport: Mail;\n\n  constructor(private readonly configService: ConfigService) {\n    this.nodemailerTransport = createTransport({\n      host: configService.get('EMAIL_HOST'),\n      port: configService.get('EMAIL_PORT'),\n      auth: {\n        user: configService.get('EMAIL_USER'),\n        pass: configService.get('EMAIL_PASSWORD'),\n      },\n    });\n  }\n\n  sendMail(options: Mail.Options) {\n    return this.nodemailerTransport.sendMail(options);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExceptionsLoggerFilter.html":{"url":"classes/ExceptionsLoggerFilter.html","title":"class - ExceptionsLoggerFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExceptionsLoggerFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/exceptions-logger.filter.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    BaseExceptionFilter\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/exceptions-logger.filter.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Catch, ArgumentsHost } from '@nestjs/common';\nimport { BaseExceptionFilter } from '@nestjs/core';\n\n@Catch()\nexport class ExceptionsLoggerFilter extends BaseExceptionFilter {\n  catch(exception: unknown, host: ArgumentsHost) {\n    console.log('Exception thrown', exception);\n    super.catch(exception, host);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExcludeNullInterceptor.html":{"url":"injectables/ExcludeNullInterceptor.html","title":"injectable - ExcludeNullInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ExcludeNullInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/exclude-null.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/exclude-null.interceptor.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NestInterceptor,\n  ExecutionContext,\n  CallHandler,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport recursivelyStripNullValues from './recursively-strip-null-values';\n\n@Injectable()\nexport class ExcludeNullInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next\n      .handle()\n      .pipe(map((value) => recursivelyStripNullValues(value)));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FileModule.html":{"url":"modules/FileModule.html","title":"module - FileModule","body":"\n                   \n\n\n\n\n    Modules\n    FileModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FileModule\n\n\n\ncluster_FileModule_exports\n\n\n\ncluster_FileModule_providers\n\n\n\n\nPrivateFileService \n\nPrivateFileService \n\n\n\nPublicFileService \n\nPublicFileService \n\n\n\nFileModule\n\nFileModule\n\nPrivateFileService  -->\n\nFileModule->PrivateFileService \n\n\n\nPublicFileService  -->\n\nFileModule->PublicFileService \n\n\n\n\n\nPrivateFileService\n\nPrivateFileService\n\nFileModule -->\n\nPrivateFileService->FileModule\n\n\n\n\n\nPublicFileService\n\nPublicFileService\n\nFileModule -->\n\nPublicFileService->FileModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/file/file.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrivateFileService\n                        \n                        \n                            PublicFileService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PrivateFileService\n                        \n                        \n                            PublicFileService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PublicFileService } from './public-file.service';\nimport { ConfigModule } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport PublicFile from './entities/public-file.entity';\nimport { PrivateFileService } from './private-file.service';\nimport PrivateFile from './entities/private-file.entity';\n\n@Module({\n  imports: [ConfigModule, TypeOrmModule.forFeature([PublicFile, PrivateFile])],\n  controllers: [],\n  providers: [PublicFileService, PrivateFileService],\n  exports: [PublicFileService, PrivateFileService],\n})\nexport class FileModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FindOneParams.html":{"url":"classes/FindOneParams.html","title":"class - FindOneParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FindOneParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/find-one-params.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumberString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/find-one-params.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNumberString } from 'class-validator';\n\nclass FindOneParams {\n  @IsNumberString()\n  id: string;\n}\n\nexport default FindOneParams;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GoogleAuthenticationController.html":{"url":"controllers/GoogleAuthenticationController.html","title":"controller - GoogleAuthenticationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GoogleAuthenticationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/google-authentication.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                google-authentication\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                authenticate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        authenticate\n                        \n                    \n                \n            \n            \n                \n                    \n                    authenticate(tokenData: TokenVerificationDto, request: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/authentication/google-authentication.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenData\n                                    \n                                                TokenVerificationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  ClassSerializerInterceptor,\n  Controller,\n  Post,\n  Req,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { Request } from 'express';\nimport TokenVerificationDto from './dto/token-verification.dto';\nimport { GoogleAuthenticationService } from './google-authentication.service';\n\n@Controller('google-authentication')\n@UseInterceptors(ClassSerializerInterceptor)\nexport class GoogleAuthenticationController {\n  constructor(\n    private readonly googleAuthenticationService: GoogleAuthenticationService,\n  ) {}\n\n  @Post()\n  async authenticate(\n    @Body() tokenData: TokenVerificationDto,\n    @Req() request: Request,\n  ) {\n    const { accessTokenCookie, refreshTokenCookie, user } =\n      await this.googleAuthenticationService.authenticate(tokenData.token);\n\n    request.res.setHeader('Set-Cookie', [\n      accessTokenCookie,\n      refreshTokenCookie,\n    ]);\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleAuthenticationService.html":{"url":"injectables/GoogleAuthenticationService.html","title":"injectable - GoogleAuthenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GoogleAuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/google-authentication.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                oauthClient\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                authenticate\n                            \n                            \n                                    Async\n                                getCookiesForUser\n                            \n                            \n                                    Async\n                                getUserData\n                            \n                            \n                                    Async\n                                handleRegisteredUser\n                            \n                            \n                                    Async\n                                registerUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, configService: ConfigService, authenticationService: AuthenticationService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/google-authentication.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authenticationService\n                                                  \n                                                        \n                                                                        AuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        authenticate\n                        \n                    \n                \n            \n            \n                \n                    \n                    authenticate(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/google-authentication.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getCookiesForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCookiesForUser(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/google-authentication.service.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserData\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserData(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/google-authentication.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleRegisteredUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleRegisteredUser(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/google-authentication.service.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        registerUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    registerUser(token: string, email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/google-authentication.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        oauthClient\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Auth.OAuth2Client\n\n                    \n                \n                    \n                        \n                                Defined in src/authentication/google-authentication.service.ts:10\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Auth, google } from 'googleapis';\nimport { UserService } from 'src/user/user.service';\nimport { AuthenticationService } from './authentication.service';\nimport User from 'src/user/entities/user.entity';\n\n@Injectable()\nexport class GoogleAuthenticationService {\n  oauthClient: Auth.OAuth2Client;\n  constructor(\n    private readonly userService: UserService,\n    private readonly configService: ConfigService,\n    private readonly authenticationService: AuthenticationService,\n  ) {\n    const clientID = this.configService.get('GOOGLE_AUTH_CLIENT_ID');\n    const clientSecret = this.configService.get('GOOGLE_AUTH_CLIENT_SECRET');\n    this.oauthClient = new google.auth.OAuth2(clientID, clientSecret);\n  }\n\n  async authenticate(token: string) {\n    const tokenInfo = await this.oauthClient.getTokenInfo(token);\n    const email = tokenInfo.email;\n    try {\n      const user = await this.userService.getByEmail(email);\n      return this.handleRegisteredUser(user);\n    } catch (error) {\n      if (error.status !== 404) {\n        throw error;\n      }\n    }\n    return this.registerUser(token, email);\n  }\n\n  async registerUser(token: string, email: string) {\n    const userData = await this.getUserData(token);\n    const name = userData.name;\n    const user = await this.userService.createWithGoogle(email, name);\n    return this.handleRegisteredUser(user);\n  }\n\n  async getUserData(token: string) {\n    const userInfoClient = google.oauth2('v2').userinfo;\n    this.oauthClient.setCredentials({ access_token: token });\n    const userInfoResponse = await userInfoClient.get({\n      auth: this.oauthClient,\n    });\n    return userInfoResponse.data;\n  }\n\n  async getCookiesForUser(user: User) {\n    const accessTokenCookie =\n      this.authenticationService.getCookieWithJwtAccessToken(user.id);\n    const { cookie: refreshTokenCookie, token: refreshToken } =\n      this.authenticationService.getCookieWithJwtRefreshToken(user.id);\n\n    await this.userService.setCurrentRefreshToken(refreshToken, user.id);\n\n    return { accessTokenCookie, refreshTokenCookie };\n  }\n\n  async handleRegisteredUser(user: User) {\n    if (!user.isRegisteredWithGoogle) {\n      throw new UnauthorizedException();\n    }\n\n    const { accessTokenCookie, refreshTokenCookie } =\n      await this.getCookiesForUser(user);\n\n    return { accessTokenCookie, refreshTokenCookie, user };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController.html":{"url":"controllers/HealthController.html","title":"controller - HealthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/health.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                health\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                check\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        check\n                        \n                    \n                \n            \n            \n                \n                    \n                    check()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HealthCheck()\n                \n            \n\n            \n                \n                    Defined in src/health/health.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport {\n  HealthCheckService,\n  HealthCheck,\n  TypeOrmHealthIndicator,\n  HttpHealthIndicator,\n  MemoryHealthIndicator,\n  DiskHealthIndicator,\n} from '@nestjs/terminus';\nimport { ElasticsearchHealthIndicator } from './elasticsearch-health-indicator';\n\n@Controller('health')\nclass HealthController {\n  constructor(\n    private health: HealthCheckService,\n    private typeOrmHealthIndicator: TypeOrmHealthIndicator,\n    private httpHealthIndicator: HttpHealthIndicator,\n    private memoryHealthIndicator: MemoryHealthIndicator,\n    private diskHealthIndicator: DiskHealthIndicator,\n    private elasticsearchHealthIndicator: ElasticsearchHealthIndicator,\n  ) {}\n\n  @Get()\n  @HealthCheck()\n  check() {\n    return this.health.check([\n      () => this.typeOrmHealthIndicator.pingCheck('database'),\n      () => this.httpHealthIndicator.pingCheck('HTTP', 'http://www.google.com'),\n      // the process should not use more than 300MB memory\n      () =>\n        this.memoryHealthIndicator.checkHeap('memory heap', 300 * 1024 * 1024),\n      // The process should not have more than 300MB RSS memory allocated\n      () =>\n        this.memoryHealthIndicator.checkRSS('memory RSS', 300 * 1024 * 1024),\n      // the used disk storage should not exceed the 50% of the available space\n      () =>\n        this.diskHealthIndicator.checkStorage('disk health', {\n          thresholdPercent: 0.5,\n          path: '/',\n        }),\n      () => this.elasticsearchHealthIndicator.isHealthy('elasticsearch'),\n    ]);\n  }\n}\n\nexport default HealthController;\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HealthModule.html":{"url":"modules/HealthModule.html","title":"module - HealthModule","body":"\n                   \n\n\n\n\n    Modules\n    HealthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_HealthModule\n\n\n\ncluster_HealthModule_imports\n\n\n\ncluster_HealthModule_providers\n\n\n\n\nSearchModule\n\nSearchModule\n\n\n\nHealthModule\n\nHealthModule\n\nHealthModule -->\n\nSearchModule->HealthModule\n\n\n\n\n\nElasticsearchHealthIndicator\n\nElasticsearchHealthIndicator\n\nHealthModule -->\n\nElasticsearchHealthIndicator->HealthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/health/health.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ElasticsearchHealthIndicator\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            HealthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            SearchModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport HealthController from './health.controller';\nimport { TerminusModule } from '@nestjs/terminus';\nimport { HttpModule } from '@nestjs/axios';\nimport { ElasticsearchHealthIndicator } from './elasticsearch-health-indicator';\nimport { SearchModule } from 'src/search/search.module';\n\n@Module({\n  imports: [TerminusModule, HttpModule, SearchModule],\n  controllers: [HealthController],\n  providers: [ElasticsearchHealthIndicator],\n})\nexport default class HealthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/http-exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: NotFoundException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/http-exception.filter.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            NotFoundException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  NotFoundException,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\n\n@Catch(NotFoundException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n  catch(exception: NotFoundException, host: ArgumentsHost) {\n    const context = host.switchToHttp();\n    const response = context.getResponse();\n    const request = context.getRequest();\n    const status = exception.getStatus();\n    const message = exception.message;\n\n    response.status(status).json({\n      message,\n      statusCode: status,\n      time: new Date().toISOString(),\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ImageProcessor.html":{"url":"classes/ImageProcessor.html","title":"class - ImageProcessor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ImageProcessor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/optimize/optimize.process.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                handleOptimization\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        handleOptimization\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleOptimization(job: Job)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Process('optimize')\n                \n            \n\n            \n                \n                    Defined in src/optimize/optimize.process.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    job\n                                    \n                                            Job\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Process, Processor } from '@nestjs/bull';\nimport AdmZip from 'adm-zip';\nimport { Job } from 'bull';\nimport imagemin from 'imagemin';\nimport imageminPngquant from 'imagemin-pngquant';\n\n@Processor('image')\nexport class ImageProcessor {\n  @Process('optimize')\n  async handleOptimization(job: Job) {\n    const files: Express.Multer.File[] = job.data.files;\n    const optimizationPromises: Promise[] = files.map((file) => {\n      const fileBuffer = Buffer.from(file.buffer);\n      return imagemin.buffer(fileBuffer, {\n        plugins: [imageminPngquant({ quality: [0.6, 0.8] })],\n      });\n    });\n    const optimizedImages = await Promise.all(optimizationPromises);\n    const zip = new AdmZip();\n    optimizedImages.forEach((image, index) => {\n      const fileData = files[index];\n      zip.addFile(fileData.originalname, image);\n    });\n\n    return zip.toBuffer();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthenticationGuard.html":{"url":"injectables/JwtAuthenticationGuard.html","title":"injectable - JwtAuthenticationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthenticationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/guard/jwt-authentication.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport default class JwtAuthenticationGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtRefreshGuard.html":{"url":"injectables/JwtRefreshGuard.html","title":"injectable - JwtRefreshGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtRefreshGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/guard/jwt-refresh.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport default class JwtRefreshGuard extends AuthGuard('jwt-refresh-token') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtRefreshTokenStrategy.html":{"url":"injectables/JwtRefreshTokenStrategy.html","title":"injectable - JwtRefreshTokenStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtRefreshTokenStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/strategy/jwt-refresh-token.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/strategy/jwt-refresh-token.strategy.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(request: Request, payload: TokenPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/strategy/jwt-refresh-token.strategy.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                TokenPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Request } from 'express';\nimport { UserService } from 'src/user/user.service';\nimport TokenPayload from '../token-payload.interface';\n\n@Injectable()\nexport class JwtRefreshTokenStrategy extends PassportStrategy(\n  Strategy,\n  'jwt-refresh-token',\n) {\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly userService: UserService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([\n        (request: Request) => {\n          return request?.cookies?.Refresh;\n        },\n      ]),\n      secretOrKey: configService.get('JWT_REFRESH_TOKEN_SECRET'),\n      passReqToCallback: true,\n    });\n  }\n\n  async validate(request: Request, payload: TokenPayload) {\n    const refreshToken = request.cookies?.Refresh;\n    return this.userService.getUserIfRefreshTokenMatches(\n      refreshToken,\n      payload.userId,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/strategy/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/strategy/jwt.strategy.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: TokenPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/strategy/jwt.strategy.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                TokenPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Request } from 'express';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { UserService } from 'src/user/user.service';\nimport TokenPayload from '../token-payload.interface';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly userService: UserService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([\n        (request: Request) => {\n          return request?.cookies?.Authentication;\n        },\n      ]),\n      secretOrKey: configService.get('JWT_ACCESS_TOKEN_SECRET'),\n    });\n  }\n\n  async validate(payload: TokenPayload) {\n    return this.userService.getById(payload.userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtTwoFactorGuard.html":{"url":"injectables/JwtTwoFactorGuard.html","title":"injectable - JwtTwoFactorGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtTwoFactorGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/guard/jwt-two-factor.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport default class JwtTwoFactorGuard extends AuthGuard('jwt-two-factor') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtTwoFactorStrategy.html":{"url":"injectables/JwtTwoFactorStrategy.html","title":"injectable - JwtTwoFactorStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtTwoFactorStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/strategy/jwt-two-factor.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/strategy/jwt-two-factor.strategy.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: TokenPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/strategy/jwt-two-factor.strategy.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                TokenPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Request } from 'express';\nimport { UserService } from 'src/user/user.service';\nimport TokenPayload from '../token-payload.interface';\n\n@Injectable()\nexport class JwtTwoFactorStrategy extends PassportStrategy(\n  Strategy,\n  'jwt-two-factor',\n) {\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly userService: UserService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([\n        (request: Request) => {\n          return request?.cookies?.Authentication;\n        },\n      ]),\n      secretOrKey: configService.get('JWT_ACCESS_TOKEN_SECRET'),\n    });\n  }\n\n  async validate(payload: TokenPayload) {\n    const user = await this.userService.getById(payload.userId);\n    if (!user.isTwoFactorAuthenticationEnabled) {\n      return user;\n    }\n    if (payload.isSecondFactorAuthenticated) {\n      return user;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthenticationGuard.html":{"url":"injectables/LocalAuthenticationGuard.html","title":"injectable - LocalAuthenticationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthenticationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/guard/local-authentication.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthenticationGuard extends AuthGuard('local') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/strategy/local.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authenticationService: AuthenticationService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/strategy/local.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authenticationService\n                                                  \n                                                        \n                                                                        AuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/strategy/local.strategy.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy } from 'passport-local';\nimport { AuthenticationService } from '../authentication.service';\nimport User from 'src/user/entities/user.entity';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private authenticationService: AuthenticationService) {\n    super({ usernameField: 'email' });\n  }\n\n  async validate(email: string, password: string): Promise {\n    return this.authenticationService.getAuthenticatedUser(email, password);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Log.html":{"url":"entities/Log.html","title":"entity - Log","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Log\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/logger/log.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                context\n                            \n                            \n                                    \n                                creationDate\n                            \n                            \n                                    \n                                    Public\n                                id\n                            \n                            \n                                    \n                                    Public\n                                level\n                            \n                            \n                                    \n                                    Public\n                                message\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/logger/log.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        creationDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/logger/log.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/logger/log.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        level\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/logger/log.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/logger/log.entity.ts:17\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  Entity,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\n\n@Entity()\nclass Log {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @Column({ nullable: true })\n  public context: string;\n\n  @Column()\n  public message: string;\n\n  @Column()\n  public level: string;\n\n  @CreateDateColumn()\n  creationDate: Date;\n}\n\nexport default Log;\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/LoggerModule.html":{"url":"modules/LoggerModule.html","title":"module - LoggerModule","body":"\n                   \n\n\n\n\n    Modules\n    LoggerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_LoggerModule\n\n\n\ncluster_LoggerModule_exports\n\n\n\ncluster_LoggerModule_providers\n\n\n\n\nCustomLogger \n\nCustomLogger \n\n\n\nLoggerModule\n\nLoggerModule\n\nCustomLogger  -->\n\nLoggerModule->CustomLogger \n\n\n\n\n\nCustomLogger\n\nCustomLogger\n\nLoggerModule -->\n\nCustomLogger->LoggerModule\n\n\n\n\n\nLogsService\n\nLogsService\n\nLoggerModule -->\n\nLogsService->LoggerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/logger/logger.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CustomLogger\n                        \n                        \n                            LogsService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CustomLogger\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport CustomLogger from './custom-logger';\nimport { ConfigModule } from '@nestjs/config';\nimport LogsService from './logs.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport Log from './log.entity';\n\n@Module({\n  imports: [ConfigModule, TypeOrmModule.forFeature([Log])],\n  providers: [CustomLogger, LogsService],\n  exports: [CustomLogger],\n})\nexport class LoggerModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LogsMiddleware.html":{"url":"injectables/LogsMiddleware.html","title":"injectable - LogsMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LogsMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/logs.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(request: Request, response: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/logs.middleware.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger('HTTP')\n                    \n                \n                    \n                        \n                                Defined in src/utils/logs.middleware.ts:6\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger, NestMiddleware } from '@nestjs/common';\nimport { Request, Response, NextFunction } from 'express';\n\n@Injectable()\nclass LogsMiddleware implements NestMiddleware {\n  private readonly logger = new Logger('HTTP');\n\n  use(request: Request, response: Response, next: NextFunction) {\n    response.on('finish', () => {\n      const { method, originalUrl } = request;\n      const { statusCode, statusMessage } = response;\n\n      const message = `${method} ${originalUrl} ${statusCode} ${statusMessage}`;\n\n      if (statusCode >= 500) {\n        return this.logger.error(message);\n      }\n\n      if (statusCode >= 400) {\n        return this.logger.warn(message);\n      }\n\n      return this.logger.log(message);\n    });\n\n    next();\n  }\n}\n\nexport default LogsMiddleware;\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LogsService.html":{"url":"injectables/LogsService.html","title":"injectable - LogsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LogsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/logger/logs.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/logger/logs.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createLog\n                        \n                    \n                \n            \n            \n                \n                    \n                    createLog(log: CreateLogDto)\n                \n            \n\n\n            \n                \n                    Defined in src/logger/logs.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    log\n                                    \n                                                CreateLogDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport Log from './log.entity';\nimport CreateLogDto from './dto/create-log.dto';\n\n@Injectable()\nexport default class LogsService {\n  constructor(\n    @InjectRepository(Log)\n    private logsRepository: Repository,\n  ) {}\n\n  async createLog(log: CreateLogDto) {\n    const newLog = await this.logsRepository.create(log);\n    await this.logsRepository.save(newLog, {\n      data: {\n        isCreatingLogs: true,\n      },\n    });\n    return newLog;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/OptimizeController.html":{"url":"controllers/OptimizeController.html","title":"controller - OptimizeController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  OptimizeController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/optimize/optimize.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                optimize\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                getJobResult\n                            \n                            \n                                    \n                                    \n                                    Async\n                                processImage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        getJobResult\n                        \n                    \n                \n            \n            \n                \n                    \n                    getJobResult(response: Response, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('image/:id')\n                \n            \n\n            \n                \n                    Defined in src/optimize/optimize.controller.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        processImage\n                        \n                    \n                \n            \n            \n                \n                    \n                    processImage(files: Express.Multer.File[])\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('image')@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in src/optimize/optimize.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    files\n                                    \n                                            Express.Multer.File[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { InjectQueue } from '@nestjs/bull';\nimport {\n  Controller,\n  Get,\n  Param,\n  Post,\n  Res,\n  UploadedFiles,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { AnyFilesInterceptor } from '@nestjs/platform-express';\nimport { Queue } from 'bull';\nimport { Response } from 'express';\nimport { Readable } from 'stream';\n\n@Controller('optimize')\nexport class OptimizeController {\n  constructor(@InjectQueue('image') private readonly imageQueue: Queue) {}\n\n  @Post('image')\n  @UseInterceptors(AnyFilesInterceptor())\n  async processImage(@UploadedFiles() files: Express.Multer.File[]) {\n    const job = await this.imageQueue.add('optimize', { files });\n    return { jobId: job.id };\n  }\n\n  @Get('image/:id')\n  async getJobResult(@Res() response: Response, @Param('id') id: string) {\n    const job = await this.imageQueue.getJob(id);\n    if (!job) {\n      return response.sendStatus(404);\n    }\n\n    const isCompleted = await job.isCompleted();\n\n    if (!isCompleted) {\n      return response.sendStatus(202);\n    }\n\n    const result = Buffer.from(job.returnvalue);\n    const stream = Readable.from(result);\n\n    stream.pipe(response);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/OptimizeModule.html":{"url":"modules/OptimizeModule.html","title":"module - OptimizeModule","body":"\n                   \n\n\n\n\n    Modules\n    OptimizeModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/optimize/optimize.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            OptimizeController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { OptimizeController } from './optimize.controller';\nimport { BullModule } from '@nestjs/bull';\nimport { ImageProcessor } from './optimize.process';\nimport { join } from 'path';\n\n@Module({\n  imports: [\n    BullModule.registerQueue({\n      name: 'image',\n      processors: [\n        { name: 'optimize', path: join(__dirname, 'image.processor.js') },\n      ],\n    }),\n  ],\n  providers: [ImageProcessor],\n  exports: [],\n  controllers: [OptimizeController],\n})\nexport class OptimizeModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationParams.html":{"url":"classes/PaginationParams.html","title":"class - PaginationParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/pagination-params.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                limit\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                offset\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsNumber()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/pagination-params.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        offset\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsNumber()@Min(0)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/pagination-params.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNumber, Min, IsOptional } from 'class-validator';\nimport { Type } from 'class-transformer';\n\nexport class PaginationParams {\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(0)\n  offset?: number;\n\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  limit?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Post.html":{"url":"entities/Post.html","title":"entity - Post","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/entities/post.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Public\n                                author\n                            \n                            \n                                    \n                                    \n                                    Public\n                                categories\n                            \n                            \n                                    \n                                    Public\n                                content\n                            \n                            \n                                    \n                                    Public\n                                id\n                            \n                            \n                                    \n                                    Public\n                                paragraphs\n                            \n                            \n                                    \n                                    Public\n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Index()@ManyToOne(undefined, author => author.posts)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/entities/post.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                        categories\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Category[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, category => category.posts, {eager: true, cascade: true})@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/entities/post.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/entities/post.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn({unsigned: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/entities/post.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        paragraphs\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/entities/post.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/entities/post.entity.ts:25\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import User from 'src/user/entities/user.entity';\nimport {\n  Column,\n  Entity,\n  Index,\n  JoinTable,\n  ManyToMany,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport Category from './category.entity';\n\n@Entity()\nclass Post {\n  @PrimaryGeneratedColumn({ unsigned: true })\n  public id: number;\n\n  @Column()\n  public content: string;\n\n  @Column('json')\n  public paragraphs: string[];\n\n  @Column()\n  public title: string;\n\n  @Index()\n  @ManyToOne(() => User, (author: User) => author.posts)\n  public author: User;\n\n  @ManyToMany(() => Category, (category: Category) => category.posts, {\n    eager: true,\n    cascade: true,\n  })\n  @JoinTable()\n  public categories: Category[];\n}\n\nexport default Post;\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostController.html":{"url":"controllers/PostController.html","title":"controller - PostController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/controllers/post.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                post\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                create\n                            \n                            \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    \n                                findOne\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createPostDto: CreatePostDto, req: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@HttpCode(200)@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/post/controllers/post.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createPostDto\n                                    \n                                                CreatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(search: string, undefined: PaginationParams)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseInterceptors(CacheInterceptor)@Get()\n                \n            \n\n            \n                \n                    Defined in src/post/controllers/post.controller.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    search\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                PaginationParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseInterceptors(CacheInterceptor)@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/post/controllers/post.controller.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/post/controllers/post.controller.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updatePostDto: UpdatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/post/controllers/post.controller.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updatePostDto\n                                    \n                                                UpdatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseGuards,\n  Req,\n  HttpCode,\n  Query,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { PostsService } from '../services/posts.service';\nimport { CreatePostDto } from '../dto/create-post.dto';\nimport { UpdatePostDto } from '../dto/update-post.dto';\nimport RequestWithUser from 'src/authentication/request-with-user.interface';\nimport { PaginationParams } from 'src/utils/pagination-params';\nimport { CacheInterceptor } from '@nestjs/cache-manager';\n// import JwtTwoFactorGuard from 'src/authentication/guard/jwt-two-factor.guard';\nimport JwtAuthenticationGuard from 'src/authentication/guard/jwt-authentication.guard';\n\n@Controller('post')\nexport class PostController {\n  constructor(private readonly postsService: PostsService) {}\n\n  @Post()\n  @HttpCode(200)\n  @UseGuards(JwtAuthenticationGuard)\n  create(@Body() createPostDto: CreatePostDto, @Req() req: RequestWithUser) {\n    return this.postsService.create(createPostDto, req.user);\n  }\n\n  @UseInterceptors(CacheInterceptor)\n  @Get()\n  findAll(\n    @Query('search') search: string,\n    @Query() { offset, limit }: PaginationParams,\n  ) {\n    if (search) {\n      return this.postsService.searchForPosts(search, offset, limit);\n    }\n    return this.postsService.findAll(offset, limit);\n  }\n\n  @UseInterceptors(CacheInterceptor)\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.postsService.findOne(+id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updatePostDto: UpdatePostDto) {\n    return this.postsService.update(+id, updatePostDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.postsService.remove(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostModule.html":{"url":"modules/PostModule.html","title":"module - PostModule","body":"\n                   \n\n\n\n\n    Modules\n    PostModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostModule\n\n\n\ncluster_PostModule_imports\n\n\n\ncluster_PostModule_providers\n\n\n\n\nEmailModule\n\nEmailModule\n\n\n\nPostModule\n\nPostModule\n\nPostModule -->\n\nEmailModule->PostModule\n\n\n\n\n\nSearchModule\n\nSearchModule\n\nPostModule -->\n\nSearchModule->PostModule\n\n\n\n\n\nPostsSearchService\n\nPostsSearchService\n\nPostModule -->\n\nPostsSearchService->PostModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostModule -->\n\nPostsService->PostModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/post/post.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsSearchService\n                        \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            EmailModule\n                        \n                        \n                            SearchModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsService } from './services/posts.service';\nimport { PostController } from './controllers/post.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport Post from './entities/post.entity';\nimport PostsSearchService from './services/posts-search.service';\nimport { SearchModule } from 'src/search/search.module';\nimport { CacheModule } from '@nestjs/cache-manager';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport * as redisStore from 'cache-manager-redis-store';\nimport { EmailModule } from 'src/email/email.module';\n\n@Module({\n  imports: [\n    CacheModule.registerAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        store: redisStore,\n        host: configService.get('REDIS_HOST'),\n        port: configService.get('REDIS_PORT'),\n        ttl: 120,\n      }),\n    }),\n    TypeOrmModule.forFeature([Post]),\n    SearchModule,\n    EmailModule,\n  ],\n  controllers: [PostController],\n  providers: [PostsService, PostsSearchService],\n})\nexport class PostModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostNotFoundException.html":{"url":"classes/PostNotFoundException.html","title":"class - PostNotFoundException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostNotFoundException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/exception/post-not-found.exception.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    NotFoundException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postId: number)\n                    \n                \n                        \n                            \n                                Defined in src/post/exception/post-not-found.exception.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postId\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotFoundException } from '@nestjs/common';\n\nclass PostNotFoundException extends NotFoundException {\n  constructor(postId: number) {\n    super(`Post with id ${postId} not found`);\n  }\n}\n\nexport default PostNotFoundException;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PostSearchBody.html":{"url":"interfaces/PostSearchBody.html","title":"interface - PostSearchBody","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PostSearchBody\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/types/post-search-body.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            authorId\n                                        \n                                \n                                \n                                        \n                                            content\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        authorId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        authorId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        content\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        content:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        interface PostSearchBody {\n  id: number;\n  title: string;\n  content: string;\n  authorId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PostSearchResult.html":{"url":"interfaces/PostSearchResult.html","title":"interface - PostSearchResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PostSearchResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/types/post-search-result.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            hits\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        hits\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        hits:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        interface PostSearchResult {\n  hits: {\n    total: number;\n    hits: Array;\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsSearchService.html":{"url":"injectables/PostsSearchService.html","title":"injectable - PostsSearchService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsSearchService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/services/posts-search.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                index\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                indexPost\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                search\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(elasticsearchService: ElasticsearchService)\n                    \n                \n                        \n                            \n                                Defined in src/post/services/posts-search.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        elasticsearchService\n                                                  \n                                                        \n                                                                    ElasticsearchService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        indexPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    indexPost(post: Post)\n                \n            \n\n\n            \n                \n                    Defined in src/post/services/posts-search.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    post\n                                    \n                                                Post\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(postId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/post/services/posts-search.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        search\n                        \n                    \n                \n            \n            \n                \n                    \n                    search(text: string, offset?: number, limit?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/post/services/posts-search.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    offset\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(post: Post)\n                \n            \n\n\n            \n                \n                    Defined in src/post/services/posts-search.service.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    post\n                                    \n                                                Post\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        index\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'posts'\n                    \n                \n                    \n                        \n                                Defined in src/post/services/posts-search.service.ts:7\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ElasticsearchService } from '@nestjs/elasticsearch';\nimport Post from '../entities/post.entity';\n\n@Injectable()\nexport default class PostsSearchService {\n  index = 'posts';\n\n  constructor(private readonly elasticsearchService: ElasticsearchService) {}\n\n  async indexPost(post: Post) {\n    return this.elasticsearchService.index({\n      index: this.index,\n      body: {\n        id: post.id,\n        title: post.title,\n        content: post.content,\n        authorId: post.author.id,\n      },\n    });\n  }\n\n  async search(text: string, offset?: number, limit?: number) {\n    const { hits } = await this.elasticsearchService.search({\n      index: this.index,\n      from: offset,\n      size: limit,\n      body: {\n        query: {\n          multi_match: { query: text, fields: ['title', 'content'] },\n        },\n        sort: {\n          id: { order: 'asc' },\n        },\n      },\n    });\n    const count = hits.total.valueOf();\n    const results = hits.hits.map((item) => item._source);\n    return { count, results };\n  }\n\n  async remove(postId: number) {\n    this.elasticsearchService.deleteByQuery({\n      index: this.index,\n      body: {\n        query: {\n          match: { id: postId },\n        },\n      },\n    });\n  }\n\n  async update(post: Post) {\n    const newBody: PostSearchBody = {\n      id: post.id,\n      title: post.title,\n      content: post.content,\n      authorId: post.author.id,\n    };\n\n    const script = Object.entries(newBody).reduce((result, [key, value]) => {\n      return `${result} ctx._source.${key}='${value}';`;\n    }, '');\n\n    return this.elasticsearchService.updateByQuery({\n      index: this.index,\n      body: {\n        query: {\n          match: { id: post.id },\n        },\n        script: script,\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/services/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                searchForPosts\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postRepository: Repository, postsSearchService: PostsSearchService, emailService: EmailService)\n                    \n                \n                        \n                            \n                                Defined in src/post/services/posts.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        postsSearchService\n                                                  \n                                                        \n                                                                        PostsSearchService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        emailService\n                                                  \n                                                        \n                                                                        EmailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createPostDto: CreatePostDto, user?: User)\n                \n            \n\n\n            \n                \n                    Defined in src/post/services/posts.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createPostDto\n                                    \n                                                CreatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(offset?: number, limit?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/post/services/posts.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    offset\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/post/services/posts.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/post/services/posts.service.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        searchForPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    searchForPosts(text: string, offset?: number, limit?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/post/services/posts.service.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    offset\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, updatePostDto: UpdatePostDto)\n                \n            \n\n\n            \n                \n                    Defined in src/post/services/posts.service.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updatePostDto\n                                    \n                                                UpdatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreatePostDto } from '../dto/create-post.dto';\nimport { UpdatePostDto } from '../dto/update-post.dto';\nimport Post from '../entities/post.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { In, Repository } from 'typeorm';\nimport PostNotFoundException from '../exception/post-not-found.exception';\nimport User from 'src/user/entities/user.entity';\nimport PostsSearchService from './posts-search.service';\nimport EmailService from 'src/email/email.service';\n\n@Injectable()\nexport class PostsService {\n  constructor(\n    @InjectRepository(Post)\n    private postRepository: Repository,\n    private postsSearchService: PostsSearchService,\n    private emailService: EmailService,\n  ) {}\n\n  async create(createPostDto: CreatePostDto, user?: User) {\n    const newPost = await this.postRepository.create({\n      ...createPostDto,\n      author: user,\n    });\n    await this.postRepository.save(newPost);\n    await this.postsSearchService.indexPost(newPost);\n    await this.emailService.sendMail({\n      from: 'withyousoft1@hotmail.com',\n      to: 'yinzhequan510@gmail.com',\n      subject: 'test email from nest-app',\n      text: 'this is the test email content.',\n    });\n    return newPost;\n  }\n\n  async findAll(offset?: number, limit?: number) {\n    const [items, count] = await this.postRepository.find({\n      relations: ['author'],\n      order: { id: 'ASC' },\n      skip: offset,\n      take: limit,\n    });\n    return { items, count };\n  }\n\n  async findOne(id: number) {\n    const post = await this.postRepository.findOne({\n      where: { id },\n      relations: ['author'],\n    });\n    if (post) {\n      return post;\n    }\n    throw new PostNotFoundException(id);\n  }\n\n  async update(id: number, updatePostDto: UpdatePostDto) {\n    await this.postRepository.update(id, updatePostDto);\n    const updatedPost = await this.postRepository.findOne({\n      where: { id },\n      relations: ['author'],\n    });\n    if (updatedPost) {\n      await this.postsSearchService.update(updatedPost);\n      return updatedPost;\n    }\n    throw new PostNotFoundException(id);\n  }\n\n  async remove(id: number) {\n    const deleteResponse = await this.postRepository.delete(id);\n    if (!deleteResponse.affected) {\n      throw new PostNotFoundException(id);\n    }\n    await this.postsSearchService.remove(id);\n  }\n\n  async searchForPosts(text: string, offset?: number, limit?: number) {\n    const results = await this.postsSearchService.search(text, offset, limit);\n    const ids = results.results.map((result) => result.id);\n    if (!ids.length) {\n      return [];\n    }\n    return this.postRepository.find({\n      where: { id: In(ids) },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/PrivateFile.html":{"url":"entities/PrivateFile.html","title":"entity - PrivateFile","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  PrivateFile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/file/entities/private-file.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                id\n                            \n                            \n                                    \n                                    Public\n                                key\n                            \n                            \n                                    \n                                    Public\n                                owner\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/file/entities/private-file.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/file/entities/private-file.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        owner\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, owner => owner.files)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/file/entities/private-file.entity.ts:13\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport User from 'src/user/entities/user.entity';\n\n@Entity()\nclass PrivateFile {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @Column()\n  public key: string;\n\n  @ManyToOne(() => User, (owner: User) => owner.files)\n  public owner: User;\n}\n\nexport default PrivateFile;\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrivateFileService.html":{"url":"injectables/PrivateFileService.html","title":"injectable - PrivateFileService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrivateFileService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/file/private-file.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                generatePresignedUrl\n                            \n                            \n                                    Public\n                                    Async\n                                getPrivateFile\n                            \n                            \n                                    Public\n                                    Async\n                                uploadPrivateFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(privateFileRepository: Repository, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/file/private-file.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        privateFileRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        generatePresignedUrl\n                        \n                    \n                \n            \n            \n                \n                    \n                    generatePresignedUrl(key: string)\n                \n            \n\n\n            \n                \n                    Defined in src/file/private-file.service.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getPrivateFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPrivateFile(fileId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/file/private-file.service.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        uploadPrivateFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadPrivateFile(dataBuffer: Buffer, ownerId: number, fileName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/file/private-file.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataBuffer\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    ownerId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    fileName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { v4 as uuid } from 'uuid';\nimport PrivateFile from './entities/private-file.entity';\nimport { S3 } from 'aws-sdk';\n\n@Injectable()\nexport class PrivateFileService {\n  constructor(\n    @InjectRepository(PrivateFile)\n    private privateFileRepository: Repository,\n    private readonly configService: ConfigService,\n  ) {}\n\n  public async uploadPrivateFile(\n    dataBuffer: Buffer,\n    ownerId: number,\n    fileName: string,\n  ) {\n    const s3 = new S3({\n      credentials: {\n        accessKeyId: this.configService.get('AWS_ACCESS_KEY_ID'),\n        secretAccessKey: this.configService.get('AWS_SECRET_ACCESS_KEY'),\n      },\n      region: this.configService.get('AWS_REGION'),\n      endpoint: this.configService.get('AWS_S3_BUCKET_ENDPOINT'),\n      signatureVersion: 'v4',\n    });\n\n    const uploadResult = await s3\n      .upload({\n        Bucket: this.configService.get('AWS_S3_PRIVATE_BUCKET_NAME'),\n        Body: dataBuffer,\n        Key: `${uuid()}-${fileName}`,\n      })\n      .promise();\n\n    const newPrivateFile = this.privateFileRepository.create({\n      key: uploadResult.Key,\n      owner: {\n        id: ownerId,\n      },\n    });\n\n    await this.privateFileRepository.save(newPrivateFile);\n    return newPrivateFile;\n  }\n\n  public async getPrivateFile(fileId: number) {\n    const s3 = new S3({\n      credentials: {\n        accessKeyId: this.configService.get('AWS_ACCESS_KEY_ID'),\n        secretAccessKey: this.configService.get('AWS_SECRET_ACCESS_KEY'),\n      },\n      region: this.configService.get('AWS_REGION'),\n      endpoint: this.configService.get('AWS_S3_BUCKET_ENDPOINT'),\n      signatureVersion: 'v4',\n    });\n\n    const fileInfo = await this.privateFileRepository.findOne({\n      where: { id: fileId },\n      relations: ['owner'],\n    });\n\n    if (fileInfo) {\n      const stream = await s3\n        .getObject({\n          Bucket: this.configService.get('AWS_S3_PRIVATE_BUCKET_NAME'),\n          Key: fileInfo.key,\n        })\n        .createReadStream();\n      return {\n        stream,\n        info: fileInfo,\n      };\n    }\n    throw new NotFoundException();\n  }\n\n  public async generatePresignedUrl(key: string) {\n    const s3 = new S3({\n      credentials: {\n        accessKeyId: this.configService.get('AWS_ACCESS_KEY_ID'),\n        secretAccessKey: this.configService.get('AWS_SECRET_ACCESS_KEY'),\n      },\n      region: this.configService.get('AWS_REGION'),\n      endpoint: this.configService.get('AWS_S3_BUCKET_ENDPOINT'),\n      signatureVersion: 'v4',\n    });\n\n    return s3.getSignedUrlPromise('getObject', {\n      Bucket: this.configService.get('AWS_S3_PRIVATE_BUCKET_NAME'),\n      Key: key,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/PublicFile.html":{"url":"entities/PublicFile.html","title":"entity - PublicFile","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  PublicFile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/file/entities/public-file.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                id\n                            \n                            \n                                    \n                                    Public\n                                key\n                            \n                            \n                                    \n                                    Public\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn({unsigned: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/file/entities/public-file.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/file/entities/public-file.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/file/entities/public-file.entity.ts:9\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nclass PublicFile {\n  @PrimaryGeneratedColumn({ unsigned: true })\n  public id: number;\n\n  @Column()\n  public url: string;\n\n  @Column()\n  public key: string;\n}\n\nexport default PublicFile;\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PublicFileService.html":{"url":"injectables/PublicFileService.html","title":"injectable - PublicFileService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PublicFileService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/file/public-file.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deletePublicFile\n                            \n                            \n                                    Async\n                                deletePublicFileWithQueryRunner\n                            \n                            \n                                    Async\n                                uploadPublicFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(publicFileRepository: Repository, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/file/public-file.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        publicFileRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deletePublicFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePublicFile(fileId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/file/public-file.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deletePublicFileWithQueryRunner\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePublicFileWithQueryRunner(fileId: number, queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/file/public-file.service.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadPublicFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadPublicFile(dataBuffer: Buffer, fileName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/file/public-file.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataBuffer\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    fileName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { QueryRunner, Repository } from 'typeorm';\nimport { S3 } from 'aws-sdk';\nimport { ConfigService } from '@nestjs/config';\nimport { v4 as uuid } from 'uuid';\nimport PublicFile from './entities/public-file.entity';\n\n@Injectable()\nexport class PublicFileService {\n  constructor(\n    @InjectRepository(PublicFile)\n    private publicFileRepository: Repository,\n    private readonly configService: ConfigService,\n  ) {}\n\n  async uploadPublicFile(dataBuffer: Buffer, fileName: string) {\n    const s3 = new S3({\n      credentials: {\n        accessKeyId: this.configService.get('AWS_ACCESS_KEY_ID'),\n        secretAccessKey: this.configService.get('AWS_SECRET_ACCESS_KEY'),\n      },\n      region: this.configService.get('AWS_REGION'),\n      endpoint: this.configService.get('AWS_S3_BUCKET_ENDPOINT'),\n      signatureVersion: 'v4',\n    });\n    const uploadResult = await s3\n      .upload({\n        Bucket: this.configService.get('AWS_S3_PUBLIC_BUCKET_NAME'),\n        Body: dataBuffer,\n        Key: `${uuid()}-${fileName}`,\n        ACL: 'public-read',\n      })\n      .promise();\n\n    const newFile = this.publicFileRepository.create({\n      key: uploadResult.Key,\n      url: uploadResult.Location,\n    });\n    await this.publicFileRepository.save(newFile);\n    return newFile;\n  }\n\n  async deletePublicFile(fileId: number) {\n    const file = await this.publicFileRepository.findOne({\n      where: { id: fileId },\n    });\n    const s3 = new S3();\n    await s3\n      .deleteObject({\n        Bucket: this.configService.get('AWS_S3_PUBLIC_BUCKET_NAME'),\n        Key: file.key,\n      })\n      .promise();\n    await this.publicFileRepository.delete(fileId);\n  }\n\n  async deletePublicFileWithQueryRunner(\n    fileId: number,\n    queryRunner: QueryRunner,\n  ) {\n    const file = await queryRunner.manager.findOne(PublicFile, {\n      where: { id: fileId },\n    });\n    const s3 = new S3();\n    await s3\n      .deleteObject({\n        Bucket: this.configService.get('AWS_PUBLIC_BUCKET_NAME'),\n        Key: file.key,\n      })\n      .promise();\n    await queryRunner.manager.delete(PublicFile, fileId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterDto.html":{"url":"classes/RegisterDto.html","title":"class - RegisterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/dto/register.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/register.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/register.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(7)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/register.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsString, MinLength } from 'class-validator';\n\nexport class RegisterDto {\n  @IsEmail()\n  email: string;\n\n  @IsString()\n  name: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(7)\n  password: string;\n}\n\nexport default RegisterDto;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestWithUser.html":{"url":"interfaces/RequestWithUser.html","title":"interface - RequestWithUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestWithUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/request-with-user.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         User\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         User\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Request } from 'express';\nimport User from 'src/user/entities/user.entity';\n\ninterface RequestWithUser extends Request {\n  user: User;\n}\n\nexport default RequestWithUser;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SearchModule.html":{"url":"modules/SearchModule.html","title":"module - SearchModule","body":"\n                   \n\n\n\n\n    Modules\n    SearchModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/search/search.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { ElasticsearchModule } from '@nestjs/elasticsearch';\n\n@Module({\n  imports: [\n    ConfigModule,\n    ElasticsearchModule.registerAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => ({\n        node: configService.get('ELASTICSEARCH_NODE'),\n        auth: {\n          username: configService.get('ELASTICSEARCH_USERNAME'),\n          password: configService.get('ELASTICSEARCH_PASSWORD'),\n        },\n      }),\n      inject: [ConfigService],\n    }),\n  ],\n  exports: [ElasticsearchModule],\n})\nexport class SearchModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TokenPayload.html":{"url":"interfaces/TokenPayload.html","title":"interface - TokenPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TokenPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/token-payload.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            isSecondFactorAuthenticated\n                                        \n                                \n                                \n                                        \n                                            userId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        isSecondFactorAuthenticated\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isSecondFactorAuthenticated:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        interface TokenPayload {\n  userId: number;\n  isSecondFactorAuthenticated: boolean;\n}\n\nexport default TokenPayload;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TokenVerificationDto.html":{"url":"classes/TokenVerificationDto.html","title":"class - TokenVerificationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TokenVerificationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/dto/token-verification.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/token-verification.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty } from 'class-validator';\n\nexport class TokenVerificationDto {\n  @IsString()\n  @IsNotEmpty()\n  token: string;\n}\n\nexport default TokenVerificationDto;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TwoFactorAuthenticationCodeDto.html":{"url":"classes/TwoFactorAuthenticationCodeDto.html","title":"class - TwoFactorAuthenticationCodeDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TwoFactorAuthenticationCodeDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/dto/two-factor-authentication-code.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                twoFactorAuthenticationCode\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        twoFactorAuthenticationCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/two-factor-authentication-code.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString } from 'class-validator';\n\nexport class TwoFactorAuthenticationCodeDto {\n  @IsString()\n  twoFactorAuthenticationCode: string;\n}\n\nexport default TwoFactorAuthenticationCodeDto;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TwoFactorAuthenticationController.html":{"url":"controllers/TwoFactorAuthenticationController.html","title":"controller - TwoFactorAuthenticationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TwoFactorAuthenticationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/two-factor-authentication.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                2fa\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                authenticate\n                            \n                            \n                                    \n                                    \n                                    Async\n                                register\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                turnOnTwoFactorAuthentication\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        Async\n                        authenticate\n                        \n                    \n                \n            \n            \n                \n                    \n                    authenticate(request: RequestWithUser, undefined: TwoFactorAuthenticationCodeDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('authenticate')@HttpCode(200)@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/authentication/two-factor-authentication.controller.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                TwoFactorAuthenticationCodeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(response: Response, request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('generate')@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/authentication/two-factor-authentication.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        Async\n                        turnOnTwoFactorAuthentication\n                        \n                    \n                \n            \n            \n                \n                    \n                    turnOnTwoFactorAuthentication(request: RequestWithUser, undefined: TwoFactorAuthenticationCodeDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('turn-on')@HttpCode(200)@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/authentication/two-factor-authentication.controller.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                TwoFactorAuthenticationCodeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  ClassSerializerInterceptor,\n  Controller,\n  Post,\n  UseInterceptors,\n  Res,\n  UseGuards,\n  Req,\n  HttpCode,\n  Body,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { TwoFactorAuthenticationService } from './two-factor-authentication.service';\nimport { Response } from 'express';\nimport JwtAuthenticationGuard from './guard/jwt-authentication.guard';\nimport RequestWithUser from './request-with-user.interface';\nimport { UserService } from 'src/user/user.service';\nimport TwoFactorAuthenticationCodeDto from './dto/two-factor-authentication-code.dto';\nimport { AuthenticationService } from './authentication.service';\n\n@Controller('2fa')\n@UseInterceptors(ClassSerializerInterceptor)\nexport class TwoFactorAuthenticationController {\n  constructor(\n    private readonly twoFactorAuthenticationService: TwoFactorAuthenticationService,\n    private readonly usersService: UserService,\n    private readonly authenticationService: AuthenticationService,\n  ) {}\n\n  @Post('generate')\n  @UseGuards(JwtAuthenticationGuard)\n  async register(@Res() response: Response, @Req() request: RequestWithUser) {\n    const { otpauthUrl } =\n      await this.twoFactorAuthenticationService.generateTwoFactorAuthenticationSecret(\n        request.user,\n      );\n\n    return this.twoFactorAuthenticationService.pipeQrCodeStream(\n      response,\n      otpauthUrl,\n    );\n  }\n\n  @Post('turn-on')\n  @HttpCode(200)\n  @UseGuards(JwtAuthenticationGuard)\n  async turnOnTwoFactorAuthentication(\n    @Req() request: RequestWithUser,\n    @Body() { twoFactorAuthenticationCode }: TwoFactorAuthenticationCodeDto,\n  ) {\n    const isCodeValid =\n      this.twoFactorAuthenticationService.isTwoFactorAuthenticationCodeValid(\n        twoFactorAuthenticationCode,\n        request.user,\n      );\n    if (!isCodeValid) {\n      throw new UnauthorizedException('Wrong authentication code');\n    }\n    await this.usersService.turnOnTwoFactorAuthentication(request.user.id);\n  }\n\n  @Post('authenticate')\n  @HttpCode(200)\n  @UseGuards(JwtAuthenticationGuard)\n  async authenticate(\n    @Req() request: RequestWithUser,\n    @Body() { twoFactorAuthenticationCode }: TwoFactorAuthenticationCodeDto,\n  ) {\n    const isCodeValid =\n      this.twoFactorAuthenticationService.isTwoFactorAuthenticationCodeValid(\n        twoFactorAuthenticationCode,\n        request.user,\n      );\n    if (!isCodeValid) {\n      throw new UnauthorizedException('Wrong authentication code');\n    }\n\n    const accessTokenCookie =\n      this.authenticationService.getCookieWithJwtAccessToken(\n        request.user.id,\n        // true,\n      );\n\n    request.res.setHeader('Set-Cookie', [accessTokenCookie]);\n\n    return request.user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TwoFactorAuthenticationService.html":{"url":"injectables/TwoFactorAuthenticationService.html","title":"injectable - TwoFactorAuthenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TwoFactorAuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/two-factor-authentication.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                generateTwoFactorAuthenticationSecret\n                            \n                            \n                                    Public\n                                isTwoFactorAuthenticationCodeValid\n                            \n                            \n                                    Public\n                                    Async\n                                pipeQrCodeStream\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UserService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/two-factor-authentication.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        generateTwoFactorAuthenticationSecret\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateTwoFactorAuthenticationSecret(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/two-factor-authentication.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        isTwoFactorAuthenticationCodeValid\n                        \n                    \n                \n            \n            \n                \n                    \n                    isTwoFactorAuthenticationCodeValid(twoFactorAuthenticationCode: string, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/two-factor-authentication.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    twoFactorAuthenticationCode\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        pipeQrCodeStream\n                        \n                    \n                \n            \n            \n                \n                    \n                    pipeQrCodeStream(stream: Response, otpauthUrl: string)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/two-factor-authentication.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    stream\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    otpauthUrl\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { authenticator } from 'otplib';\nimport { ConfigService } from '@nestjs/config';\nimport User from 'src/user/entities/user.entity';\nimport { UserService } from 'src/user/user.service';\nimport { toFileStream } from 'qrcode';\nimport { Response } from 'express';\n\n@Injectable()\nexport class TwoFactorAuthenticationService {\n  constructor(\n    private readonly usersService: UserService,\n    private readonly configService: ConfigService,\n  ) {}\n\n  public async generateTwoFactorAuthenticationSecret(user: User) {\n    const secret = authenticator.generateSecret();\n\n    const otpauthUrl = authenticator.keyuri(\n      user.email,\n      this.configService.get('TWO_FACTOR_AUTHENTICATION_APP_NAME'),\n      secret,\n    );\n\n    await this.usersService.setTwoFactorAuthenticationSecret(secret, user.id);\n\n    return { secret, otpauthUrl };\n  }\n\n  public async pipeQrCodeStream(stream: Response, otpauthUrl: string) {\n    return toFileStream(stream, otpauthUrl);\n  }\n\n  public isTwoFactorAuthenticationCodeValid(\n    twoFactorAuthenticationCode: string,\n    user: User,\n  ) {\n    return authenticator.verify({\n      token: twoFactorAuthenticationCode,\n      secret: user.twoFactorAuthenticationSecret,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateCategoryDto.html":{"url":"classes/UpdateCategoryDto.html","title":"class - UpdateCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/dto/update-category.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/post/dto/update-category.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport CreateCategoryDto from './create-category.dto';\n\nexport class UpdateCategoryDto extends PartialType(CreateCategoryDto) {\n  id: number;\n}\n\nexport default UpdateCategoryDto;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePostDto.html":{"url":"classes/UpdatePostDto.html","title":"class - UpdatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/dto/update-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/post/dto/update-post.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreatePostDto } from './create-post.dto';\n\nexport class UpdatePostDto extends PartialType(CreatePostDto) {\n  id: number;\n}\n\nexport default UpdatePostDto;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/update-user.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Public\n                                address\n                            \n                            \n                                    \n                                    \n                                    Public\n                                    Optional\n                                avatar\n                            \n                            \n                                    \n                                    \n                                    Public\n                                    Optional\n                                currentHashedRefreshToken\n                            \n                            \n                                    \n                                    Public\n                                email\n                            \n                            \n                                    \n                                    Public\n                                files\n                            \n                            \n                                    \n                                    Public\n                                    Optional\n                                id\n                            \n                            \n                                    \n                                    Public\n                                isEmailConfirmed\n                            \n                            \n                                    \n                                    Public\n                                isRegisteredWithGoogle\n                            \n                            \n                                    \n                                    Public\n                                isTwoFactorAuthenticationEnabled\n                            \n                            \n                                    \n                                    Public\n                                name\n                            \n                            \n                                    \n                                    \n                                    Public\n                                password\n                            \n                            \n                                    \n                                    Public\n                                posts\n                            \n                            \n                                    \n                                    Public\n                                    Optional\n                                twoFactorAuthenticationSecret\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Address\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, {eager: true, cascade: true})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                            Optional\n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PublicFile\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @JoinColumn()@OneToOne(undefined, {eager: true, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                            Optional\n                        currentHashedRefreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        files\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PrivateFile[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, file => file.owner)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn({unsigned: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        isEmailConfirmed\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        isRegisteredWithGoogle\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        isTwoFactorAuthenticationEnabled\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, post => post.author)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Optional\n                        twoFactorAuthenticationSecret\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:49\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Exclude } from 'class-transformer';\nimport {\n  Column,\n  Entity,\n  JoinColumn,\n  OneToMany,\n  OneToOne,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport Address from './address.entity';\nimport Post from 'src/post/entities/post.entity';\nimport PublicFile from 'src/file/entities/public-file.entity';\nimport PrivateFile from 'src/file/entities/private-file.entity';\n\n@Entity()\nclass User {\n  @PrimaryGeneratedColumn({ unsigned: true })\n  public id?: number;\n\n  @Column({ unique: true })\n  public email: string;\n\n  @Column({ nullable: true })\n  @Exclude()\n  public currentHashedRefreshToken?: string;\n\n  @Column()\n  public name: string;\n\n  @Column()\n  @Exclude()\n  public password: string;\n\n  @OneToOne(() => Address, { eager: true, cascade: true })\n  @JoinColumn()\n  public address: Address;\n\n  @OneToMany(() => Post, (post: Post) => post.author)\n  public posts: Post[];\n\n  @JoinColumn()\n  @OneToOne(() => PublicFile, { eager: true, nullable: true })\n  public avatar?: PublicFile;\n\n  @OneToMany(() => PrivateFile, (file: PrivateFile) => file.owner)\n  public files: PrivateFile[];\n\n  @Column({ nullable: true })\n  public twoFactorAuthenticationSecret?: string;\n\n  @Column({ default: false })\n  public isTwoFactorAuthenticationEnabled: boolean;\n\n  @Column({ default: false })\n  public isEmailConfirmed: boolean;\n\n  @Column({ default: false })\n  public isRegisteredWithGoogle: boolean;\n}\n\nexport default User;\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                addAvatar\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                addPrivateFile\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getAllPrivateFiles\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getPrivateFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        Async\n                        addAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    addAvatar(request: RequestWithUser, file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('avatar')@UseGuards(JwtAuthenticationGuard)@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        Async\n                        addPrivateFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    addPrivateFile(request: RequestWithUser, file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('files')@UseGuards(JwtAuthenticationGuard)@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        getAllPrivateFiles\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllPrivateFiles(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('files')@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        getPrivateFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPrivateFile(request: RequestWithUser, undefined: FindOneParams, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('files/:id')@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                FindOneParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Param,\n  Post,\n  Req,\n  Res,\n  UploadedFile,\n  UseGuards,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { UserService } from './user.service';\nimport JwtAuthenticationGuard from 'src/authentication/guard/jwt-authentication.guard';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport RequestWithUser from 'src/authentication/request-with-user.interface';\nimport { Express, Response } from 'express';\nimport FindOneParams from 'src/utils/find-one-params';\n\n@Controller('user')\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  @Post('avatar')\n  @UseGuards(JwtAuthenticationGuard)\n  @UseInterceptors(FileInterceptor('file'))\n  async addAvatar(\n    @Req() request: RequestWithUser,\n    @UploadedFile() file: Express.Multer.File,\n  ) {\n    return this.userService.addAvatar(\n      request.user.id,\n      file.buffer,\n      file.originalname,\n    );\n  }\n\n  @Post('files')\n  @UseGuards(JwtAuthenticationGuard)\n  @UseInterceptors(FileInterceptor('file'))\n  async addPrivateFile(\n    @Req() request: RequestWithUser,\n    @UploadedFile() file: Express.Multer.File,\n  ) {\n    return this.userService.addPrivateFile(\n      request.user.id,\n      file.buffer,\n      file.originalname,\n    );\n  }\n\n  @Get('files/:id')\n  @UseGuards(JwtAuthenticationGuard)\n  async getPrivateFile(\n    @Req() request: RequestWithUser,\n    @Param() { id }: FindOneParams,\n    @Res() res: Response,\n  ) {\n    const file = await this.userService.getPrivateFile(\n      request.user.id,\n      Number(id),\n    );\n    file.stream.pipe(res);\n  }\n\n  @Get('files')\n  @UseGuards(JwtAuthenticationGuard)\n  async getAllPrivateFiles(@Req() request: RequestWithUser) {\n    return this.userService.getAllPrivateFiles(request.user.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserModule_imports\n\n\n\ncluster_UserModule_exports\n\n\n\n\nFileModule\n\nFileModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nFileModule->UserModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            FileModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { UserController } from './user.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport User from './entities/user.entity';\nimport { FileModule } from 'src/file/file.module';\n\n@Module({\n  imports: [FileModule, TypeOrmModule.forFeature([User])],\n  controllers: [UserController],\n  providers: [UserService],\n  exports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserNotFoundException.html":{"url":"classes/UserNotFoundException.html","title":"class - UserNotFoundException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserNotFoundException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/exception/user-not-found.exception.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    NotFoundException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userId: number)\n                    \n                \n                        \n                            \n                                Defined in src/user/exception/user-not-found.exception.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userId\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotFoundException } from '@nestjs/common';\n\nclass UserNotFoundException extends NotFoundException {\n  constructor(userId: number) {\n    super(`User with id ${userId} not found`);\n  }\n}\n\nexport default UserNotFoundException;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addAvatar\n                            \n                            \n                                    Async\n                                addPrivateFile\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                createWithGoogle\n                            \n                            \n                                    Async\n                                deleteAvatar\n                            \n                            \n                                    Async\n                                getAllPrivateFiles\n                            \n                            \n                                    Async\n                                getByEmail\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                getPrivateFile\n                            \n                            \n                                    Async\n                                getUserIfRefreshTokenMatches\n                            \n                            \n                                    Async\n                                markEmailAsConfirmed\n                            \n                            \n                                    Async\n                                removeRefreshToken\n                            \n                            \n                                    Async\n                                setCurrentRefreshToken\n                            \n                            \n                                    Async\n                                setTwoFactorAuthenticationSecret\n                            \n                            \n                                    Async\n                                turnOnTwoFactorAuthentication\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dataSource: DataSource, usersRepository: Repository, publicFileService: PublicFileService, privateFileService: PrivateFileService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        publicFileService\n                                                  \n                                                        \n                                                                        PublicFileService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        privateFileService\n                                                  \n                                                        \n                                                                        PrivateFileService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    addAvatar(userId: number, imageBuffer: Buffer, filename: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    imageBuffer\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    filename\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addPrivateFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    addPrivateFile(userId: number, imageBuffer: Buffer, filename: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:102\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    imageBuffer\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    filename\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createWithGoogle\n                        \n                    \n                \n            \n            \n                \n                    \n                    createWithGoogle(email: string, name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteAvatar(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllPrivateFiles\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllPrivateFiles(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:118\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    getByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPrivateFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPrivateFile(userId: number, fileId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    fileId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserIfRefreshTokenMatches\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserIfRefreshTokenMatches(refreshToken: string, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:144\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        markEmailAsConfirmed\n                        \n                    \n                \n            \n            \n                \n                    \n                    markEmailAsConfirmed(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:174\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeRefreshToken(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:156\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        setCurrentRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    setCurrentRefreshToken(refreshToken: string, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:139\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        setTwoFactorAuthenticationSecret\n                        \n                    \n                \n            \n            \n                \n                    \n                    setTwoFactorAuthenticationSecret(secret: string, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:162\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    secret\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        turnOnTwoFactorAuthentication\n                        \n                    \n                \n            \n            \n                \n                    \n                    turnOnTwoFactorAuthentication(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:168\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  HttpException,\n  HttpStatus,\n  Injectable,\n  InternalServerErrorException,\n  NotFoundException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport * as bcrypt from 'bcrypt';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport User from './entities/user.entity';\nimport { DataSource, Repository } from 'typeorm';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { PublicFileService } from 'src/file/public-file.service';\nimport { PrivateFileService } from 'src/file/private-file.service';\nimport UserNotFoundException from './exception/user-not-found.exception';\n\n@Injectable()\nexport class UserService {\n  constructor(\n    private dataSource: DataSource,\n    @InjectRepository(User)\n    private usersRepository: Repository,\n    private readonly publicFileService: PublicFileService,\n    private readonly privateFileService: PrivateFileService,\n  ) {}\n\n  async getByEmail(email: string) {\n    const user = await this.usersRepository.findOne({ where: { email } });\n    if (user) {\n      return user;\n    }\n    throw new HttpException(\n      'User with this email does not exist',\n      HttpStatus.NOT_FOUND,\n    );\n  }\n\n  async create(createUserDto: CreateUserDto) {\n    const newUser = await this.usersRepository.create(createUserDto);\n    await this.usersRepository.save(newUser);\n    return newUser;\n  }\n\n  async createWithGoogle(email: string, name: string) {\n    const newUser = await this.usersRepository.create({\n      email,\n      name,\n      isRegisteredWithGoogle: true,\n    });\n    await this.usersRepository.save(newUser);\n    return newUser;\n  }\n\n  async getById(id: number) {\n    const user = await this.usersRepository.findOne({ where: { id } });\n    if (user) {\n      return user;\n    }\n    throw new UserNotFoundException(id);\n  }\n\n  async addAvatar(userId: number, imageBuffer: Buffer, filename: string) {\n    const avatar = await this.publicFileService.uploadPublicFile(\n      imageBuffer,\n      filename,\n    );\n    const user = await this.getById(userId);\n    await this.usersRepository.update(userId, {\n      ...user,\n      avatar,\n    });\n    return avatar;\n  }\n\n  async deleteAvatar(userId: number) {\n    const queryRunner = this.dataSource.createQueryRunner();\n    const user = await this.getById(userId);\n    const field = user.avatar?.id;\n    if (field) {\n      await queryRunner.connect();\n      await queryRunner.startTransaction();\n      try {\n        await queryRunner.manager.update(User, userId, {\n          ...user,\n          avatar: null,\n        });\n        await this.publicFileService.deletePublicFileWithQueryRunner(\n          field,\n          queryRunner,\n        );\n        await queryRunner.commitTransaction();\n      } catch (error) {\n        await queryRunner.rollbackTransaction();\n        throw new InternalServerErrorException();\n      } finally {\n        await queryRunner.release();\n      }\n    }\n  }\n\n  async addPrivateFile(userId: number, imageBuffer: Buffer, filename: string) {\n    return this.privateFileService.uploadPrivateFile(\n      imageBuffer,\n      userId,\n      filename,\n    );\n  }\n\n  async getPrivateFile(userId: number, fileId: number) {\n    const file = await this.privateFileService.getPrivateFile(fileId);\n    if (file.info.owner.id === userId) {\n      return file;\n    }\n    throw new UnauthorizedException();\n  }\n\n  async getAllPrivateFiles(userId: number) {\n    const userWithFiles = await this.usersRepository.findOne({\n      where: { id: userId },\n      relations: ['files'],\n    });\n    if (userWithFiles) {\n      return Promise.all(\n        userWithFiles.files.map(async (file) => {\n          const url = await this.privateFileService.generatePresignedUrl(\n            file.key,\n          );\n          return {\n            ...file,\n            url,\n          };\n        }),\n      );\n    }\n    throw new NotFoundException('User with this id does not exist');\n  }\n\n  async setCurrentRefreshToken(refreshToken: string, userId: number) {\n    const currentHashedRefreshToken = await bcrypt.hash(refreshToken, 10);\n    await this.usersRepository.update(userId, { currentHashedRefreshToken });\n  }\n\n  async getUserIfRefreshTokenMatches(refreshToken: string, userId: number) {\n    const user = await this.getById(userId);\n    const isRefreshTokenMatching = await bcrypt.compare(\n      refreshToken,\n      user.currentHashedRefreshToken,\n    );\n\n    if (isRefreshTokenMatching) {\n      return user;\n    }\n  }\n\n  async removeRefreshToken(userId: number) {\n    return this.usersRepository.update(userId, {\n      currentHashedRefreshToken: null,\n    });\n  }\n\n  async setTwoFactorAuthenticationSecret(secret: string, userId: number) {\n    return this.usersRepository.update(userId, {\n      twoFactorAuthenticationSecret: secret,\n    });\n  }\n\n  async turnOnTwoFactorAuthentication(userId: number) {\n    return this.usersRepository.update(userId, {\n      isTwoFactorAuthenticationEnabled: true,\n    });\n  }\n\n  async markEmailAsConfirmed(email: string) {\n    return this.usersRepository.update({ email }, { isEmailConfirmed: true });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/VerificationTokenPayload.html":{"url":"interfaces/VerificationTokenPayload.html","title":"interface - VerificationTokenPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  VerificationTokenPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/email/verification-token-payload.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        interface VerificationTokenPayload {\n  email: string;\n}\n\nexport default VerificationTokenPayload;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/authentication/authentication.controller.ts\n            \n            controller\n            AuthenticationController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/authentication/authentication.service.ts\n            \n            injectable\n            AuthenticationService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/authentication/dto/register.dto.ts\n            \n            class\n            RegisterDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/authentication/dto/token-verification.dto.ts\n            \n            class\n            TokenVerificationDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/authentication/dto/two-factor-authentication-code.dto.ts\n            \n            class\n            TwoFactorAuthenticationCodeDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/authentication/google-authentication.controller.ts\n            \n            controller\n            GoogleAuthenticationController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/authentication/google-authentication.service.ts\n            \n            injectable\n            GoogleAuthenticationService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/authentication/guard/jwt-authentication.guard.ts\n            \n            injectable\n            JwtAuthenticationGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authentication/guard/jwt-refresh.guard.ts\n            \n            injectable\n            JwtRefreshGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authentication/guard/jwt-two-factor.guard.ts\n            \n            injectable\n            JwtTwoFactorGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authentication/guard/local-authentication.guard.ts\n            \n            injectable\n            LocalAuthenticationGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authentication/request-with-user.interface.ts\n            \n            interface\n            RequestWithUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/authentication/strategy/jwt-refresh-token.strategy.ts\n            \n            injectable\n            JwtRefreshTokenStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/strategy/jwt-two-factor.strategy.ts\n            \n            injectable\n            JwtTwoFactorStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/strategy/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/strategy/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/token-payload.interface.ts\n            \n            interface\n            TokenPayload\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/two-factor-authentication.controller.ts\n            \n            controller\n            TwoFactorAuthenticationController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/authentication/two-factor-authentication.service.ts\n            \n            injectable\n            TwoFactorAuthenticationService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/database/database-logger.ts\n            \n            class\n            DatabaseLogger\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/email/dto/email-confimation.dto.ts\n            \n            class\n            EmailConfirmationDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/email/dto/email-schedule.dto.ts\n            \n            class\n            EmailScheduleDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/email/email-confirmation.controller.ts\n            \n            controller\n            EmailConfirmationController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/email/email-confirmation.guard.ts\n            \n            guard\n            EmailConfirmationGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/email/email-confirmation.service.ts\n            \n            injectable\n            EmailConfirmationService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/email/email-scheduling.service.ts\n            \n            injectable\n            EmailSchedulingService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/email/email-schedult.controller.ts\n            \n            controller\n            EmailSchedulingController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/email/email.service.ts\n            \n            injectable\n            EmailService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/email/verification-token-payload.interface.ts\n            \n            interface\n            VerificationTokenPayload\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/file/entities/private-file.entity.ts\n            \n            entity\n            PrivateFile\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/file/entities/public-file.entity.ts\n            \n            entity\n            PublicFile\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/file/private-file.service.ts\n            \n            injectable\n            PrivateFileService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/file/public-file.service.ts\n            \n            injectable\n            PublicFileService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/health/elasticsearch-health-indicator.ts\n            \n            injectable\n            ElasticsearchHealthIndicator\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/health/health.controller.ts\n            \n            controller\n            HealthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/logger/custom-logger.ts\n            \n            injectable\n            CustomLogger\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/logger/dto/create-log.dto.ts\n            \n            class\n            CreateLogDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/logger/log.entity.ts\n            \n            entity\n            Log\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/logger/logs.service.ts\n            \n            injectable\n            LogsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/optimize/image.process.ts\n            \n            function\n            imageProcessor\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/optimize/optimize.controller.ts\n            \n            controller\n            OptimizeController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/optimize/optimize.process.ts\n            \n            class\n            ImageProcessor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/post/controllers/post.controller.ts\n            \n            controller\n            PostController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/post/dto/create-category.dto.ts\n            \n            class\n            CreateCategoryDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/post/dto/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/post/dto/update-category.dto.ts\n            \n            class\n            UpdateCategoryDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/post/dto/update-post.dto.ts\n            \n            class\n            UpdatePostDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/post/entities/category.entity.ts\n            \n            entity\n            Category\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/post/entities/post.entity.ts\n            \n            entity\n            Post\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/post/exception/category-not-found.exception.ts\n            \n            class\n            CategoryNotFoundException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/post/exception/post-not-found.exception.ts\n            \n            class\n            PostNotFoundException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/post/services/categories.service.ts\n            \n            injectable\n            CategoriesService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/post/services/posts-search.service.ts\n            \n            injectable\n            PostsSearchService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/post/services/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/post/types/post-search-body.interface.ts\n            \n            interface\n            PostSearchBody\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/post/types/post-search-result.interface.ts\n            \n            interface\n            PostSearchResult\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/run-in-cluster.ts\n            \n            function\n            runInCluster\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/user/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/entities/address.entity.ts\n            \n            entity\n            Address\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/entities/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/exception/user-not-found.exception.ts\n            \n            class\n            UserNotFoundException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                src/utils/exceptions-logger.filter.ts\n            \n            class\n            ExceptionsLoggerFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/utils/exclude-null.interceptor.ts\n            \n            injectable\n            ExcludeNullInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/utils/find-one-params.ts\n            \n            class\n            FindOneParams\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/utils/get-log-levels.ts\n            \n            function\n            getLogLevels\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/http-exception.filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/utils/logs.middleware.ts\n            \n            injectable\n            LogsMiddleware\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/utils/pagination-params.ts\n            \n            class\n            PaginationParams\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/utils/recursively-strip-null-values.ts\n            \n            function\n            recursivelyStripNullValues\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.21\n        \n            @elastic/elasticsearch : ^8.8.1\n        \n            @hapi/joi : ^17.1.1\n        \n            @nestjs/axios : ^3.0.0\n        \n            @nestjs/bull : ^10.0.0\n        \n            @nestjs/cache-manager : ^2.0.1\n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^2.3.3\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/elasticsearch : ^10.0.1\n        \n            @nestjs/jwt : ^10.0.3\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/passport : ^9.0.3\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/schedule : ^3.0.1\n        \n            @nestjs/terminus : ^10.0.1\n        \n            @nestjs/typeorm : ^9.0.1\n        \n            @types/adm-zip : ^0.5.0\n        \n            @types/aws-sdk : ^2.7.0\n        \n            @types/bull : ^4.10.0\n        \n            @types/cron : ^2.0.1\n        \n            @types/imagemin : ^8.0.1\n        \n            @types/multer : ^1.4.7\n        \n            @types/nodemailer : ^6.4.8\n        \n            @types/uuid : ^9.0.2\n        \n            adm-zip : ^0.5.10\n        \n            aws-sdk : ^2.1398.0\n        \n            bcrypt : ^5.1.0\n        \n            bull : ^4.10.4\n        \n            cache-manager : ^5.2.3\n        \n            cache-manager-redis-store : ^3.0.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.0\n        \n            cookie-parser : ^1.4.6\n        \n            googleapis : ^120.0.0\n        \n            imagemin : ^8.0.1\n        \n            imagemin-pngquant : ^9.0.2\n        \n            mysql2 : ^3.3.5\n        \n            nodemailer : ^6.9.3\n        \n            otplib : ^12.0.1\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            qrcode : ^1.5.3\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.2.0\n        \n            typeorm : ^0.3.16\n        \n            uuid : ^9.0.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            MysqlErrorCode   (src/.../mysql-error-codes.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/database/mysql-error-codes.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        MysqlErrorCode\n                    \n                \n                        \n                            \n                                 UniqueViolation\n                            \n                        \n                        \n                            \n                                Value : 1724\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            getLogLevels   (src/.../get-log-levels.ts)\n                        \n                        \n                            imageProcessor   (src/.../image.process.ts)\n                        \n                        \n                            recursivelyStripNullValues   (src/.../recursively-strip-null-values.ts)\n                        \n                        \n                            runInCluster   (src/.../run-in-cluster.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/utils/get-log-levels.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getLogLevels\n                        \n                    \n                \n            \n            \n                \ngetLogLevels(isProduction: boolean)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    isProduction\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         LogLevel[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/optimize/image.process.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        imageProcessor\n                        \n                    \n                \n            \n            \n                \nimageProcessor(job: Job, doneCallback: DoneCallback)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    job\n                                    \n                                            Job\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    doneCallback\n                                    \n                                            DoneCallback\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/utils/recursively-strip-null-values.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        recursivelyStripNullValues\n                        \n                    \n                \n            \n            \n                \nrecursivelyStripNullValues(value)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/run-in-cluster.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        runInCluster\n                        \n                    \n                \n            \n            \n                \nrunInCluster(bootstrap)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    bootstrap\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthenticationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EmailModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FileModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HealthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        LoggerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        OptimizeModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SearchModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthenticationModule\n\n\n\ncluster_AuthenticationModule_imports\n\n\n\ncluster_AuthenticationModule_providers\n\n\n\ncluster_EmailModule\n\n\n\ncluster_EmailModule_exports\n\n\n\ncluster_EmailModule_providers\n\n\n\ncluster_FileModule\n\n\n\ncluster_FileModule_exports\n\n\n\ncluster_FileModule_providers\n\n\n\ncluster_HealthModule\n\n\n\ncluster_HealthModule_imports\n\n\n\ncluster_HealthModule_providers\n\n\n\ncluster_LoggerModule\n\n\n\ncluster_LoggerModule_exports\n\n\n\ncluster_LoggerModule_providers\n\n\n\ncluster_PostModule\n\n\n\ncluster_PostModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthenticationModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nLoggerModule\n\nLoggerModule\n\nAppModule -->\n\nLoggerModule->AppModule\n\n\n\n\n\nCustomLogger \n\nCustomLogger \n\nCustomLogger  -->\n\nLoggerModule->CustomLogger \n\n\n\n\n\nPostModule\n\nPostModule\n\nAppModule -->\n\nPostModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthenticationModule -->\n\nUserModule->AuthenticationModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nEmailModule\n\nEmailModule\n\nEmailModule -->\n\nUserModule->EmailModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\nAuthenticationModule -->\n\nEmailModule->AuthenticationModule\n\n\n\nPostModule -->\n\nEmailModule->PostModule\n\n\n\n\n\nEmailConfirmationService \n\nEmailConfirmationService \n\nEmailConfirmationService  -->\n\nEmailModule->EmailConfirmationService \n\n\n\n\n\nEmailService \n\nEmailService \n\nEmailService  -->\n\nEmailModule->EmailService \n\n\n\n\n\nAuthenticationService\n\nAuthenticationService\n\nAuthenticationModule -->\n\nAuthenticationService->AuthenticationModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthenticationModule -->\n\nJwtStrategy->AuthenticationModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthenticationModule -->\n\nLocalStrategy->AuthenticationModule\n\n\n\n\n\nTwoFactorAuthenticationService\n\nTwoFactorAuthenticationService\n\nAuthenticationModule -->\n\nTwoFactorAuthenticationService->AuthenticationModule\n\n\n\n\n\nEmailConfirmationService\n\nEmailConfirmationService\n\nEmailModule -->\n\nEmailConfirmationService->EmailModule\n\n\n\n\n\nEmailService\n\nEmailService\n\nEmailModule -->\n\nEmailService->EmailModule\n\n\n\n\n\nPrivateFileService \n\nPrivateFileService \n\n\n\nPublicFileService \n\nPublicFileService \n\n\n\nFileModule\n\nFileModule\n\nUserModule -->\n\nFileModule->UserModule\n\n\n\nPrivateFileService  -->\n\nFileModule->PrivateFileService \n\n\n\nPublicFileService  -->\n\nFileModule->PublicFileService \n\n\n\n\n\nPrivateFileService\n\nPrivateFileService\n\nFileModule -->\n\nPrivateFileService->FileModule\n\n\n\n\n\nPublicFileService\n\nPublicFileService\n\nFileModule -->\n\nPublicFileService->FileModule\n\n\n\n\n\nSearchModule\n\nSearchModule\n\nHealthModule -->\n\nSearchModule->HealthModule\n\n\n\nPostModule -->\n\nSearchModule->PostModule\n\n\n\n\n\nElasticsearchHealthIndicator\n\nElasticsearchHealthIndicator\n\nHealthModule -->\n\nElasticsearchHealthIndicator->HealthModule\n\n\n\n\n\nCustomLogger\n\nCustomLogger\n\nLoggerModule -->\n\nCustomLogger->LoggerModule\n\n\n\n\n\nLogsService\n\nLogsService\n\nLoggerModule -->\n\nLogsService->LoggerModule\n\n\n\n\n\nPostsSearchService\n\nPostsSearchService\n\nPostModule -->\n\nPostsSearchService->PostModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostModule -->\n\nPostsService->PostModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        11 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    9 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    7 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    25 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    21 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    5 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
